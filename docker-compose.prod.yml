# Примітка: Цей файл призначений для випадків, коли MongoDB запускається в контейнері
# Для локальної MongoDB на сервері використовуйте звичайний деплой без Docker Compose
# або видаліть сервіс mongodb з цього файлу та налаштуйте підключення до локальної MongoDB

version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: helpdesk-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: helpdesk
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./mongodb/init:/docker-entrypoint-initdb.d:ro
    networks:
      - helpdesk-network
    ports:
      - "27017:27017"
    command: mongod --auth --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for Session Store and Caching
  redis:
    image: redis:7-alpine
    container_name: helpdesk-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - helpdesk-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: helpdesk-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD}@mongodb:27017/helpdesk?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      FRONTEND_URL: ${FRONTEND_URL:-https://helpdesk.yourdomain.com}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://helpdesk.yourdomain.com}
      UPLOAD_MAX_SIZE: ${UPLOAD_MAX_SIZE:-10485760}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-900000}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      AD_SERVER: ${AD_SERVER:-}
      AD_DOMAIN: ${AD_DOMAIN:-}
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - helpdesk-network
    ports:
      - "5000:5000"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend (Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-https://api.helpdesk.yourdomain.com}
    container_name: helpdesk-frontend
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - uploads_data:/usr/share/nginx/html/uploads:ro
    networks:
      - helpdesk-network
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: helpdesk-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - helpdesk-network
    ports:
      - "9090:9090"
    profiles:
      - monitoring

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: helpdesk-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - helpdesk-network
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: helpdesk-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - helpdesk-network
    ports:
      - "3100:3100"
    profiles:
      - monitoring

  # Backup service
  backup:
    image: alpine:latest
    container_name: helpdesk-backup
    restart: "no"
    environment:
      MONGO_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-7}
    volumes:
      - ./scripts/backup.sh:/backup.sh:ro
      - backup_data:/backup
      - uploads_data:/data/uploads:ro
    networks:
      - helpdesk-network
    depends_on:
      - mongodb
    profiles:
      - backup
    command: /bin/sh -c "chmod +x /backup.sh && crond -f"

networks:
  helpdesk-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  backup_data:
    driver: local