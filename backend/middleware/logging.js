const fs = require('fs').promises;
const path = require('path');
const logger = require('../utils/logger');

// –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥—ñ–≤ —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
const logsDir = path.join(__dirname, '../logs');

const ensureLogsDir = async () => {
  try {
    await fs.access(logsDir);
  } catch {
    await fs.mkdir(logsDir, { recursive: true });
  }
};

// Middleware –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è HTTP –∑–∞–ø–∏—Ç—ñ–≤
const requestLogger = (req, res, next) => {
  const start = Date.now();
  const timestamp = new Date().toISOString();
  
  // –õ–æ–≥—É—î–º–æ –ø–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Ç—É
  logger.info(`üåê ${timestamp} - ${req.method} ${req.originalUrl} - IP: ${req.ip}`);
  
  // –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
  const originalSend = res.send;
  res.send = function(data) {
    const duration = Date.now() - start;
    const statusColor = res.statusCode >= 400 ? 'üî¥' : 'üü¢';
    
    logger.info(`${statusColor} ${res.statusCode} - ${req.method} ${req.originalUrl} - ${duration}ms`);
    
    // –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ
    if (res.statusCode >= 400) {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${data}`);
    }
    
    originalSend.call(this, data);
  };
  
  next();
};

// Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ñ–∞–π–ª
const auditLogger = (action, details = {}) => {
  return async (req, res, next) => {
    const originalSend = res.send;
    
    res.send = async function(data) {
      // –õ–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —É—Å–ø—ñ—à–Ω—ñ –¥—ñ—ó
      if (res.statusCode < 400 && req.user) {
        const logEntry = {
          timestamp: new Date().toISOString(),
          userId: req.user._id,
          userEmail: req.user.email,
          action: action,
          details: {
            ...details,
            method: req.method,
            url: req.originalUrl,
            ip: req.ip,
            userAgent: req.get('User-Agent'),
            statusCode: res.statusCode
          },
          resourceId: req.params.id || null,
          body: req.method !== 'GET' ? req.body : null
        };
        
        try {
          await ensureLogsDir();
          const logFile = path.join(logsDir, `audit-${new Date().toISOString().split('T')[0]}.log`);
          await fs.appendFile(logFile, JSON.stringify(logEntry) + '\n');
        } catch (error) {
          logger.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ audit log:', error);
        }
      }
      
      originalSend.call(this, data);
    };
    
    next();
  };
};

// Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
const errorLogger = (err, req, res, next) => {
  const timestamp = new Date().toISOString();
  const errorLog = {
    timestamp,
    error: {
      message: err.message,
      stack: err.stack,
      name: err.name
    },
    request: {
      method: req.method,
      url: req.originalUrl,
      ip: req.ip,
      userAgent: req.get('User-Agent'),
      userId: req.user ? req.user._id : null,
      body: req.body
    }
  };
  
  logger.error(`üí• ${timestamp} - –ü–æ–º–∏–ª–∫–∞:`, err.message);
  logger.error(err.stack);
  
  // –ó–∞–ø–∏—Å—É—î–º–æ –ø–æ–º–∏–ª–∫—É —É —Ñ–∞–π–ª
  (async () => {
    try {
      await ensureLogsDir();
      const errorFile = path.join(logsDir, `errors-${new Date().toISOString().split('T')[0]}.log`);
      await fs.appendFile(errorFile, JSON.stringify(errorLog) + '\n');
    } catch (writeError) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É error log:', writeError);
    }
  })();
  
  // –ü–µ—Ä–µ–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–∞–ª—ñ
  next(err);
};

// Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–æ–≤–∏—Ö –ø–æ–¥—ñ–π
const securityLogger = (event, severity = 'medium') => {
  return async (req, res, next) => {
    const securityLog = {
      timestamp: new Date().toISOString(),
      event: event,
      severity: severity,
      ip: req.ip,
      userAgent: req.get('User-Agent'),
      userId: req.user ? req.user._id : null,
      userEmail: req.user ? req.user.email : null,
      url: req.originalUrl,
      method: req.method
    };
    
    logger.warn(`üîí –ë–µ–∑–ø–µ–∫–æ–≤–∞ –ø–æ–¥—ñ—è: ${event} - IP: ${req.ip}`);
    
    try {
      await ensureLogsDir();
      const securityFile = path.join(logsDir, `security-${new Date().toISOString().split('T')[0]}.log`);
      await fs.appendFile(securityFile, JSON.stringify(securityLog) + '\n');
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É security log:', error);
    }
    
    next();
  };
};

// Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è Telegram –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
const telegramLogger = (action) => {
  return async (req, res, next) => {
    const telegramLog = {
      timestamp: new Date().toISOString(),
      action: action,
      telegramUserId: req.body.from ? req.body.from.id : null,
      telegramUsername: req.body.from ? req.body.from.username : null,
      chatId: req.body.chat ? req.body.chat.id : null,
      messageText: req.body.text || null,
      callbackData: req.body.callback_query ? req.body.callback_query.data : null
    };
    
    logger.info(`üì± Telegram: ${action} - User: ${telegramLog.telegramUsername || telegramLog.telegramUserId}`);
    
    try {
      await ensureLogsDir();
      const telegramFile = path.join(logsDir, `telegram-${new Date().toISOString().split('T')[0]}.log`);
      await fs.appendFile(telegramFile, JSON.stringify(telegramLog) + '\n');
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É telegram log:', error);
    }
    
    next();
  };
};

module.exports = {
  requestLogger,
  auditLogger,
  errorLogger,
  securityLogger,
  telegramLogger
};