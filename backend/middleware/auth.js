const jwt = require('jsonwebtoken');
const User = require('../models/User');
const logger = require('../utils/logger');

// Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
const authenticateToken = async (req, res, next) => {
  try {
    logger.info('üîê authenticateToken middleware:', {
      method: req.method,
      url: req.url,
      hasAuthHeader: !!req.headers.authorization
    });

    const authHeader = req.headers.authorization;
    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN
    
    if (!token) {
      logger.info('‚ùå –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return res.status(401).json({
        success: false,
        message: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É –Ω–µ –Ω–∞–¥–∞–Ω–æ'
      });
    }
    
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.userId)
      .populate('position')
      .populate('city')
      .select('-password');
    
    if (!user) {
      return res.status(401).json({
        success: false,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }
    
    if (!user.isActive) {
      return res.status(401).json({
        success: false,
        message: '–ê–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ'
      });
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    if (user.registrationStatus === 'pending') {
      return res.status(401).json({
        success: false,
        message: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –æ—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
      });
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É rejected –≤–∏–¥–∞–ª–µ–Ω–∞, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤–∏–¥–∞–ª—è—é—Ç—å—Å—è –∑ –ë–î
    
    req.user = user;
    next();
  } catch (error) {
    if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({
        success: false,
        message: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω'
      });
    }
    
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({
        success: false,
        message: '–¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π'
      });
    }
    
    logger.error('–ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó'
    });
  }
};

// Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const requireAdmin = (req, res, next) => {
  if (req.user.role !== 'admin') {
    return res.status(403).json({
      success: false,
      message: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
    });
  }
  next();
};

// Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ–∑–≤–æ–ª—ñ–≤
const requirePermission = (permission) => {
  return (req, res, next) => {
    if (req.user.role === 'admin') {
      return next(); // –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –≤—Å—ñ –¥–æ–∑–≤–æ–ª–∏
    }
    
    if (!req.user.position) {
      return res.status(403).json({
        success: false,
        message: `–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ü–æ–∑–∏—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`
      });
    }

    // –†–æ–∑–±–∏—Ä–∞—î–º–æ –¥–æ–∑–≤—ñ–ª –Ω–∞ –º–æ–¥—É–ª—å —Ç–∞ –¥—ñ—é
    let module, action;
    if (permission.includes('_')) {
      // –§–æ—Ä–º–∞—Ç: module_action (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, view_analytics)
      const parts = permission.split('_');
      action = parts[0]; // view
      module = parts[1]; // analytics
    } else {
      // –Ø–∫—â–æ –¥–æ–∑–≤—ñ–ª –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —è–∫ —î
      module = permission;
      action = 'read'; // –¥—ñ—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    }
    
    if (!req.user.position.hasPermission(module, action)) {
      return res.status(403).json({
        success: false,
        message: `–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–æ–∑–≤—ñ–ª: ${module}.${action}`
      });
    }
    
    next();
  };
};

// Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ —Ä–µ—Å—É—Ä—Å—É –∞–±–æ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const requireOwnershipOrAdmin = (resourceField = 'createdBy') => {
  return (req, res, next) => {
    // –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤
    if (req.user.role === 'admin') {
      return next();
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–ª–∞—Å–Ω—ñ—Å—Ç—å —Ä–µ—Å—É—Ä—Å—É
    const resourceOwnerId = req.resource ? req.resource[resourceField] : null;
    
    if (!resourceOwnerId || resourceOwnerId.toString() !== req.user._id.toString()) {
      return res.status(403).json({
        success: false,
        message: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Å–≤–æ—ó —Ä–µ—Å—É—Ä—Å–∏'
      });
    }
    
    next();
  };
};

// Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
const logUserAction = (action) => {
  return (req, res, next) => {
    const originalSend = res.send;
    
    res.send = function(data) {
      // –õ–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —É—Å–ø—ñ—à–Ω—ñ –¥—ñ—ó
      if (res.statusCode < 400) {
        logger.info(`üìù –î—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${req.user.email} –≤–∏–∫–æ–Ω–∞–≤ ${action} –≤ ${new Date().toISOString()}`);
      }
      
      originalSend.call(this, data);
    };
    
    next();
  };
};

// Middleware –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const userRateLimit = (maxRequests = 100, windowMs = 15 * 60 * 1000) => {
  const userRequests = new Map();
  
  return (req, res, next) => {
    const userId = req.user._id.toString();
    const now = Date.now();
    const windowStart = now - windowMs;
    
    if (!userRequests.has(userId)) {
      userRequests.set(userId, []);
    }
    
    const requests = userRequests.get(userId);
    
    // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Ç–∏
    const validRequests = requests.filter(time => time > windowStart);
    
    if (validRequests.length >= maxRequests) {
      return res.status(429).json({
        success: false,
        message: '–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ'
      });
    }
    
    validRequests.push(now);
    userRequests.set(userId, validRequests);
    
    next();
  };
};

module.exports = {
  authenticateToken,
  requireAdmin,
  requirePermission,
  requireOwnershipOrAdmin,
  logUserAction,
  userRateLimit
};