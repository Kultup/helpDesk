const { body, param, query, validationResult } = require('express-validator');
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');
const mongoSanitize = require('express-mongo-sanitize');
const logger = require('../utils/logger');

// Middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
const handleValidationErrors = (req, res, next) => {
  logger.info('üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è req.body:', req.body);
  
  const errors = validationResult(req);
  
  if (!errors.isEmpty()) {
    logger.info('‚ùå –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:', errors.array());
    
    const formattedErrors = errors.array().map(error => ({
      field: error.path,
      message: error.msg,
      value: error.value
    }));
    
    return res.status(400).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó',
      errors: formattedErrors
    });
  }
  
  logger.debug('‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ');
  next();
};

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const validateUser = [
  body('email')
    .isEmail()
    .withMessage('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email')
    .normalizeEmail(),
  body('password')
    .isLength({ min: 6 })
    .withMessage('–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤')
    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/)
    .withMessage('–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–Ω—É –≤–µ–ª–∏–∫—É –ª—ñ—Ç–µ—Ä—É, –æ–¥–Ω—É –º–∞–ª—É –ª—ñ—Ç–µ—Ä—É —Ç–∞ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É'),
  body('firstName')
    .trim()
    .isLength({ min: 2, max: 50 })
    .withMessage('–Ü–º\'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 2 –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤')
    .matches(/^[–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ña-zA-Z\s\-\']+$/)
    .withMessage('–Ü–º\'—è –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏, –¥–µ—Ñ—ñ—Å–∏ —Ç–∞ –∞–ø–æ—Å—Ç—Ä–æ—Ñ–∏'),
  body('lastName')
    .trim()
    .isLength({ min: 2, max: 50 })
    .withMessage('–ü—Ä—ñ–∑–≤–∏—â–µ –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 2 –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤')
    .matches(/^[–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ña-zA-Z\s\-\']+$/)
    .withMessage('–ü—Ä—ñ–∑–≤–∏—â–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏, –¥–µ—Ñ—ñ—Å–∏ —Ç–∞ –∞–ø–æ—Å—Ç—Ä–æ—Ñ–∏'),
  body('phone')
    .optional()
    .matches(/^\+380\d{9}$/)
    .withMessage('–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX'),
  body('role')
    .optional()
    .isIn(['admin', 'user'])
    .withMessage('–†–æ–ª—å –º–æ–∂–µ –±—É—Ç–∏ —Ç—ñ–ª—å–∫–∏ admin –∞–±–æ user'),
  handleValidationErrors
];

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∏–∫–µ—Ç—É
const validateTicket = [
  body('title')
    .trim()
    .isLength({ min: 5, max: 200 })
    .withMessage('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 5 –¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤'),
  body('description')
    .trim()
    .isLength({ min: 10, max: 2000 })
    .withMessage('–û–ø–∏—Å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 10 –¥–æ 2000 —Å–∏–º–≤–æ–ª—ñ–≤'),
  body('priority')
    .isIn(['low', 'medium', 'high', 'urgent'])
    .withMessage('–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –º–æ–∂–µ –±—É—Ç–∏: low, medium, high, urgent'),
  body('category')
    .isIn(['technical', 'billing', 'general', 'complaint', 'suggestion'])
    .withMessage('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –º–æ–∂–µ –±—É—Ç–∏: technical, billing, general, complaint, suggestion'),
  body('city')
    .optional()
    .isMongoId()
    .withMessage('–ù–µ–≤—ñ—Ä–Ω–∏–π ID –º—ñ—Å—Ç–∞'),
  body('assignedTo')
    .optional()
    .isMongoId()
    .withMessage('–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'),
  handleValidationErrors
];

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
const validateComment = [
  body('content')
    .trim()
    .isLength({ min: 1, max: 1000 })
    .withMessage('–ö–æ–º–µ–Ω—Ç–∞—Ä –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 1 –¥–æ 1000 —Å–∏–º–≤–æ–ª—ñ–≤'),
  body('isInternal')
    .optional()
    .isBoolean()
    .withMessage('isInternal –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ boolean'),
  handleValidationErrors
];

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ—Å—Ç–∞
const validateCity = [
  body('name')
    .trim()
    .isLength({ min: 2, max: 100 })
    .withMessage('–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 2 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤')
    .matches(/^[–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ña-zA-Z\s\-\']+$/)
    .withMessage('–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏, –¥–µ—Ñ—ñ—Å–∏ —Ç–∞ –∞–ø–æ—Å—Ç—Ä–æ—Ñ–∏'),
  body('region')
    .trim()
    .isLength({ min: 2, max: 100 })
    .withMessage('–ù–∞–∑–≤–∞ —Ä–µ–≥—ñ–æ–Ω—É –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 2 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤'),
  body('coordinates.lat')
    .optional()
    .isFloat({ min: -90, max: 90 })
    .withMessage('–®–∏—Ä–æ—Ç–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ -90 –¥–æ 90'),
  body('coordinates.lng')
    .optional()
    .isFloat({ min: -180, max: 180 })
    .withMessage('–î–æ–≤–≥–æ—Ç–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ -180 –¥–æ 180'),
  handleValidationErrors
];

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∞–¥–∏
const validatePosition = [
  body('name')
    .trim()
    .isLength({ min: 2, max: 100 })
    .withMessage('–ù–∞–∑–≤–∞ –ø–æ—Å–∞–¥–∏ –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 2 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤'),
  body('description')
    .optional()
    .trim()
    .isLength({ max: 500 })
    .withMessage('–û–ø–∏—Å –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 500 —Å–∏–º–≤–æ–ª—ñ–≤'),
  body('permissions')
    .optional()
    .isArray()
    .withMessage('–î–æ–∑–≤–æ–ª–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –º–∞—Å–∏–≤–æ–º'),
  handleValidationErrors
];

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è MongoDB ObjectId
const validateObjectId = (paramName) => [
  param(paramName)
    .isMongoId()
    .withMessage(`–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ${paramName}`),
  handleValidationErrors
];

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
const validatePagination = [
  query('page')
    .optional()
    .isInt({ min: 1 })
    .withMessage('–ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —á–∏—Å–ª–æ–º'),
  query('limit')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('–õ—ñ–º—ñ—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 100'),
  query('sort')
    .optional()
    .isIn(['createdAt', '-createdAt', 'updatedAt', '-updatedAt', 'title', '-title'])
    .withMessage('–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è'),
  handleValidationErrors
];

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ —Ç–∏–∫–µ—Ç—ñ–≤
const validateTicketFilters = [
  query('status')
    .optional()
    .isIn(['open', 'in_progress', 'resolved', 'closed'])
    .withMessage('–ù–µ–≤—ñ—Ä–Ω–∏–π —Å—Ç–∞—Ç—É—Å'),
  query('priority')
    .optional()
    .isIn(['low', 'medium', 'high', 'urgent'])
    .withMessage('–ù–µ–≤—ñ—Ä–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç'),
  query('category')
    .optional()
    .isIn(['technical', 'billing', 'general', 'complaint', 'suggestion'])
    .withMessage('–ù–µ–≤—ñ—Ä–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è'),
  query('city')
    .optional()
    .isMongoId()
    .withMessage('–ù–µ–≤—ñ—Ä–Ω–∏–π ID –º—ñ—Å—Ç–∞'),
  query('assignedTo')
    .optional()
    .isMongoId()
    .withMessage('–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'),
  query('createdFrom')
    .optional()
    .isISO8601()
    .withMessage('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –ø–æ—á–∞—Ç–∫—É'),
  query('createdTo')
    .optional()
    .isISO8601()
    .withMessage('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –∫—ñ–Ω—Ü—è'),
  handleValidationErrors
];

// Rate limiting –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤
const createRateLimit = (windowMs, max, message) => {
  return rateLimit({
    windowMs,
    max,
    message: {
      success: false,
      message: message || '–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ'
    },
    standardHeaders: true,
    legacyHeaders: false
  });
};

// –†—ñ–∑–Ω—ñ –ª—ñ–º—ñ—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∑–∞–ø–∏—Ç—ñ–≤
const rateLimits = {
  // –ó–∞–≥–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç –¥–ª—è API (–∑–±—ñ–ª—å—à—É—î–º–æ –¥–ª—è analytics)
  general: createRateLimit(15 * 60 * 1000, 5000, '–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ API'),
  
  // –°—Ç—Ä–æ–≥–∏–π –ª—ñ–º—ñ—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (—Ç–∏–º—á–∞—Å–æ–≤–æ –∑–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
  auth: createRateLimit(15 * 60 * 1000, 50, '–ó–∞–±–∞–≥–∞—Ç–æ —Å–ø—Ä–æ–± –≤—Ö–æ–¥—É, —Å–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 —Ö–≤–∏–ª–∏–Ω'),
  
  // –õ—ñ–º—ñ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–∫–µ—Ç—ñ–≤
  createTicket: createRateLimit(60 * 1000, 10, '–ó–∞–±–∞–≥–∞—Ç–æ —Ç–∏–∫–µ—Ç—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É'),
  
  // –õ—ñ–º—ñ—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
  upload: createRateLimit(60 * 1000, 20, '–ó–∞–±–∞–≥–∞—Ç–æ —Ñ–∞–π–ª—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É'),
  
  // –õ—ñ–º—ñ—Ç –¥–ª—è Telegram webhook
  telegram: createRateLimit(60 * 1000, 100, '–ó–∞–±–∞–≥–∞—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ Telegram'),
  
  // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç –¥–ª—è analytics (–¥—É–∂–µ –º'—è–∫–∏–π –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è 429 –ø–æ–º–∏–ª–æ–∫)
  analytics: createRateLimit(60 * 1000, 500, '–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É')
};

// Middleware –¥–ª—è —Å–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö
const sanitizeData = [
  mongoSanitize(), // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ NoSQL —ñ–Ω'—î–∫—Ü—ñ–π
  (req, res, next) => {
    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—è HTML
    const sanitizeHtml = (obj) => {
      for (let key in obj) {
        if (typeof obj[key] === 'string') {
          obj[key] = obj[key]
            .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
            .replace(/<[^>]*>/g, '')
            .trim();
        } else if (typeof obj[key] === 'object' && obj[key] !== null) {
          sanitizeHtml(obj[key]);
        }
      }
    };
    
    if (req.body) sanitizeHtml(req.body);
    if (req.query) sanitizeHtml(req.query);
    if (req.params) sanitizeHtml(req.params);
    
    next();
  }
];

// Middleware –¥–ª—è –±–µ–∑–ø–µ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
const securityHeaders = helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'"],
      imgSrc: ["'self'", "data:", "https:"],
      connectSrc: ["'self'"],
      fontSrc: ["'self'"],
      objectSrc: ["'none'"],
      mediaSrc: ["'self'"],
      frameSrc: ["'none'"]
    }
  },
  crossOriginEmbedderPolicy: false
});

module.exports = {
  validateUser,
  validateTicket,
  validateComment,
  validateCity,
  validatePosition,
  validateObjectId,
  validatePagination,
  validateTicketFilters,
  rateLimits,
  sanitizeData,
  securityHeaders,
  handleValidationErrors
};