const jwt = require('jsonwebtoken');
const logger = require('../utils/logger');
const User = require('../models/User');
const City = require('../models/City');
const Position = require('../models/Position');
const Ticket = require('../models/Ticket');

class TelegramService {
  constructor() {
    this.isInitialized = false;
    this.bot = null;
    this.userSessions = new Map();
    this.userStates = new Map();
  }

  async initialize() {
    try {
      const TelegramBot = require('node-telegram-bot-api');
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ –∑ .env —Ñ–∞–π–ª—É
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      
      if (!botToken) {
        logger.warn('‚ö†Ô∏è Telegram bot token –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ');
        return false;
      }

      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞ –∑ —Ç–æ–∫–µ–Ω–æ–º
      this.bot = new TelegramBot(botToken, { polling: true });
      this.isInitialized = true;

      // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
      this.setupEventHandlers();

      logger.telegram('‚úÖ Telegram –±–æ—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
      return true;
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Telegram –±–æ—Ç–∞:', error);
      this.isInitialized = false;
      return false;
    }
  }

  setupEventHandlers() {
    if (!this.bot) return;

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—é—Ç—å —á–µ—Ä–µ–∑ webhook
    // –ó–∞–ª–∏—à–∞—î–º–æ —Ü–µ–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ, –∞–ª–µ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ
    logger.info('Event handlers –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –¥–ª—è —Ä–æ–±–æ—Ç–∏ —á–µ—Ä–µ–∑ webhook');
  }

  async handleMessage(msg) {
    const chatId = msg.chat.id;
    const text = msg.text;

    // –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É)
    if (msg.contact) {
      await this.handleContact(msg);
      return;
    }

    if (!text) return;

    // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
    if (text.startsWith('/')) {
      await this.handleCommand(chatId, text);
      return;
    }

    // –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
    const currentState = this.getCurrentState(chatId);
    if (currentState === 'registration') {
      const session = this.userSessions.get(chatId);
      if (session) {
        await this.handleRegistrationStep(chatId, text, session);
      } else {
        // –Ø–∫—â–æ —Å–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –ø–æ—á–∞—Ç–∫—É
        await this.bot.sendMessage(chatId, 
          '–°–µ—Å—ñ—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤—Ç—Ä–∞—á–µ–Ω–∞. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É –∑ –∫–æ–º–∞–Ω–¥–∏ /start'
        );
        this.popState(chatId);
      }
    } else {
      // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏
      await this.bot.sendMessage(chatId, 
        '–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
      );
    }
  }

  async handleCallbackQuery(query) {
    const chatId = query.message.chat.id;
    const data = query.data;

    // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è callback
    await this.bot.answerCallbackQuery(query.id);

    // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ callback
    if (data === 'main_menu') {
      await this.handleStartCommand(chatId);
    } else if (data === 'my_tickets') {
      await this.handleMyTicketsCallback(chatId);
    } else if (data === 'create_ticket') {
      await this.handleCreateTicketCallback(chatId);
    } else if (data === 'settings') {
      await this.handleSettingsCallback(chatId);
    } else if (data === 'registration') {
      await this.handleRegisterCallback(chatId);
    } else if (data === 'cancel') {
      await this.handleCancelCallback(chatId);
    } else if (data.startsWith('view_ticket_')) {
      const user = await this.findUserByTelegramId(chatId);
      await this.handleViewTicketCallback(chatId, data, user);
    } else if (data === 'check_status') {
      await this.handleCheckStatusCallback(chatId);
    } else if (data === 'contact_support') {
      await this.handleContactSupportCallback(chatId);
    } else if (data === 'help_info') {
      await this.handleHelpInfoCallback(chatId);
    } else if (data === 'statistics') {
      await this.handleStatisticsCallback(chatId);
    } else if (data.startsWith('city_')) {
      const user = await this.findUserByTelegramId(chatId);
      await this.handleCityCallback(chatId, data, user);
    } else if (data.startsWith('position_')) {
      const user = await this.findUserByTelegramId(chatId);
      await this.handlePositionCallback(chatId, data, user);
    }
    // –î–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
  }

  async handleCommand(chatId, command) {
    switch (command) {
      case '/start':
        await this.handleStartCommand(chatId);
        break;
      case '/help':
        await this.bot.sendMessage(chatId, 
          '–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n' +
          '/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É\n' +
          '/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
        );
        break;
      default:
        // –î–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /start
        await this.bot.sendMessage(chatId, 
          '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∞–±–æ /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏.'
        );
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Å—Ç–∞—Ç—É—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
   */
  async handleStartCommand(chatId) {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
      const user = await this.findUserByTelegramId(chatId);
      
      // –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      logger.info(`handleStartCommand –¥–ª—è chatId: ${chatId}`);
      if (user) {
        logger.info(`–ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${user.firstName} ${user.lastName}, registrationStatus: ${user.registrationStatus}, isActive: ${user.isActive}`);
      } else {
        logger.info(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ telegramId ${chatId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
      }
      
      if (user && user.registrationStatus === 'approved') {
        // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π - –ø–æ–∫–∞–∑—É—î–º–æ –¥–∞—à–±–æ—Ä–¥
        await this.showUserDashboard(chatId, user);
      } else if (user && user.registrationStatus === 'pending') {
        // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, –∞–ª–µ –æ—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        await this.showPendingMessage(chatId);
      } else {
        // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π - –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
        await this.showRegistrationOffer(chatId);
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤ handleStartCommand:', error);
      await this.bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
   }

  /**
   * –ü–æ–∫–∞–∑ –¥–∞—à–±–æ—Ä–¥—É –¥–ª—è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
   */
  async showUserDashboard(chatId, user) {
    try {
      logger.info(`showUserDashboard –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è chatId: ${chatId}, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${user.firstName} ${user.lastName}`);
      
      const welcomeMessage = `üéâ –í—ñ—Ç–∞—î–º–æ, ${user.firstName} ${user.lastName}!\n\n` +
        `üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\n` +
        `üìß Email: ${user.email}\n` +
        `üè¢ –ó–∞–∫–ª–∞–¥: ${user.department}\n` +
        `üìç –ú—ñ—Å—Ç–æ: ${user.city?.name || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n` +
        `üíº –ü–æ—Å–∞–¥–∞: ${user.position?.title || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n\n` +
        `–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üé´ –ú–æ—ó —Ç—ñ–∫–µ—Ç–∏', callback_data: 'my_tickets' }],
          [{ text: 'üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç', callback_data: 'create_ticket' }],–≤
          [{ text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', callback_data: 'settings' }],
          [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'statistics' }]
        ]
      };

      await this.bot.sendMessage(chatId, welcomeMessage, { reply_markup: keyboard });
      logger.info(`showUserDashboard —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è chatId: ${chatId}`);
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –≤ showUserDashboard –¥–ª—è chatId: ${chatId}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
   */
  async showPendingMessage(chatId) {
    const message = `‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –æ—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n` +
      `üìã –°—Ç–∞—Ç—É—Å: –í –æ–±—Ä–æ–±—Ü—ñ\n` +
      `üïê –ó–∞–∑–≤–∏—á–∞–π —Ä–æ–∑–≥–ª—è–¥ –∑–∞–π–º–∞—î –¥–æ 24 –≥–æ–¥–∏–Ω.\n\n` +
      `–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ –∑–∞—è–≤–∫–∞ –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∞.\n\n` +
      `–î—è–∫—É—î–º–æ –∑–∞ —Ç–µ—Ä–ø—ñ–Ω–Ω—è! üôè`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å', callback_data: 'check_status' }],
        [{ text: 'üìû –ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é', callback_data: 'contact_support' }]
      ]
    };

    await this.bot.sendMessage(chatId, message, { reply_markup: keyboard });
  }

  /**
   * –ü–æ–∫–∞–∑ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –¥–ª—è –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
   */
  async showRegistrationOffer(chatId) {
    try {
      logger.info(`showRegistrationOffer –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è chatId: ${chatId}`);
      
      const message = `üëã –í—ñ—Ç–∞—î–º–æ –≤ —Å–∏—Å—Ç–µ–º—ñ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!\n\n` +
        `üîê –î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.\n\n` +
        `üìù –ü—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∫–ª—é—á–∞—î:\n` +
        `‚Ä¢ –í–≤–µ–¥–µ–Ω–Ω—è –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö\n` +
        `‚Ä¢ –í–∏–±—ñ—Ä –º—ñ—Å—Ç–∞ —Ç–∞ –ø–æ—Å–∞–¥–∏\n` +
        `‚Ä¢ –í–∫–∞–∑–∞–Ω–Ω—è –∑–∞–∫–ª–∞–¥—É\n` +
        `‚Ä¢ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö\n\n` +
        `‚è±Ô∏è –ó–∞–π–º–µ –≤—Å—å–æ–≥–æ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω.\n\n` +
        `–†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é?`;

      const keyboard = {
        inline_keyboard: [
          [{ text: '‚úÖ –†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é', callback_data: 'registration' }],
          [{ text: '‚ùì –î–æ–≤—ñ–¥–∫–∞', callback_data: 'help_info' }],
          [{ text: 'üìû –ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é', callback_data: 'contact_support' }]
        ]
      };

      await this.bot.sendMessage(chatId, message, { reply_markup: keyboard });
      logger.info(`showRegistrationOffer —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è chatId: ${chatId}`);
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –≤ showRegistrationOffer –¥–ª—è chatId: ${chatId}:`, error);
      throw error;
    }
  }

  pushState(chatId, state) {
    let states = this.userStates.get(chatId);
    if (!states) {
      states = [];
      this.userStates.set(chatId, states);
    }
    states.push(state);
  }

  popState(chatId) {
    const states = this.userStates.get(chatId);
    if (states && states.length > 0) {
      return states.pop();
    }
    return null;
  }

  getCurrentState(chatId) {
    const states = this.userStates.get(chatId);
    return states && states.length > 0 ? states[states.length - 1] : 'main';
  }

  async showMainMenu(chatId, user) {
    this.pushState(chatId, 'create_ticket');
    const keyboard = {
      inline_keyboard: [
        [{ text: '–ú–æ—ó —Ç—ñ–∫–µ—Ç–∏', callback_data: 'my_tickets' }],
        [{ text: '–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç', callback_data: 'create_ticket' }],
        [{ text: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', callback_data: 'settings' }],
      ]
    };
    if (!user) {
      keyboard.inline_keyboard.push([{ text: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è', callback_data: 'registration' }]);
    }
    await this.bot.sendMessage(chatId, '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', { reply_markup: keyboard });
  }

  async showMenuForState(chatId, state) {
    const user = await this.findUserByTelegramId(chatId);
    switch (state) {
      case 'main':
        await this.showMainMenu(chatId, user);
        break;
      case 'registration':
        await this.handleRegisterCallback(chatId, user);
        break;
      case 'my_tickets':
        await this.handleMyTicketsCallback(chatId, user);
        break;
      case 'create_ticket':
        await this.handleCreateTicketCallback(chatId, user);
        break;
      case 'settings':
        await this.handleSettingsCallback(chatId, user);
        break;
      default:
        await this.showMainMenu(chatId, user);
    }
  }

  /**
   * –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏
   */  async start() {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –±–æ—Ç–∞
    if (!this.isInitialized || !this.bot) {
      logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é:', error);
      return;
    }

    try {
      await this.bot.startPolling();
      this.isInitialized = true;
      logger.telegram('Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ');
    } catch (error) {
      logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é:', error);
      return;
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
   */
  async handleRegistrationStep(chatId, text, session) {
    try {
      switch (session.step) {
        case 'firstName':
          if (text.trim() === '') {
            await this.bot.sendMessage(chatId, 
              '‚ùå –Ü–º\'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:', {
                reply_markup: this.getNavigationKeyboard()
              }
            );
            return;
          }
          session.data.firstName = text;
          session.step = 'lastName';
          
          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Å–µ—Å—ñ—é
          this.userSessions.set(chatId, session);
          
          await this.bot.sendMessage(chatId, 
            'üë§ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ:', {
              reply_markup: this.getNavigationKeyboard()
            }
          );
          break;

        case 'lastName':
          if (text.trim() === '') {
            await this.bot.sendMessage(chatId, 
              '‚ùå –ü—Ä—ñ–∑–≤–∏—â–µ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:', {
                reply_markup: this.getNavigationKeyboard()
              }
            );
            return;
          }
          session.data.lastName = text;
          session.step = 'email';
          
          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Å–µ—Å—ñ—é
          this.userSessions.set(chatId, session);
          
          await this.bot.sendMessage(chatId, 
            'üìß –í–≤–µ–¥—ñ—Ç—å –≤–∞—à email:', {
              reply_markup: this.getNavigationKeyboard()
            }
          );
          break;

        case 'email':
          // –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(text.trim())) {
            await this.bot.sendMessage(chatId, 
              '‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:', {
                reply_markup: this.getNavigationKeyboard()
              }
            );
            return;
          }
          session.data.email = text.trim();
          session.step = 'password';
          
          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Å–µ—Å—ñ—é
          this.userSessions.set(chatId, session);
          
          await this.bot.sendMessage(chatId, 
            'üîí –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å (–º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤):', {
              reply_markup: this.getNavigationKeyboard()
            }
          );
          break;

        case 'password':
          if (text.trim().length < 6) {
            await this.bot.sendMessage(chatId, 
              '‚ùå –ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:', {
                reply_markup: this.getNavigationKeyboard()
              }
            );
            return;
          }
          session.data.password = text.trim();
          session.step = 'city';
          
          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Å–µ—Å—ñ—é
          this.userSessions.set(chatId, session);
          
          // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ –º—ñ—Å—Ç —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
          const cities = await this.loadCities();
          if (cities.length > 0) {
            await this.bot.sendMessage(chatId, 
              'üèôÔ∏è –û–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:', {
                reply_markup: this.getCitiesKeyboard(cities)
              }
            );
          } else {
            await this.bot.sendMessage(chatId, 
              'üèôÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:', {
                reply_markup: this.getNavigationKeyboard()
              }
            );
          }
          break;

        case 'city':
          // –¶–µ–π –∫—Ä–æ–∫ —Ç–µ–ø–µ—Ä –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
          await this.bot.sendMessage(chatId, 
            'üèôÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –≤–∏—â–µ.', {
              reply_markup: this.getNavigationKeyboard()
            }
          );
          break;

        case 'position':
          // –¶–µ–π –∫—Ä–æ–∫ —Ç–µ–ø–µ—Ä –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
          await this.bot.sendMessage(chatId, 
            'üíº –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Å–∞–¥—É –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –≤–∏—â–µ.', {
              reply_markup: this.getNavigationKeyboard()
            }
          );
          break;

        case 'department':
          if (text.trim() === '') {
            await this.bot.sendMessage(chatId, 
              '‚ùå –ó–∞–∫–ª–∞–¥ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:', {
                reply_markup: this.getNavigationKeyboard()
              }
            );
            return;
          }
          session.data.department = text;
          session.step = 'phone';
          
          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Å–µ—Å—ñ—é
          this.userSessions.set(chatId, session);
          
          // –ó–∞–ø–∏—Ç—É—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
          await this.bot.sendMessage(chatId, 
            'üì± –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:', {
              reply_markup: {
                keyboard: [
                  [{ text: 'üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact: true }],
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }]
                ],
                resize_keyboard: true,
                one_time_keyboard: true
              }
            }
          );
          break;

        case 'phone':
          // –¶–µ–π –∫—Ä–æ–∫ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
          await this.bot.sendMessage(chatId, 
            'üì± –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–æ—é "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º" –Ω–∏–∂—á–µ.', {
              reply_markup: {
                keyboard: [
                  [{ text: 'üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact: true }],
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }]
                ],
                resize_keyboard: true,
                one_time_keyboard: true
              }
            }
          );
          break;
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤ handleRegistrationStep:', error);
      await this.bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é.');
      this.popState(chatId);
      await this.showMenuForState(chatId, this.getCurrentState(chatId) || 'main');
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
   */
  async completeRegistration(chatId, session) {
    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ ObjectId
      const registrationData = {
        ...session.data,
        telegramId: chatId.toString()
      };

      // –í–∏–¥–∞–ª—è—î–º–æ positionId —Ç–∞ cityId, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è API
      delete registrationData.positionId;
      delete registrationData.cityId;

      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ ObjectId –¥–ª—è –ø–æ—Å–∞–¥–∏
      if (registrationData.position) {
        const position = await Position.findOne({ title: registrationData.position });
        if (position) {
          registrationData.position = position._id;
        } else {
          await this.bot.sendMessage(chatId, 
            `‚ùå –ü–æ—Å–∞–¥–∞ "${registrationData.position}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.`, {
              reply_markup: this.getNavigationKeyboard()
            }
          );
          return;
        }
      }

      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ ObjectId –¥–ª—è –º—ñ—Å—Ç–∞
      if (registrationData.city) {
        const city = await City.findOne({ name: registrationData.city });
        if (city) {
          registrationData.city = city._id;
        } else {
          await this.bot.sendMessage(chatId, 
            `‚ùå –ú—ñ—Å—Ç–æ "${registrationData.city}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.`, {
              reply_markup: this.getNavigationKeyboard()
            }
          );
          return;
        }
      }

      const response = await fetch(`${process.env.API_BASE_URL}/auth/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(registrationData)
      });

      if (response.ok) {
        this.userSessions.delete(chatId);
        await this.bot.sendMessage(chatId, 
          '‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–Ω–∞!\n\n' +
          '‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n' +
          '–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ –∑–∞—è–≤–∫–∞ –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∞.\n\n' +
          '–î—è–∫—É—î–º–æ –∑–∞ —Ç–µ—Ä–ø—ñ–Ω–Ω—è!', {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
              ]
            }
          }
        );
      } else {
        const error = await response.json();
        await this.bot.sendMessage(chatId, 
          `‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ${error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`, {
            reply_markup: this.getNavigationKeyboard()
          }
        );
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
      await this.bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –∫—Ä–æ–∫—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É
   */
  async handleTicketCreationStep(chatId, text, session) {
    try {
      switch (session.step) {
        case 'title':
          if (text.length < 5) {
            await this.bot.sendMessage(chatId, 
              '‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 5 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:', {
                reply_markup: this.getNavigationKeyboard()
              }
            );
            return;
          }

          session.data.title = text;
          session.step = 'description';
          
          await this.bot.sendMessage(chatId, 
            'üìù –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏:', {
              reply_markup: this.getNavigationKeyboard()
            }
          );
          break;

        case 'description':
          if (text.length < 10) {
            await this.bot.sendMessage(chatId, 
              '‚ùå –û–ø–∏—Å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:', {
                reply_markup: this.getNavigationKeyboard()
              }
            );
            return;
          }

          session.data.description = text;
          session.step = 'category';
          
          await this.bot.sendMessage(chatId, 
            'üìÇ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç—ñ–∫–µ—Ç—É:', {
              reply_markup: this.getCategoryKeyboard()
            }
          );
          break;
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤ handleTicketCreationStep:', error);
      await this.bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç—ñ–∫–µ—Ç—É
   */
  async handleCategoryCallback(chatId, data, user) {
    const session = this.userSessions.get(chatId);
    if (!session || session.action !== 'create_ticket') {
      return;
    }

    const category = data.replace('category_', '');
    session.data.category = category;
    session.step = 'priority';
    
    await this.bot.sendMessage(chatId, 
      '‚ö° –û–±–µ—Ä—ñ—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —Ç—ñ–∫–µ—Ç—É:', {
        reply_markup: this.getTicketCreationKeyboard()
      }
    );
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É —Ç—ñ–∫–µ—Ç—É
   */
  async handlePriorityCallback(chatId, data, user) {
    const session = this.userSessions.get(chatId);
    if (!session || session.action !== 'create_ticket') {
      return;
    }

    const priority = data.replace('priority_', '');
    session.data.priority = priority;
    
    await this.completeTicketCreation(chatId, session, user);
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É
   */
  async completeTicketCreation(chatId, session, user) {
    try {
      const ticketData = {
        ...session.data,
        city: user.city?._id || user.city?.id || user.city // –ü–µ—Ä–µ–¥–∞—î–º–æ ID –º—ñ—Å—Ç–∞
      };

      // –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      logger.info('Telegram Bot - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É:', {
        chatId,
        ticketData: JSON.stringify(ticketData, null, 2),
        sessionData: JSON.stringify(session.data, null, 2)
      });

      const response = await fetch(`${process.env.API_BASE_URL}/tickets`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${user.token}`
        },
        body: JSON.stringify(ticketData)
      });

      if (response.ok) {
        const ticket = await response.json();
        this.userSessions.delete(chatId);
        
        const priorityEmoji = this.getPriorityEmoji(ticket.priority);
        await this.bot.sendMessage(chatId, 
          `‚úÖ –¢—ñ–∫–µ—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n` +
          `üé´ ID: ${ticket._id}\n` +
          `üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${ticket.title}\n` +
          `${priorityEmoji} –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${this.getPriorityText(ticket.priority)}\n` +
          `üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: ${this.formatDate(ticket.createdAt)}`, {
            reply_markup: this.getNavigationKeyboard()
          }
        );
      } else {
        const error = await response.json();
        logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É:', {
          status: response.status,
          error: error,
          ticketData: JSON.stringify(ticketData, null, 2)
        });
        
        await this.bot.sendMessage(chatId, 
          `‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É: ${error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`, {
            reply_markup: this.getNavigationKeyboard()
          }
        );
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É:', error);
      await this.bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –∫—Ä–æ–∫—É –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è
   */
  async handleCommentStep(chatId, text, session) {
    try {
      const { ticketId } = session.data;
      const user = await this.findUserByTelegramId(chatId);

      const commentData = {
        content: text,
        author: user._id
      };

      const response = await fetch(`${process.env.API_BASE_URL}/tickets/${ticketId}/comments`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${user.token}`
        },
        body: JSON.stringify(commentData)
      });

      if (response.ok) {
        this.userSessions.delete(chatId);
        await this.bot.sendMessage(chatId, 
          '‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!', {
            reply_markup: this.getNavigationKeyboard()
          }
        );
      } else {
        await this.bot.sendMessage(chatId, 
          '‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', {
            reply_markup: this.getNavigationKeyboard()
          }
        );
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è:', error);
      await this.bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  }

  /**
   * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º
   */
  async displayUserTickets(chatId, userId, status = null) {
    try {
      let url = `${process.env.API_BASE_URL}/tickets?createdBy=${userId}`;
      if (status) {
        url += `&status=${status}`;
      }

      const response = await fetch(url);
      
      if (response.ok) {
        const tickets = await response.json();
        
        if (tickets.length === 0) {
          const statusText = status ? this.getStatusText(status) : '–≤—Å—ñ—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤';
          await this.bot.sendMessage(chatId, 
            `üìã –¢—ñ–∫–µ—Ç—ñ–≤ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º "${statusText}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`, {
              reply_markup: this.getNavigationKeyboard()
            }
          );
          return;
        }

        const ticketsList = tickets.slice(0, 10).map(ticket => {
          const statusEmoji = this.getStatusEmoji(ticket.status);
          const priorityEmoji = this.getPriorityEmoji(ticket.priority);
          return `${statusEmoji} ${ticket.title}\n${priorityEmoji} ${this.getPriorityText(ticket.priority)} | üìÖ ${this.formatDate(ticket.createdAt)}`;
        }).join('\n\n');

        const keyboard = {
          inline_keyboard: [
            ...tickets.slice(0, 5).map(ticket => [{
              text: `üëÅÔ∏è ${ticket.title.substring(0, 30)}${ticket.title.length > 30 ? '...' : ''}`,
              callback_data: `view_ticket_${ticket._id}`
            }]),
            [
              { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'my_tickets' },
              { text: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'main_menu' }
            ]
          ]
        };

        await this.bot.sendMessage(chatId, 
          `üìã –í–∞—à—ñ —Ç—ñ–∫–µ—Ç–∏:\n\n${ticketsList}`, {
            reply_markup: keyboard
          }
        );
      } else {
        await this.bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—ñ–≤! ‚ö†Ô∏è');
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—ñ–≤:', error);
      await this.bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ç—ñ–∫–µ—Ç—É
   */
  formatTicketDetails(ticket) {
    const statusEmoji = this.getStatusEmoji(ticket.status);
    const priorityEmoji = this.getPriorityEmoji(ticket.priority);
    
    return `üé´ –î–µ—Ç–∞–ª—ñ —Ç—ñ–∫–µ—Ç—É\n\n` +
      `üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${ticket.title}\n` +
      `üìù –û–ø–∏—Å: ${ticket.description}\n` +
      `${statusEmoji} –°—Ç–∞—Ç—É—Å: ${this.getStatusText(ticket.status)}\n` +
      `${priorityEmoji} –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${this.getPriorityText(ticket.priority)}\n` +
      `üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: ${this.formatDate(ticket.createdAt)}\n` +
      `üë§ –ê–≤—Ç–æ—Ä: ${ticket.createdBy?.email || '–ù–µ–≤—ñ–¥–æ–º–æ'}` +
      (ticket.assignedTo ? `\nüîß –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ: ${ticket.assignedTo.email}` : '') +
      (ticket.resolvedAt ? `\n‚úÖ –í–∏—Ä—ñ—à–µ–Ω–æ: ${this.formatDate(ticket.resolvedAt)}` : '');
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ callback
   */
  async handleRegisterCallback(chatId, user) {
    if (user) {
      await this.bot.sendMessage(chatId, '–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! ‚úÖ', {
        reply_markup: this.getNavigationKeyboard()
      });
      return;
    }

    this.pushState(chatId, 'registration');
    this.userSessions.set(chatId, {
      action: 'registration',
      step: 'firstName',
      data: {}
    });

    await this.bot.sendMessage(chatId, 
      'üìù –ü–æ—á–Ω–µ–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é!\n\nüë§ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º\'—è:', {
        reply_markup: this.getNavigationKeyboard()
      }
    );
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ "–ú–æ—ó —Ç—ñ–∫–µ—Ç–∏" —á–µ—Ä–µ–∑ callback
   */
  async handleMyTicketsCallback(chatId, user) {
    if (!user) {
      await this.bot.sendMessage(chatId, '–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è! üîê', {
        reply_markup: this.getMainMenuKeyboard(null)
      });
      return;
    }

    this.pushState(chatId, 'my_tickets');
    await this.bot.sendMessage(chatId, 
      '–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç—ñ–∫–µ—Ç—ñ–≤:', {
        reply_markup: this.getTicketsViewKeyboard()
      }
    );
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É —á–µ—Ä–µ–∑ callback
   */
  async handleCreateTicketCallback(chatId, user) {
    if (!user) {
      await this.bot.sendMessage(chatId, '–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è! üîê', {
        reply_markup: this.getMainMenuKeyboard(null)
      });
      return;
    }

    // –ü–æ–∫–∞–∑—É—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìã –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —à–∞–±–ª–æ–Ω', callback_data: 'create_with_template' },
          { text: '‚úèÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—Ä—É—á–Ω—É', callback_data: 'create_manual' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }
        ]
      ]
    };

    await this.bot.sendMessage(chatId,
      'üé´ *–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç—É*\n\n' +
      '–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É:',
      { 
        parse_mode: 'Markdown',
        reply_markup: keyboard
      }
    );
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —á–µ—Ä–µ–∑ callback
   */
  async handleSettingsCallback(chatId, user) {
    if (!user) {
      await this.bot.sendMessage(chatId, '–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è! üîê', {
        reply_markup: this.getMainMenuKeyboard(null)
      });
      return;
    }

    this.pushState(chatId, 'settings');
    const settingsText = `‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é\n\n` +
      `üìß Email: ${user.email}\n` +
      `üë§ –ü–æ—Å–∞–¥–∞: ${user.position || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n` +
      `üèôÔ∏è –ú—ñ—Å—Ç–æ: ${user.city || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n` +
      `üÜî Telegram ID: ${user.telegramId}`;

    await this.bot.sendMessage(chatId, settingsText, {
      reply_markup: this.getNavigationKeyboard()
    });
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç—ñ–∫–µ—Ç—ñ–≤
   */
  async handleTicketFilterCallback(chatId, filterData, user) {
    if (!user) {
      await this.bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É! üö´');
      return;
    }

    const statusMap = {
      'tickets_all': null,
      'tickets_open': 'open',
      'tickets_in_progress': 'in_progress',
      'tickets_resolved': 'resolved',
      'tickets_closed': 'closed'
    };

    const status = statusMap[filterData];
    await this.displayUserTickets(chatId, user._id, status);
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
   */
  async handleCancelCallback(chatId) {
    this.userSessions.delete(chatId);
    this.popState(chatId);
    const currentState = this.getCurrentState(chatId) || 'main';
    await this.showMenuForState(chatId, currentState);
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—ñ–∫–µ—Ç—É
   */
  async handleViewTicketCallback(chatId, data, user) {
    const ticketId = data.replace('view_ticket_', '');
    
    try {
      const response = await fetch(`${process.env.API_BASE_URL}/tickets/${ticketId}`, {
        headers: { 'Authorization': `Bearer ${user.token}` }
      });
      
      if (response.ok) {
        const ticket = await response.json();
        const ticketText = this.formatTicketDetails(ticket);
        
        await this.bot.sendMessage(chatId, ticketText, {
          reply_markup: this.getTicketActionKeyboard(ticketId)
        });
      } else {
        await this.bot.sendMessage(chatId, '–¢—ñ–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! ‚ùå');
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É:', error);
      await this.bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É! ‚ö†Ô∏è');
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É
   */
  async handleCommentTicketCallback(chatId, data, user) {
    const ticketId = data.replace('comment_ticket_', '');
    
    this.userSessions.set(chatId, {
      action: 'comment_ticket',
      step: 'comment',
      data: { ticketId }
    });

    await this.bot.sendMessage(chatId, 
      'üí¨ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ —Ç—ñ–∫–µ—Ç—É:', {
        reply_markup: this.getNavigationKeyboard()
      }
    );
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–æ—Å–∞–¥–∏
   */
  async handlePositionCallback(chatId, data, user) {
    const positionId = data.replace('position_', '');
    const session = this.userSessions.get(chatId);
    
    if (!session || session.action !== 'registration' || session.step !== 'position') {
       await this.bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞–Ω —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.');
       return;
     }

    try {
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Å–∞–¥—É –∑–∞ ID
      const position = await Position.findById(positionId);
      if (!position) {
        await this.bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞: –ø–æ—Å–∞–¥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.');
        return;
      }

      session.data.position = position.title;
      session.data.positionId = positionId;
      session.step = 'department';
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Å–µ—Å—ñ—é
      this.userSessions.set(chatId, session);
      
      await this.bot.sendMessage(chatId, 
        `‚úÖ –û–±—Ä–∞–Ω–æ –ø–æ—Å–∞–¥—É: ${position.title}\n\nüè¢ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑–∞–∫–ª–∞–¥:`, {
          reply_markup: this.getNavigationKeyboard()
        }
      );
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤ handlePositionCallback:', error);
      await this.bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞
   */
  async handleCityCallback(chatId, data, user) {
    const cityId = data.replace('city_', '');
    const session = this.userSessions.get(chatId);
    
    if (!session || session.action !== 'registration' || session.step !== 'city') {
       await this.bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞–Ω —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.');
       return;
     }

    try {
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º—ñ—Å—Ç–æ –∑–∞ ID
      const city = await City.findById(cityId);
      if (!city) {
        await this.bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞: –º—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
        return;
      }

      session.data.city = city.name;
      session.data.cityId = cityId;
      session.step = 'position';
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Å–µ—Å—ñ—é
      this.userSessions.set(chatId, session);
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–∞–¥ —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
      const positions = await this.loadPositions();
      if (positions.length > 0) {
        await this.bot.sendMessage(chatId, 
          `‚úÖ –û–±—Ä–∞–Ω–æ –º—ñ—Å—Ç–æ: ${city.name}\n\nüíº –û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –ø–æ—Å–∞–¥—É:`, {
            reply_markup: this.getPositionsKeyboard(positions)
          }
        );
      } else {
        await this.bot.sendMessage(chatId, 
          `‚úÖ –û–±—Ä–∞–Ω–æ –º—ñ—Å—Ç–æ: ${city.name}\n\nüíº –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –ø–æ—Å–∞–¥—É:`, {
            reply_markup: this.getNavigationKeyboard()
          }
        );
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤ handleCityCallback:', error);
      await this.bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—ñ—ó
   */
  async handleSessionMessage(msg, session) {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤
    if (!msg || !msg.chat || !session) {
      logger.error('handleSessionMessage: –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏', { msg, session });
      return;
    }

    const chatId = msg.chat.id;
    const text = msg.text;

    logger.info(`handleSessionMessage: –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${chatId}`, {
      text: text,
      sessionAction: session.action,
      sessionStep: session.step,
      sessionData: session.data
    });

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (!text) {
      logger.warn(`handleSessionMessage: –í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${chatId}`);
      await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.');
      return;
    }

    try {
      logger.info(`handleSessionMessage: –û–±—Ä–æ–±–∫–∞ –¥—ñ—ó "${session.action}" –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${chatId}`);
      
      if (session.action === 'registration') {
        logger.info(`handleSessionMessage: –í–∏–∫–ª–∏–∫–∞—é handleRegistrationStep –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${chatId}`);
        await this.handleRegistrationStep(chatId, text, session);
      } else if (session.action === 'create_ticket') {
        logger.info(`handleSessionMessage: –í–∏–∫–ª–∏–∫–∞—é handleTicketCreationStep –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${chatId}`);
        await this.handleTicketCreationStep(chatId, text, session);
      } else if (session.type === 'comment') {
         logger.info(`handleSessionMessage: –í–∏–∫–ª–∏–∫–∞—é handleCommentStep –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${chatId}`);
         await this.handleCommentStep(chatId, text, session);
      } else {
        logger.warn(`handleSessionMessage: –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è "${session.action}" –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${chatId}`);
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤ handleSessionMessage:', error);
      await this.bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ü—ñ—é.');
    }
  }

  /**
   * –®–≤–∏–¥–∫–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–∫–µ—Ç—É –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   */
  async handleQuickTicket(msg) {
    const chatId = msg.chat.id;
    const user = await this.findUserByTelegramId(chatId);

    if (!user) {
      await this.bot.sendMessage(chatId, 
        '–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–∫–µ—Ç—É —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è: /register'
      );
      return;
    }

    try {
      const ticket = new Ticket({
        title: msg.text.substring(0, 100),
        description: msg.text,
        createdBy: user._id,
        city: user.city,
        status: 'open',
        priority: 'medium'
      });

      await ticket.save();

      await this.bot.sendMessage(chatId,
        `‚úÖ –¢–∏–∫–µ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n` +
        `**ID:** ${ticket._id}\n` +
        `**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** ${ticket.title}\n` +
        `**–°—Ç–∞—Ç—É—Å:** –í—ñ–¥–∫—Ä–∏—Ç–∏–π\n` +
        `**–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:** –°–µ—Ä–µ–¥–Ω—ñ–π`,
        { parse_mode: 'Markdown' }
      );

      logger.telegram(`–°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∏–∫–µ—Ç —á–µ—Ä–µ–∑ Telegram: ${ticket._id}`, { 
        userId: user._id, 
        chatId 
      });

    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–∫–µ—Ç—É —á–µ—Ä–µ–∑ Telegram:', error);
      await this.bot.sendMessage(chatId, 
        '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–∫–µ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ. ‚ùå'
      );
    }
  }

  /**
   * –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ Telegram ID —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω—É
   */
  async findUserByTelegramId(telegramId) {
    const user = await User.findOne({ telegramId })
      .populate('position', 'name')
      .populate('city', 'name');
    
    if (user) {
      // –ì–µ–Ω–µ—Ä—É—î–º–æ JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const token = jwt.sign(
        { userId: user._id },
        process.env.JWT_SECRET,
        { expiresIn: process.env.JWT_EXPIRES_IN || '7d' }
      );
      
      // –î–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –¥–æ –æ–±'—î–∫—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î)
      user.token = token;
    }
    
    return user;
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–º–æ–¥–∑—ñ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É
   */
  getStatusEmoji(status) {
    const emojis = {
      'open': 'üî¥',
      'in_progress': 'üü°',
      'resolved': 'üü¢',
      'closed': '‚ö´'
    };
    return emojis[status] || '‚ùì';
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–º–æ–¥–∑—ñ –¥–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
   */
  getPriorityEmoji(priority) {
    const emojis = {
      'low': 'üîµ',
      'medium': 'üü°',
      'high': 'üî¥'
    };
    return emojis[priority] || '‚ùì';
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Å—Ç–∞—Ç—É—Å—É
   */
  getStatusText(status) {
    const texts = {
      'open': '–í—ñ–¥–∫—Ä–∏—Ç–∏–π',
      'in_progress': '–í —Ä–æ–±–æ—Ç—ñ',
      'resolved': '–í–∏—Ä—ñ—à–µ–Ω–∏–π',
      'closed': '–ó–∞–∫—Ä–∏—Ç–∏–π'
    };
    return texts[status] || '–ù–µ–≤—ñ–¥–æ–º–∏–π';
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
   */
  getPriorityText(priority) {
    const priorities = {
      'low': '–ù–∏–∑—å–∫–∏–π',
      'medium': '–°–µ—Ä–µ–¥–Ω—ñ–π', 
      'high': '–í–∏—Å–æ–∫–∏–π'
    };
    return priorities[priority] || priority;
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
   */
  formatDate(date) {
    return new Date(date).toLocaleDateString('uk-UA', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É —Ç–∏–∫–µ—Ç—É
   */
  async sendTicketNotification(ticket, action = 'updated') {
    if (!this.isInitialized) return;

    try {
      const user = await User.findById(ticket.createdBy);
      if (!user || !user.telegramId) return;

      const actionText = {
        'created': '—Å—Ç–≤–æ—Ä–µ–Ω–æ',
        'updated': '–æ–Ω–æ–≤–ª–µ–Ω–æ',
        'assigned': '–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ',
        'resolved': '–≤–∏—Ä—ñ—à–µ–Ω–æ',
        'closed': '–∑–∞–∫—Ä–∏—Ç–æ'
      };

      const message = 
        `üîî *–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç–∏–∫–µ—Ç*\n\n` +
        `–í–∞—à —Ç–∏–∫–µ—Ç **${ticket.title}** ${actionText[action] || '–∑–º—ñ–Ω–µ–Ω–æ'}.\n\n` +
        `**–°—Ç–∞—Ç—É—Å:** ${this.getStatusText(ticket.status)}\n` +
        `**ID:** ${ticket._id}`;

      await this.bot.sendMessage(user.telegramId, message, { 
        parse_mode: 'Markdown' 
      });

    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', error);
    }
  }

  /**
   * –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
   */
  async sendRegistrationApprovedNotification(user) {
    if (!this.isInitialized || !user.telegramId) return;

    try {
      const message = 
        `üéâ *–í—ñ—Ç–∞—î–º–æ!*\n\n` +
        `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –±—É–ª–∞ —Å—Ö–≤–∞–ª–µ–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n` +
        `–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ —Å–∏—Å—Ç–µ–º–∏ Help Desk.\n\n` +
        `–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start`;

      await this.bot.sendMessage(user.telegramId, message, { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É', callback_data: 'main_menu' }]
          ]
        }
      });

    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
    }
  }

  /**
   * –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
   */
  async sendRegistrationRejectedNotification(user, reason = '') {
    if (!this.isInitialized || !user.telegramId) return;

    try {
      let message = 
        `‚ùå *–ó–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞*\n\n` +
        `–ù–∞ –∂–∞–ª—å, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n`;

      if (reason) {
        message += `**–ü—Ä–∏—á–∏–Ω–∞:** ${reason}\n\n`;
      }

      message += `–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É, –≤–∏–ø—Ä–∞–≤–∏–≤—à–∏ –∑–∞–∑–Ω–∞—á–µ–Ω—ñ –Ω–µ–¥–æ–ª—ñ–∫–∏.\n\n` +
                 `–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /register`;

      await this.bot.sendMessage(user.telegramId, message, { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìù –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è', callback_data: 'register' }]
          ]
        }
      });

    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É –∑ —à–∞–±–ª–æ–Ω–æ–º
   */
  async handleCreateWithTemplateCallback(chatId, user) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –±–æ—Ç–∞
    if (!this.isInitialized || !this.bot) {
      logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É –∑ —à–∞–±–ª–æ–Ω—É: –ë–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
      return;
    }

    if (!user) {
      try {
        await this.bot.sendMessage(chatId, '–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è! üîê', {
          reply_markup: this.getMainMenuKeyboard(null)
        });
      } catch (error) {
        logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é:', error);
      }
      return;
    }

    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ —à–∞–±–ª–æ–Ω–∏ –∑ API
      const templates = await this.getTemplatesFromAPI();
      
      if (!templates || templates.length === 0) {
        await this.bot.sendMessage(chatId, 
          'üìã –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —à–∞–±–ª–æ–Ω—ñ–≤.\n\n' +
          '–°—Ç–≤–æ—Ä—ñ—Ç—å —Ç—ñ–∫–µ—Ç –≤—Ä—É—á–Ω—É:', {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úèÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—Ä—É—á–Ω—É', callback_data: 'create_manual' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
              ]
            }
          }
        );
        return;
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —à–∞–±–ª–æ–Ω–∞–º–∏
      const keyboard = this.createTemplatesKeyboard(templates);
      
      await this.bot.sendMessage(chatId,
        'üìã *–û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É:*\n\n' +
        '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –æ–¥–∏–Ω –∑ —à–∞–±–ª–æ–Ω—ñ–≤ –Ω–∏–∂—á–µ:', {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      );

    } catch (error) {
      logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É –∑ —à–∞–±–ª–æ–Ω—É:', error);
      try {
        await this.bot.sendMessage(chatId, 
          '‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç –≤—Ä—É—á–Ω—É.', {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úèÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—Ä—É—á–Ω—É', callback_data: 'create_manual' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
              ]
            }
          }
        );
      } catch (sendError) {
        logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É:', sendError);
      }
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É –≤—Ä—É—á–Ω—É
   */
  async handleCreateManualCallback(chatId, user) {
    if (!user) {
      await this.bot.sendMessage(chatId, '–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è! üîê', {
        reply_markup: this.getMainMenuKeyboard(null)
      });
      return;
    }

    this.userSessions.set(chatId, {
      action: 'create_ticket',
      step: 'title',
      data: { userId: user._id }
    });

    await this.bot.sendMessage(chatId, 
      '‚úèÔ∏è *–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É –≤—Ä—É—á–Ω—É*\n\n' +
      '–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—ñ–∫–µ—Ç—É:', {
        parse_mode: 'Markdown',
        reply_markup: this.getNavigationKeyboard()
      }
    );
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —à–∞–±–ª–æ–Ω—É
   */
  async handleTemplateCallback(chatId, data, user) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –±–æ—Ç–∞
    if (!this.isInitialized || !this.bot) {
      logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —à–∞–±–ª–æ–Ω—É: –ë–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
      return;
    }

    if (!user) {
      try {
        await this.bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É! üö´');
      } catch (error) {
        logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¥–æ—Å—Ç—É–ø:', error);
      }
      return;
    }

    const templateId = data.replace('template_', '');
    
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ —à–∞–±–ª–æ–Ω—É
      const template = await this.getTemplateById(templateId);
      
      if (!template) {
        try {
          await this.bot.sendMessage(chatId, '–®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! ‚ùå');
        } catch (error) {
          logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —à–∞–±–ª–æ–Ω—É:', error);
        }
        return;
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é –∑ –¥–∞–Ω–∏–º–∏ —à–∞–±–ª–æ–Ω—É
      this.userSessions.set(chatId, {
        action: 'create_ticket_from_template',
        step: 'confirm',
        data: {
          userId: user._id,
          template: template,
          title: template.title,
          description: template.description,
          priority: template.priority
        }
      });

      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ —Ç—ñ–∫–µ—Ç—É
      const priorityEmoji = this.getPriorityEmoji(template.priority);
      const categoryName = template.category?.name || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
      const estimatedTime = template.estimatedResolutionTime || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
      const message = 
        `üìã *–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ —Ç—ñ–∫–µ—Ç—É*\n\n` +
        `**–®–∞–±–ª–æ–Ω:** ${template.title}\n` +
        `**–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** ${categoryName}\n` +
        `${priorityEmoji} **–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:** ${this.getPriorityText(template.priority)}\n` +
        `‚è±Ô∏è **–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å:** ${estimatedTime}–≥\n\n` +
        `**–û–ø–∏—Å:**\n${template.description}\n\n` +
        `–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç –∑ —Ü–∏–º–∏ –¥–∞–Ω–∏–º–∏?`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: '‚úÖ –°—Ç–≤–æ—Ä–∏—Ç–∏', callback_data: 'confirm_template_ticket' },
            { text: '‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏', callback_data: 'edit_template_ticket' }
          ],
          [
            { text: 'üîô –ù–∞–∑–∞–¥ –¥–æ —à–∞–±–ª–æ–Ω—ñ–≤', callback_data: 'create_with_template' }
          ]
        ]
      };

      await this.bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —à–∞–±–ª–æ–Ω—É:', error);
      try {
        await this.bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —à–∞–±–ª–æ–Ω—É! ‚ùå');
      } catch (sendError) {
        logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –æ–±—Ä–æ–±–∫–∏ —à–∞–±–ª–æ–Ω—É:', sendError);
      }
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ –∑ API
   */
  async getTemplatesFromAPI() {
    try {
      const response = await fetch(`${process.env.API_BASE_URL}/ticket-templates/telegram`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        return data.data || [];
      }
      
      return [];
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ –∑ API:', error);
      return [];
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –∑–∞ ID
   */
  async getTemplateById(templateId) {
    try {
      const response = await fetch(`${process.env.API_BASE_URL}/ticket-templates/telegram/${templateId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        return data.data || null;
      }
      
      return null;
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –∑–∞ ID:', error);
      return null;
    }
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ —à–∞–±–ª–æ–Ω–∞–º–∏
   */
  createTemplatesKeyboard(templates) {
    const buttons = [];
    
    // –ì—Ä—É–ø—É—î–º–æ —à–∞–±–ª–æ–Ω–∏ –ø–æ 2 –≤ —Ä—è–¥
    for (let i = 0; i < templates.length; i += 2) {
      const row = [];
      
      // –ü–µ—Ä—à–∏–π —à–∞–±–ª–æ–Ω –≤ —Ä—è–¥—É
      const template1 = templates[i];
      row.push({
        text: `üìã ${template1.title}`,
        callback_data: `template_${template1.id}`
      });
      
      // –î—Ä—É–≥–∏–π —à–∞–±–ª–æ–Ω –≤ —Ä—è–¥—É (—è–∫—â–æ —î)
      if (i + 1 < templates.length) {
        const template2 = templates[i + 1];
        row.push({
          text: `üìã ${template2.title}`,
          callback_data: `template_${template2.id}`
        });
      }
      
      buttons.push(row);
    }

    // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    buttons.push([
      { text: '‚úèÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—Ä—É—á–Ω—É', callback_data: 'create_manual' },
      { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }
    ]);

    return { inline_keyboard: buttons };
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–º–æ–¥–∑—ñ –¥–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
   */
  getPriorityEmoji(priority) {
    switch (priority) {
      case 'high': return 'üî¥';
      case 'medium': return 'üü°';
      case 'low': return 'üü¢';
      default: return '‚ö™';
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
   */
  getPriorityText(priority) {
    switch (priority) {
      case 'high': return '–í–∏—Å–æ–∫–∏–π';
      case 'medium': return '–°–µ—Ä–µ–¥–Ω—ñ–π';
      case 'low': return '–ù–∏–∑—å–∫–∏–π';
      default: return '–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ';
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É –∑ —à–∞–±–ª–æ–Ω—É
   */
  async handleConfirmTemplateTicket(chatId, user) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –±–æ—Ç–∞
    if (!this.isInitialized || !this.bot) {
      logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É –∑ —à–∞–±–ª–æ–Ω—É: –ë–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
      return;
    }

    const session = this.userSessions.get(chatId);
    
    if (!session || session.action !== 'create_ticket_from_template') {
      try {
        await this.bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Å—ñ—ó! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
      } catch (error) {
        logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —Å–µ—Å—ñ—ó:', error);
      }
      return;
    }

    try {
      // –ú–∞–ø—ñ–Ω–≥ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –Ω–∞–∑–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö –∫–ª—é—á—ñ–≤
      const categoryMapping = {
        '–¢–µ—Ö–Ω—ñ—á–Ω—ñ': 'technical',
        '–ê–∫–∞—É–Ω—Ç': 'account', 
        '–§—ñ–Ω–∞–Ω—Å–∏': 'billing',
        '–ó–∞–≥–∞–ª—å–Ω—ñ': 'general'
      };

      // –û—Ç—Ä–∏–º—É—î–º–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–π –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
      const categoryName = session.data.template.category?.name || '–ó–∞–≥–∞–ª—å–Ω—ñ';
      const categoryKey = categoryMapping[categoryName] || 'general';

      // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—ñ–∫–µ—Ç –∑ –¥–∞–Ω–∏–º–∏ —à–∞–±–ª–æ–Ω—É
      const ticketData = {
        title: session.data.title,
        description: session.data.description,
        priority: session.data.priority,
        category: categoryKey,
        city: user.city?._id || user.city?.id || user.city // –ü–µ—Ä–µ–¥–∞—î–º–æ ID –º—ñ—Å—Ç–∞
      };

      // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      logger.info('üé´ TEMPLATE TICKET DATA:', JSON.stringify(ticketData, null, 2));
      logger.info('üè∑Ô∏è TEMPLATE CATEGORY:', session.data.template.category);
      logger.info('üîÑ CATEGORY MAPPING:', `${categoryName} -> ${categoryKey}`);
      logger.info('üìù SESSION DATA:', JSON.stringify(session.data, null, 2));
      
      logger.info('Telegram Bot - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É –∑ —à–∞–±–ª–æ–Ω—É:', {
        chatId,
        ticketData: JSON.stringify(ticketData, null, 2),
        templateCategory: session.data.template.category
      });

      const response = await fetch(`${process.env.API_BASE_URL}/tickets`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${user.token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(ticketData)
      });

      if (response.ok) {
        const result = await response.json();
        const ticket = result.data;
        
        // –û—á–∏—â—É—î–º–æ —Å–µ—Å—ñ—é
        this.userSessions.delete(chatId);
        
        const priorityEmoji = this.getPriorityEmoji(ticket.priority);
        const message = 
          `‚úÖ *–¢—ñ–∫–µ—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!*\n\n` +
          `üé´ **ID:** #${ticket.ticketNumber}\n` +
          `üìã **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** ${ticket.title}\n` +
          `${priorityEmoji} **–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:** ${this.getPriorityText(ticket.priority)}\n` +
          `üìÖ **–°—Ç–≤–æ—Ä–µ–Ω–æ:** ${new Date(ticket.createdAt).toLocaleString('uk-UA')}\n\n` +
          `–í–∞—à —Ç—ñ–∫–µ—Ç –ø—Ä–∏–π–Ω—è—Ç–æ –≤ –æ–±—Ä–æ–±–∫—É!`;

        await this.bot.sendMessage(chatId, message, {
          parse_mode: 'Markdown',
          reply_markup: this.getMainMenuKeyboard(user)
        });

      } else {
        const error = await response.json();
        logger.error('‚ùå TEMPLATE TICKET ERROR:', {
          status: response.status,
          error: error,
          ticketData: JSON.stringify(ticketData, null, 2)
        });
        
        logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É –∑ —à–∞–±–ª–æ–Ω—É:', {
          status: response.status,
          error: error,
          ticketData: JSON.stringify(ticketData, null, 2)
        });
        
        await this.bot.sendMessage(chatId, 
          `‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É: ${error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`, {
            reply_markup: this.getMainMenuKeyboard(user)
          }
        );
      }

    } catch (error) {
      logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É –∑ —à–∞–±–ª–æ–Ω—É:', error);
      try {
        await this.bot.sendMessage(chatId, 
          '‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', {
            reply_markup: this.getMainMenuKeyboard(user)
          }
        );
      } catch (sendError) {
        logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É:', sendError);
      }
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É –∑ —à–∞–±–ª–æ–Ω—É
   */
  async handleEditTemplateTicket(chatId, user) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –±–æ—Ç–∞
    if (!this.isInitialized || !this.bot) {
      logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É –∑ —à–∞–±–ª–æ–Ω—É: –ë–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
      return;
    }

    const session = this.userSessions.get(chatId);
    
    if (!session || session.action !== 'create_ticket_from_template') {
      try {
        await this.bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Å—ñ—ó! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
      } catch (error) {
        logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —Å–µ—Å—ñ—ó –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ:', error);
      }
      return;
    }

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    session.action = 'edit_template_ticket';
    session.step = 'choose_field';
    this.userSessions.set(chatId, session);

    const message = 
      `‚úèÔ∏è *–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É*\n\n` +
      `–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫', callback_data: 'edit_title' },
          { text: 'üìÑ –û–ø–∏—Å', callback_data: 'edit_description' }
        ],
        [
          { text: '‚ö° –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç', callback_data: 'edit_priority' }
        ],
        [
          { text: '‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏', callback_data: 'confirm_template_ticket' },
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'create_with_template' }
        ]
      ]
    };

    try {
      await this.bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      logger.error('Telegram Bot - –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É:', error);
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É —Ç—ñ–∫–µ—Ç–∞
   */
  async sendTicketStatusNotificationToGroup(ticket, oldStatus, newStatus, user) {
    if (!this.isInitialized) return;

    try {
      const groupId = process.env.TELEGRAM_GROUP_ID;
      if (!groupId) {
        logger.warn('TELEGRAM_GROUP_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
        return;
      }

      // –ï–º–æ–¥–∑—ñ –¥–ª—è —Å—Ç–∞—Ç—É—Å—ñ–≤
      const statusEmojis = {
        'open': 'üî¥',
        'in_progress': 'üü°', 
        'resolved': 'üü¢',
        'closed': '‚ö´'
      };

      // –ü–µ—Ä–µ–∫–ª–∞–¥ —Å—Ç–∞—Ç—É—Å—ñ–≤
      const statusTranslations = {
        'open': '–í—ñ–¥–∫—Ä–∏—Ç–∏–π',
        'in_progress': '–í —Ä–æ–±–æ—Ç—ñ',
        'resolved': '–í–∏—Ä—ñ—à–µ–Ω–∏–π',
        'closed': '–ó–∞–∫—Ä–∏—Ç–∏–π'
      };

      const oldStatusText = statusTranslations[oldStatus] || oldStatus;
      const newStatusText = statusTranslations[newStatus] || newStatus;
      const oldEmoji = statusEmojis[oldStatus] || '‚ö™';
      const newEmoji = statusEmojis[newStatus] || '‚ö™';

      const message = 
        `üîÑ *–ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É —Ç—ñ–∫–µ—Ç–∞*\n\n` +
        `üìã **–¢—ñ–∫–µ—Ç:** #${ticket._id.toString().slice(-6)}\n` +
        `üìù **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** ${ticket.title}\n\n` +
        `${oldEmoji} **–ë—É–ª–æ:** ${oldStatusText}\n` +
        `${newEmoji} **–°—Ç–∞–ª–æ:** ${newStatusText}\n\n` +
        `üë§ **–ó–º—ñ–Ω–∏–≤:** ${user.firstName} ${user.lastName}\n` +
        `üè¢ **–ü–æ—Å–∞–¥–∞:** ${user.position}\n` +
        `üèôÔ∏è **–ú—ñ—Å—Ç–æ:** ${user.city}\n\n` +
        `üïê **–ß–∞—Å:** ${new Date().toLocaleString('uk-UA')}`;

      const keyboard = {
        inline_keyboard: [
          [
            { 
              text: 'üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç—ñ–∫–µ—Ç', 
              url: `${process.env.FRONTEND_URL}/tickets/${ticket._id}` 
            }
          ]
        ]
      };

      await this.bot.sendMessage(groupId, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

      logger.info(`–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É —Ç—ñ–∫–µ—Ç–∞ ${ticket._id}`);

    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É:', error);
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç—ñ–∫–µ—Ç–∞
   */
  async sendNewTicketNotificationToGroup(ticket, user) {
    logger.info('üîî –°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç:', ticket._id);
    
    if (!this.isInitialized) {
      logger.warn('‚ùå Telegram –±–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
      return;
    }

    try {
      const groupId = process.env.TELEGRAM_GROUP_ID;
      logger.info('üì± Group ID:', groupId);
      
      if (!groupId) {
        logger.warn('TELEGRAM_GROUP_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
        return;
      }

      // –ï–º–æ–¥–∑—ñ –¥–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤
      const priorityEmojis = {
        'low': 'üü¢',
        'medium': 'üü°',
        'high': 'üî¥'
      };

      // –ü–µ—Ä–µ–∫–ª–∞–¥ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤
      const priorityTranslations = {
        'low': '–ù–∏–∑—å–∫–∏–π',
        'medium': '–°–µ—Ä–µ–¥–Ω—ñ–π', 
        'high': '–í–∏—Å–æ–∫–∏–π'
      };

      const priorityText = priorityTranslations[ticket.priority] || ticket.priority;
      const priorityEmoji = priorityEmojis[ticket.priority] || '‚ö™';

      const message = 
        `üÜï *–ù–æ–≤–∏–π —Ç—ñ–∫–µ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ*\n\n` +
        `üìã **–¢—ñ–∫–µ—Ç:** #${ticket._id.toString().slice(-6)}\n` +
        `üìù **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** ${ticket.title}\n` +
        `üìÑ **–û–ø–∏—Å:** ${ticket.description.length > 100 ? ticket.description.substring(0, 100) + '...' : ticket.description}\n\n` +
        `${priorityEmoji} **–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:** ${priorityText}\n` +
        `üî¥ **–°—Ç–∞—Ç—É—Å:** –í—ñ–¥–∫—Ä–∏—Ç–∏–π\n\n` +
        `üë§ **–°—Ç–≤–æ—Ä–∏–≤:** ${user.firstName} ${user.lastName}\n` +
        `üè¢ **–ü–æ—Å–∞–¥–∞:** ${user.position}\n` +
        `üèôÔ∏è **–ú—ñ—Å—Ç–æ:** ${user.city}\n\n` +
        `üïê **–ß–∞—Å:** ${new Date().toLocaleString('uk-UA')}`;

      const keyboard = {
        inline_keyboard: [
          [
            { 
              text: 'üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç—ñ–∫–µ—Ç', 
              url: `${process.env.FRONTEND_URL}/tickets/${ticket._id}` 
            }
          ]
        ]
      };

      logger.info('üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É...');
      
      await this.bot.sendMessage(groupId, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

      logger.info('‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
      logger.info(`–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É –ø—Ä–æ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç ${ticket._id}`);

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç –≤ –≥—Ä—É–ø—É:', error);
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç –≤ –≥—Ä—É–ø—É:', error);
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
   * @param {string} telegramId - Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @param {Object} notification - –û–±'—î–∫—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
   * @param {string} notification.title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
   * @param {string} notification.message - –¢–µ–∫—Å—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
   * @param {string} notification.type - –¢–∏–ø —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
   */
  async sendNotification(telegramId, notification) {
    if (!this.isInitialized || !this.bot) {
      logger.warn('Telegram –±–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è');
      return;
    }

    try {
      const { title, message, type } = notification;
      
      // –í–∏–±–∏—Ä–∞—î–º–æ –µ–º–æ–¥–∑—ñ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
      const typeEmojis = {
        'user_status_change': 'üë§',
        'user_role_change': 'üîÑ',
        'user_registration_status_change': 'üìù',
        'user_activated': '‚úÖ',
        'user_deactivated': '‚ùå',
        'user_approved': 'üéâ',
        'user_rejected': '‚õî',
        'ticket_created': 'üé´',
        'ticket_updated': 'üîÑ',
        'system_maintenance': '‚öôÔ∏è',
        'urgent_notification': 'üö®'
      };

      const emoji = typeEmojis[type] || 'üì¢';
      const notificationText = `${emoji} *${title}*\n\n${message}`;

      await this.bot.sendMessage(telegramId, notificationText, {
        parse_mode: 'Markdown'
      });

      logger.info(`–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${telegramId}: ${title}`);

    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${telegramId}:`, error);
    }
  }

  /**
   * –ó—É–ø–∏–Ω—è—î –±–æ—Ç–∞
   */
  async stopBot() {
    try {
      if (this.bot) {
        await this.bot.stopPolling();
        this.bot = null;
        this.isInitialized = false;
        this.userSessions.clear();
        this.userStates.clear();
        logger.telegram('‚úÖ Telegram –±–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ');
      }
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ Telegram –±–æ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É)
   */
  async handleContact(msg) {
    const chatId = msg.chat.id;
    const contact = msg.contact;
    const session = this.userSessions.get(chatId);

    if (!session || session.action !== 'registration' || session.step !== 'phone') {
      await this.bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞–Ω —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.');
      return;
    }

    try {
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
      session.data.phone = contact.phone_number;
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Å–µ—Å—ñ—é
      this.userSessions.set(chatId, session);
      
      await this.bot.sendMessage(chatId, 
        `‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${contact.phone_number}\n\nüîÑ –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é...`, {
          reply_markup: this.getNavigationKeyboard()
        }
      );

      // –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
      await this.completeRegistration(chatId, session);
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤ handleContact:', error);
      await this.bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–æ—Ç–∞ –∑ –Ω–æ–≤–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
   */
  async initializeBot(settings) {
    try {
      if (!settings || !settings.botToken) {
        throw new Error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–¥–∞–Ω–æ');
      }

      const TelegramBot = require('node-telegram-bot-api');
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞ –∑ –Ω–æ–≤–∏–º —Ç–æ–∫–µ–Ω–æ–º
      this.bot = new TelegramBot(settings.botToken, { polling: true });
      this.isInitialized = true;

      // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
      this.setupEventHandlers();

      logger.telegram('‚úÖ Telegram –±–æ—Ç —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
      return true;
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Telegram –±–æ—Ç–∞:', error);
      this.isInitialized = false;
      throw error;
    }
  }

  /**
   * –°—Ç–≤–æ—Ä—é—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥"
   */
  getNavigationKeyboard() {
    return {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }],
        [{ text: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    };
  }

  /**
   * –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –º—ñ—Å—Ç–∞–º–∏
   */
  getCitiesKeyboard(cities) {
    const buttons = [];
    for (let i = 0; i < cities.length; i += 2) {
      const row = [];
      row.push({ text: cities[i].name, callback_data: `city_${cities[i]._id}` });
      if (cities[i + 1]) {
        row.push({ text: cities[i + 1].name, callback_data: `city_${cities[i + 1]._id}` });
      }
      buttons.push(row);
    }
    buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }]);
    return { inline_keyboard: buttons };
  }

  /**
   * –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –ø–æ—Å–∞–¥–∞–º–∏
   */
  getPositionsKeyboard(positions) {
    const buttons = [];
    for (let i = 0; i < positions.length; i += 2) {
      const row = [];
      row.push({ text: positions[i].title, callback_data: `position_${positions[i]._id}` });
      if (positions[i + 1]) {
        row.push({ text: positions[i + 1].title, callback_data: `position_${positions[i + 1]._id}` });
      }
      buttons.push(row);
    }
    buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }]);
    return { inline_keyboard: buttons };
  }

  /**
   * –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
   */
  getCategoryKeyboard() {
    return {
      inline_keyboard: [
        [{ text: 'üíª –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞', callback_data: 'category_technical' }],
        [{ text: 'üìã –ó–∞–≥–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è', callback_data: 'category_general' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }]
      ]
    };
  }

  /**
   * –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É
   */
  getTicketCreationKeyboard() {
    return {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }],
        [{ text: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    };
  }

  /**
   * –°—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –º–µ–Ω—é
   */
  getMainMenuKeyboard(user) {
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üé´ –ú–æ—ó —Ç—ñ–∫–µ—Ç–∏', callback_data: 'my_tickets' }],
        [{ text: 'üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç', callback_data: 'create_ticket' }]
      ]
    };

    if (!user) {
      keyboard.inline_keyboard.push([{ text: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è', callback_data: 'registration' }]);
    }

    return keyboard;
  }

  /**
   * –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç—ñ–∫–µ—Ç—ñ–≤
   */
  getTicketsViewKeyboard() {
    return {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }],
        [{ text: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    };
  }

  /**
   * –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥—ñ–π –¥–ª—è —Ç—ñ–∫–µ—Ç—É
   */
  getTicketActionKeyboard(ticketId) {
    return {
      inline_keyboard: [
        [{ text: 'üí¨ –î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä', callback_data: `add_comment_${ticketId}` }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'my_tickets' }],
        [{ text: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    };
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
   */
  async handleCheckStatusCallback(chatId) {
    try {
      // –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      logger.info(`handleCheckStatusCallback –¥–ª—è chatId: ${chatId}`);
      
      const user = await this.findUserByTelegramId(chatId);
      
      if (!user) {
        logger.warn(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ telegramId ${chatId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å—Ç–∞—Ç—É—Å—É`);
        await this.showRegistrationOffer(chatId);
        return;
      }

      logger.info(`–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${user.firstName} ${user.lastName}, registrationStatus: ${user.registrationStatus}, isActive: ${user.isActive}`);

      if (user.registrationStatus === 'approved') {
        logger.info(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.firstName} ${user.lastName} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π - –ø–æ–∫–∞–∑—É—î–º–æ –¥–∞—à–±–æ—Ä–¥`);
        await this.showUserDashboard(chatId, user);
      } else if (user.registrationStatus === 'pending') {
        logger.info(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.firstName} ${user.lastName} –æ—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è - –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è`);
        await this.showPendingMessage(chatId);
      } else {
        logger.info(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.firstName} ${user.lastName} –º–∞—î —Å—Ç–∞—Ç—É—Å ${user.registrationStatus} - –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è`);
        const message = `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.\n\n` +
          `üìù –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.\n\n` +
          `–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.`;
        
        const keyboard = {
          inline_keyboard: [
          [{ text: '‚úÖ –ü–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É', callback_data: 'registration' }],
          [{ text: 'üìû –ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é', callback_data: 'contact_support' }]
        ]
      };

      await this.bot.sendMessage(chatId, message, { reply_markup: keyboard });
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤ handleCheckStatusCallback:', error);
      await this.bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å—Ç–∞—Ç—É—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –∑–≤'—è–∑–∫—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é
   */
  async handleContactSupportCallback(chatId) {
    const message = `üìû –ó–≤'—è–∑–æ–∫ –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é:\n\n` +
      `üìß Email: support@techsupport.com\n` +
      `üì± –¢–µ–ª–µ—Ñ–æ–Ω: +380 (XX) XXX-XX-XX\n` +
      `üïê –ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏: –ü–Ω-–ü—Ç 9:00-18:00\n\n` +
      `üí¨ –ê–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—É—Ç, —ñ –º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üí¨ –ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', callback_data: 'leave_message' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
      ]
    };

    await this.bot.sendMessage(chatId, message, { reply_markup: keyboard });
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –¥–æ–≤—ñ–¥–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
   */
  async handleHelpInfoCallback(chatId) {
    const message = `‚ùì –î–æ–≤—ñ–¥–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n\n` +
      `ü§ñ –¶–µ–π –±–æ—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–∞—á—ñ —Ç–∞ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞—è–≤–æ–∫ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.\n\n` +
      `üìã –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:\n` +
      `‚Ä¢ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤ —Å–∏—Å—Ç–µ–º—ñ\n` +
      `‚Ä¢ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—ñ–≤\n` +
      `‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–æ–∫\n` +
      `‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–≤–µ—Ä–Ω–µ–Ω—å\n` +
      `‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é\n\n` +
      `üîê –î–ª—è —Ä–æ–±–æ—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n` +
      `‚ùì –ú–∞—î—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è? –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!`;

    const keyboard = {
      inline_keyboard: [
        [{ text: '‚úÖ –†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é', callback_data: 'registration' }],
        [{ text: 'üìû –ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é', callback_data: 'contact_support' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
      ]
    };

    await this.bot.sendMessage(chatId, message, { reply_markup: keyboard });
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –º—ñ—Å—Ç
   */
  async loadCities() {
    try {
      const cities = await City.find({ isActive: { $ne: false } })
        .select('name region _id')
        .sort({ name: 1 })
        .lean();
      return cities;
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º—ñ—Å—Ç:', error);
      return [];
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ—Å–∞–¥
   */
  async loadPositions() {
    try {
      const positions = await Position.find({ isActive: { $ne: false } })
        .select('title department _id')
        .sort({ title: 1 })
        .lean();
      return positions;
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å–∞–¥:', error);
      return [];
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async handleStatisticsCallback(chatId) {
    try {
      const user = await this.findUserByTelegramId(chatId);
      
      if (!user || user.registrationStatus !== 'approved') {
        await this.bot.sendMessage(chatId, '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ù–µ–æ–±—Ö—ñ–¥–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è.');
        return;
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—ñ–∫–µ—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const tickets = await Ticket.find({ userId: user._id });
      
      const totalTickets = tickets.length;
      const openTickets = tickets.filter(t => t.status === 'open').length;
      const inProgressTickets = tickets.filter(t => t.status === 'in_progress').length;
      const closedTickets = tickets.filter(t => t.status === 'closed').length;
      
      const message = `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n` +
        `üìã –í—Å—å–æ–≥–æ —Ç—ñ–∫–µ—Ç—ñ–≤: ${totalTickets}\n` +
        `üü¢ –í—ñ–¥–∫—Ä–∏—Ç–∏—Ö: ${openTickets}\n` +
        `üü° –í —Ä–æ–±–æ—Ç—ñ: ${inProgressTickets}\n` +
        `üî¥ –ó–∞–∫—Ä–∏—Ç–∏—Ö: ${closedTickets}\n\n` +
        `üìÖ –û—Å—Ç–∞–Ω–Ω—ñ–π —Ç—ñ–∫–µ—Ç: ${tickets.length > 0 ? new Date(tickets[tickets.length - 1].createdAt).toLocaleDateString('uk-UA') : '–ù–µ–º–∞—î'}`;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üé´ –ú–æ—ó —Ç—ñ–∫–µ—Ç–∏', callback_data: 'my_tickets' }],
          [{ text: 'üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç', callback_data: 'create_ticket' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
        ]
      };

      await this.bot.sendMessage(chatId, message, { reply_markup: keyboard });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      await this.bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  }
}

module.exports = TelegramService;