const TelegramBot = require('node-telegram-bot-api');
const User = require('../models/User');
const Ticket = require('../models/Ticket');
const City = require('../models/City');
const Position = require('../models/Position');
const TicketTemplate = require('../models/TicketTemplate');
const PendingRegistration = require('../models/PendingRegistration');
const logger = require('../utils/logger');
const fs = require('fs');
const path = require('path');
const https = require('https');
const Category = require('../models/Category');
const BotSettings = require('../models/BotSettings');
const { formatFileSize } = require('../utils/helpers');
const ticketWebSocketService = require('./ticketWebSocketService');

class TelegramService {
  constructor() {
    this.bot = null;
    this.userSessions = new Map();
    this.userStates = new Map();
    this.stateStack = new Map();
    this.categoryCache = new Map(); // –ö–µ—à –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    this.botSettings = null; // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ –∑ –ë–î
    this.loadCategories(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    this.loadBotSettings(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
  }

  async initialize() {
    try {
      const token = process.env.TELEGRAM_BOT_TOKEN;
      if (!token) {
        logger.error('TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        return;
      }

      this.bot = new TelegramBot(token, { polling: false });
      logger.info('‚úÖ Telegram –±–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

      // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞
      try {
        await this.loadBotSettings();
        await this.loadCategories();
        logger.info('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó');
      } catch (catErr) {
        logger.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', catErr);
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Telegram –±–æ—Ç–∞:', error);
    }
  }

  async sendMessage(chatId, text, options = {}) {
    try {
      if (!this.bot) {
        logger.error('Telegram –±–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        return;
      }
      // –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É Markdown —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
      const defaultOptions = { parse_mode: 'Markdown', ...options };
      return await this.bot.sendMessage(chatId, text, defaultOptions);
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
      throw error;
    }
  }

  async deleteMessage(chatId, messageId) {
    try {
      if (!this.bot) {
        logger.error('Telegram –±–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        return;
      }
      return await this.bot.deleteMessage(chatId, messageId);
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
      throw error;
    }
  }

  async handleMessage(msg) {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;

      // –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ
      if (msg.photo) {
        await this.handlePhoto(msg);
        return;
      }

      // –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ - –ø–æ–∫–∏ —â–æ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
      if (msg.contact) {
        logger.info('–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', msg.from.id);
        return;
      }

      // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
      if (msg.text && msg.text.startsWith('/')) {
        await this.handleCommand(msg);
        return;
      }

      // –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
      await this.handleTextMessage(msg);
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
      await this.sendMessage(msg.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }

  async handleCommand(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const command = msg.text.split(' ')[0];

    try {
      const user = await User.findOne({ telegramId: userId });

      switch (command) {
        case '/start':
          await this.handleStartCommand(chatId, userId, msg.text);
          break;
        default:
          if (!user) {
            await this.sendMessage(chatId, 
              `üö´ *–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó*\n\n` +
              `–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ.\n\n` +
              `üîë –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏.`
            );
            return;
          }
          await this.sendMessage(chatId, 
            `‚ùì *–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞*\n\n` +
            `–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–æ—é.\n\n` +
            `üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–ø—Ü—ñ–π.`
          );
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏:', error);
      await this.sendMessage(chatId, 
        `‚ùå *–°–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞*\n\n` +
        `–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏.\n\n` +
        `üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`
      );
    }
  }

  async handleStartCommand(chatId, userId) {
    try {
      const user = await User.findOne({ telegramId: userId })
        .populate('position', 'name')
        .populate('city', 'name');
      
      if (user) {
        await this.showUserDashboard(chatId, user);
      } else {
        await this.sendMessage(chatId, 
          `üö´ *–î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ*\n\n` +
          `üëã –í—ñ—Ç–∞—î–º–æ! –î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –≤ —Å–∏—Å—Ç–µ–º—ñ.\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `üìû *–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É*`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üìù –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', callback_data: 'register_user' }],
                [{ text: 'üìû –ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', callback_data: 'contact_admin' }]
              ]
            }
          }
        );
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /start:', error);
      await this.sendMessage(chatId, 
        `‚ùå *–ü–æ–º–∏–ª–∫–∞ —Å–∏—Å—Ç–µ–º–∏*\n\n` +
        `–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω.`
      );
    }
  }

  async showUserDashboard(chatId, user) {
    const welcomeText = 
      `üéâ *–í—ñ—Ç–∞—î–º–æ –≤ —Å–∏—Å—Ç–µ–º—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!*\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üë§ *–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:*\n` +
      `üìß Email: \`${user.email}\`\n` +
      `üíº –ü–æ—Å–∞–¥–∞: *${user.position?.name || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}*\n` +
      `üèôÔ∏è –ú—ñ—Å—Ç–æ: *${user.city?.name || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}*\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üéØ *–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:*`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üìã –ú–æ—ó —Ç—ñ–∫–µ—Ç–∏', callback_data: 'my_tickets' }],
        [{ text: 'üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç', callback_data: 'create_ticket' }],
        [{ text: 'üìÑ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑ —à–∞–±–ª–æ–Ω—É', callback_data: 'create_from_template' }],
        [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'statistics' }]
      ]
    };

    await this.sendMessage(chatId, welcomeText, { reply_markup: keyboard });
  }

  async handleCallbackQuery(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const data = callbackQuery.data;
    const userId = callbackQuery.from.id;

    try {
      // –û–±—Ä–æ–±–∫–∞ callback-–∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –Ω–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
      if (data === 'register_user') {
        await this.handleUserRegistrationCallback(chatId, userId);
        await this.answerCallbackQuery(callbackQuery.id);
        return;
      } else if (data === 'contact_admin') {
        await this.handleContactAdminCallback(chatId);
        await this.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –û–±—Ä–æ–±–∫–∞ callback-–∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (–≤–∏–±—ñ—Ä –º—ñ—Å—Ç–∞ —Ç–∞ –ø–æ—Å–∞–¥–∏)
      if (data.startsWith('city_') || data.startsWith('position_')) {
        await this.handleRegistrationCallback(chatId, userId, data);
        await this.answerCallbackQuery(callbackQuery.id);
        return;
      }

      const user = await User.findOne({ telegramId: userId })
        .populate('position', 'name')
        .populate('city', 'name');
      
      if (!user) {
        await this.answerCallbackQuery(callbackQuery.id, '–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ');
        return;
      }

      // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
      try {
        await this.deleteMessage(chatId, messageId);
      } catch (deleteError) {
        logger.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', deleteError.message);
        // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è
      }

      if (data === 'my_tickets') {
        await this.handleMyTicketsCallback(chatId, user);
      } else if (data === 'create_ticket') {
        await this.handleCreateTicketCallback(chatId, user);
      } else if (data === 'create_from_template') {
        await this.handleCreateFromTemplateCallback(chatId, user);
      } else if (data === 'statistics') {
        await this.handleStatisticsCallback(chatId, user);
      } else if (data === 'back') {
        await this.showUserDashboard(chatId, user);
      } else if (data === 'attach_photo') {
        await this.handleAttachPhotoCallback(chatId, user);
      } else if (data === 'skip_photo') {
        await this.handleSkipPhotoCallback(chatId, user);
      } else if (data === 'add_more_photos') {
        await this.handleAddMorePhotosCallback(chatId, user);
      } else if (data === 'finish_ticket') {
        await this.handleFinishTicketCallback(chatId, user);
      } else if (data.startsWith('category_')) {
        // –û–±—Ä–æ–±–∫–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        const categoryId = data.replace('category_', '');
        await this.handleDynamicCategoryCallback(chatId, user, categoryId);
      } else if (data === 'priority_low') {
           await this.handlePriorityCallback(chatId, user, 'low');
         } else if (data === 'priority_medium') {
           await this.handlePriorityCallback(chatId, user, 'medium');
         } else if (data === 'priority_high') {
           await this.handlePriorityCallback(chatId, user, 'high');
         } else if (data === 'template_add_photo') {
           await this.handleTemplateAddPhotoCallback(chatId, user);
         } else if (data === 'template_create_without_photo') {
           await this.handleTemplateCreateWithoutPhotoCallback(chatId, user);
         } else if (data.startsWith('template_')) {
           const templateId = data.replace('template_', '');
           await this.handleTemplateSelectionCallback(chatId, user, templateId);
         } else if (data.startsWith('rate_ticket_')) {
           await this.handleQualityRatingResponse(chatId, data, user);
         } else if (data.startsWith('rating_')) {
           await this.handleQualityRating(chatId, data, user);
         } else if (data.startsWith('feedback_')) {
           await this.handleFeedbackCallback(chatId, data, user);
         }

       await this.answerCallbackQuery(callbackQuery.id);
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback query:', error);
      await this.answerCallbackQuery(callbackQuery.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }

  async handleMyTicketsCallback(chatId, user) {
    try {
      const tickets = await Ticket.find({ createdBy: user._id })
        .sort({ createdAt: -1 })
        .limit(10);

      if (tickets.length === 0) {
        await this.sendMessage(chatId, 
          `üìã *–ú–æ—ó —Ç—ñ–∫–µ—Ç–∏*\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `üìÑ –£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ç—ñ–∫–µ—Ç—ñ–≤\n\n` +
          `üí° –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É!`, {
          reply_markup: {
            inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }]]
          }
        });
        return;
      }

      let text = 
        `üìã *–í–∞—à—ñ —Ç—ñ–∫–µ—Ç–∏*\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
      
      const keyboard = [];

      tickets.forEach((ticket, index) => {
        const status = this.getStatusEmoji(ticket.status);
        text += `${index + 1}. ${status} *${ticket.title}*\n`;
        text += `   üìä –°—Ç–∞—Ç—É—Å: *${this.getStatusText(ticket.status)}*\n`;
        text += `   üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: \`${ticket.createdAt.toLocaleDateString('uk-UA')}\`\n\n`;
        
        keyboard.push([{
          text: `üìÑ ${ticket.title.substring(0, 30)}...`,
          callback_data: `view_ticket_${ticket._id}`
        }]);
      });

      text += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;
      keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }]);

      await this.sendMessage(chatId, text, {
        reply_markup: { inline_keyboard: keyboard }
      });
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—ñ–∫–µ—Ç—ñ–≤:', error);
      await this.sendMessage(chatId, 
        `‚ùå *–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—ñ–≤*\n\n` +
        `–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç—ñ–∫–µ—Ç—ñ–≤.\n\n` +
        `üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`
      );
    }
  }

  async handleCreateTicketCallback(chatId, user) {
    const session = {
      step: 'title',
      ticketData: {
        createdBy: user._id,
        photos: []
      }
    };
    
    this.userSessions.set(chatId, session);
    
    await this.sendMessage(chatId, 
      `üìù *–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç—ñ–∫–µ—Ç—É*\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üìã *–ö—Ä–æ–∫ 1/5:* –í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—ñ–∫–µ—Ç—É\n\n` +
      `üí° –û–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º–∏`, {
        reply_markup: {
          inline_keyboard: [[{ text: this.getCancelButtonText(), callback_data: 'cancel_ticket' }]]
        }
      }
    );
  }

  async handleCreateFromTemplateCallback(chatId, user) {
    try {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Å—ñ—é –¥–ª—è —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É
      let session = this.userSessions.get(chatId);
      if (!session) {
        session = {
          step: 'template_select',
          ticketData: {
            title: '',
            description: '',
            priority: 'medium',
            categoryId: null,
            photos: []
          },
          isTemplate: true
        };
        this.userSessions.set(chatId, session);
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ —à–∞–±–ª–æ–Ω–∏ –¥–ª—è Telegram
      const templates = await TicketTemplate.find({ isActive: true })
        .populate('category', 'name')
        .sort({ title: 1 })
        .limit(10);

      if (templates.length === 0) {
        await this.sendMessage(chatId, 
          `‚ùå *–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —à–∞–±–ª–æ–Ω—ñ–≤*\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `üìã –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —à–∞–±–ª–æ–Ω—ñ–≤ —Ç—ñ–∫–µ—Ç—ñ–≤\n\n` +
          `üë®‚Äçüíº –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤`, {
            reply_markup: {
              inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }]]
            }
          }
        );
        return;
      }

      let text = 
        `üìÑ *–û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É*\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
      const keyboard = [];

      for (const [index, template] of templates.entries()) {
        text += `${index + 1}. üìã *${template.title}*\n`;
        if (template.description) {
          text += `   üìù ${template.description.substring(0, 50)}...\n`;
        }
        const categoryText = await this.getCategoryText(template.category._id);
        text += `   üè∑Ô∏è ${categoryText} | ‚ö° *${this.getPriorityText(template.priority)}*\n\n`;
        
        keyboard.push([{
          text: `üìÑ ${template.title}`,
          callback_data: `template_${template._id}`
        }]);
      }

      text += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;
      keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }]);

      await this.sendMessage(chatId, text, {
        reply_markup: { inline_keyboard: keyboard }
      });
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤:', error);
      await this.sendMessage(chatId, 
        `‚ùå *–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤*\n\n` +
        `–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω—ñ–≤.\n\n` +
        `üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`
      );
    }
  }

  async handleTemplateSelectionCallback(chatId, user, templateId) {
    try {
      const template = await TicketTemplate.findById(templateId).populate('category', 'name');
      
      if (!template || !template.isActive) {
        await this.sendMessage(chatId, 
          `‚ùå *–®–∞–±–ª–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π*\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `üìã –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π\n\n` +
          `üîÑ –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —à–∞–±–ª–æ–Ω –∑—ñ —Å–ø–∏—Å–∫—É`, {
            reply_markup: {
              inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –¥–æ —à–∞–±–ª–æ–Ω—ñ–≤', callback_data: 'create_from_template' }]]
            }
          }
        );
        return;
      }

      let session = this.userSessions.get(chatId);
      if (!session) {
        // –Ø–∫—â–æ —Å–µ—Å—ñ—ó –Ω–µ–º–∞—î (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–π—à–æ–≤ –Ω–∞–ø—Ä—è–º—É —É —à–∞–±–ª–æ–Ω–∏) ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—ó
        session = {
          step: 'template_select',
          ticketData: {
            title: '',
            description: '',
            priority: 'medium',
            categoryId: null,
            photos: []
          },
          isTemplate: true
        };
        this.userSessions.set(chatId, session);
      }

      if (session) {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ —Ç—ñ–∫–µ—Ç–∞ –∑ —à–∞–±–ª–æ–Ω—É
        session.ticketData = {
          title: template.title,
          description: template.description,
          priority: template.priority,
          categoryId: template.category._id, // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –ë–î –Ω–∞–ø—Ä—è–º—É
          photos: []
        };
        session.step = 'priority';
        
        await this.sendMessage(chatId, 
          this.getPriorityPromptText(), {
            reply_markup: {
              inline_keyboard: [
                [{ text: this.getPriorityText('high'), callback_data: 'priority_high' }],
                [{ text: this.getPriorityText('medium'), callback_data: 'priority_medium' }],
                [{ text: this.getPriorityText('low'), callback_data: 'priority_low' }],
                [{ text: this.getCancelButtonText(), callback_data: 'cancel_ticket' }]
              ]
            }
          }
        );
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —à–∞–±–ª–æ–Ω—É:', error);
      await this.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —à–∞–±–ª–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }
  async handleTextMessage(msg) {
    const chatId = msg.chat.id;
    const text = msg.text;
    const userId = msg.from.id;
    const session = this.userSessions.get(chatId);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    const pendingRegistration = await PendingRegistration.findOne({ telegramId: userId });
    if (pendingRegistration) {
      await this.handleRegistrationTextInput(chatId, userId, text, pendingRegistration);
      return;
    }

    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –≤—ñ–¥–≥—É–∫
    const user = await User.findOne({ telegramChatId: chatId });
    if (user) {
      const feedbackHandled = await this.handleFeedbackMessage(chatId, text, user);
      if (feedbackHandled) {
        return; // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ —è–∫ –≤—ñ–¥–≥—É–∫
      }
    }

    if (session) {
      await this.handleTicketCreationStep(chatId, text, session);
    } else {
      await this.sendMessage(chatId, '–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.');
    }
  }

  // –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
  async handleRegistrationTextInput(chatId, userId, text, pendingRegistration) {
    try {
      const step = pendingRegistration.step;
      let isValid = true;
      let errorMessage = '';

      switch (step) {
        case 'firstName':
          if (this.validateName(text)) {
            pendingRegistration.data.firstName = text.trim();
            pendingRegistration.step = 'lastName';
          } else {
            isValid = false;
            errorMessage = '‚ùå *–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º\'—è*\n\n–Ü–º\'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ –±—É—Ç–∏ –¥–æ–≤–∂–∏–Ω–æ—é –≤—ñ–¥ 2 –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤.\n\nüí° –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:';
          }
          break;

        case 'lastName':
          if (this.validateName(text)) {
            pendingRegistration.data.lastName = text.trim();
            pendingRegistration.step = 'email';
          } else {
            isValid = false;
            errorMessage = '‚ùå *–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ*\n\n–ü—Ä—ñ–∑–≤–∏—â–µ –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ –±—É—Ç–∏ –¥–æ–≤–∂–∏–Ω–æ—é –≤—ñ–¥ 2 –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤.\n\nüí° –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:';
          }
          break;

        case 'email':
          if (this.validateEmail(text)) {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ email –≤–∂–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
            const existingUser = await User.findOne({ email: text.toLowerCase().trim() });
            if (existingUser) {
              isValid = false;
              errorMessage = '‚ùå *Email –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è*\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ.\n\nüí° –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π email:';
            } else {
              pendingRegistration.data.email = text.toLowerCase().trim();
              pendingRegistration.step = 'phone';
            }
          } else {
            isValid = false;
            errorMessage = '‚ùå *–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email*\n\n–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É.\n\nüí° *–ü—Ä–∏–∫–ª–∞–¥:* user@example.com\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:';
          }
          break;

        case 'phone':
          if (this.validatePhone(text)) {
            pendingRegistration.data.phone = text.trim();
            pendingRegistration.step = 'password';
          } else {
            isValid = false;
            errorMessage = '‚ùå *–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É*\n\n–ù–æ–º–µ—Ä –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 10 –¥–æ 15 —Ü–∏—Ñ—Ä —Ç–∞ –º–æ–∂–µ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ +.\n\nüí° *–ü—Ä–∏–∫–ª–∞–¥:* +380501234567\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:';
          }
          break;

        case 'password':
          if (this.validatePassword(text)) {
            pendingRegistration.data.password = text; // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ö–µ—à—É–≤–∞—Ç–∏
            pendingRegistration.step = 'city';
          } else {
            isValid = false;
            errorMessage = '‚ùå *–°–ª–∞–±–∫–∏–π –ø–∞—Ä–æ–ª—å*\n\n–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏:\n‚Ä¢ –ú—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤\n‚Ä¢ –ü—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–Ω—É –ª—ñ—Ç–µ—Ä—É\n‚Ä¢ –ü—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É\n\nüí° *–ü—Ä–∏–∫–ª–∞–¥:* MyPass123\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:';
          }
          break;

        case 'department':
          if (this.validateDepartment(text)) {
            pendingRegistration.data.department = text.trim();
            pendingRegistration.step = 'completed';
          } else {
            isValid = false;
            errorMessage = '‚ùå *–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –Ω–∞–∑–≤–∞ –≤—ñ–¥–¥—ñ–ª—É*\n\n–ù–∞–∑–≤–∞ –≤—ñ–¥–¥—ñ–ª—É –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–æ–≤–∂–∏–Ω–æ—é –≤—ñ–¥ 2 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤.\n\nüí° –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:';
          }
          break;

        default:
          await this.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ.');
          return;
      }

      if (isValid) {
        await pendingRegistration.save();
        await this.processRegistrationStep(chatId, userId, pendingRegistration);
      } else {
        await this.sendMessage(chatId, errorMessage);
      }

    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è:', error);
      await this.sendMessage(chatId, 
        '‚ùå *–ü–æ–º–∏–ª–∫–∞*\n\n–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
      );
    }
  }

  // –ú–µ—Ç–æ–¥–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
  validateName(name) {
    if (!name || typeof name !== 'string') return false;
    const trimmed = name.trim();
    return trimmed.length >= 2 && trimmed.length <= 50 && /^[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ''\s-]+$/.test(trimmed);
  }

  validateEmail(email) {
    if (!email || typeof email !== 'string') return false;
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email.trim());
  }

  validatePhone(phone) {
    if (!phone || typeof phone !== 'string') return false;
    const phoneRegex = /^\+?[1-9]\d{9,14}$/;
    return phoneRegex.test(phone.replace(/[\s-()]/g, ''));
  }

  validatePassword(password) {
    if (!password || typeof password !== 'string') return false;
    return password.length >= 6 && /[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ]/.test(password) && /\d/.test(password);
  }

  validateDepartment(department) {
    if (!department || typeof department !== 'string') return false;
    const trimmed = department.trim();
    return trimmed.length >= 2 && trimmed.length <= 100;
  }

  async handleTicketCreationStep(chatId, text, session) {
    try {
      switch (session.step) {
        case 'title':
          session.ticketData.title = text;
          session.step = 'description';
          await this.sendMessage(chatId, 
            '–ö—Ä–æ–∫ 2/5: –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏:', {
              reply_markup: {
                inline_keyboard: [[{ text: this.getCancelButtonText(), callback_data: 'cancel_ticket' }]]
              }
            }
          );
          break;

        case 'description':
          session.ticketData.description = text;
          session.step = 'photo';
          await this.sendMessage(chatId, 
            '–ö—Ä–æ–∫ 3/5: –ü—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å —Ñ–æ—Ç–æ (–Ω–µ–æ–±–æ–≤\'—è–∑–∫–æ–≤–æ)\n\n' +
            '–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–æ—Ç–æ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –æ–ø–∏—Å—É –ø—Ä–æ–±–ª–µ–º–∏.', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üì∑ –ü—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–æ—Ç–æ', callback_data: 'attach_photo' }],
                  [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', callback_data: 'skip_photo' }],
                  [{ text: this.getCancelButtonText(), callback_data: 'cancel_ticket' }]
                ]
              }
            }
          );
          break;

        case 'category':
           // –õ–æ–≥—ñ–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó - –æ—á—ñ–∫—É—î–º–æ callback
           break;

         case 'priority':
           // –õ–æ–≥—ñ–∫–∞ –¥–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É - –æ—á—ñ–∫—É—î–º–æ callback
           break;
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫—Ä–æ–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É:', error);
      await this.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }

  // –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ
  async handlePhoto(msg) {
    const chatId = msg.chat.id;
    const session = this.userSessions.get(chatId);

    if (session && session.step === 'photo') {
      await this.handleTicketPhoto(chatId, msg.photo, msg.caption);
    } else {
      await this.sendMessage(chatId, '–§–æ—Ç–æ –º–æ–∂–Ω–∞ –ø—Ä–∏–∫—Ä—ñ–ø–ª—è—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É.');
    }
  }

  async handleTicketPhoto(chatId, photos, caption) {
     try {
       const session = this.userSessions.get(chatId);
       if (!session) return;

       // –ë–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ
       const photo = photos[photos.length - 1];
       const fileId = photo.file_id;

       // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–æ—Ç–æ
       const file = await this.bot.getFile(fileId);
       const fileSizeBytes = file.file_size;
       const maxSizeBytes = 20 * 1024 * 1024; // 20MB

       if (fileSizeBytes > maxSizeBytes) {
         await this.sendMessage(chatId, 
           `‚ùå –§–æ—Ç–æ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ!\n\n` +
           `–†–æ–∑–º—ñ—Ä: ${formatFileSize(fileSizeBytes)}\n` +
      `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: ${formatFileSize(maxSizeBytes)}\n\n` +
           `–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –º–µ–Ω—à–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É.`
         );
         return;
       }

       // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ñ–∞–π–ª—É
       const filePath = file.file_path;
       const fileExtension = path.extname(filePath).toLowerCase();
       const allowedExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp'];

       if (!allowedExtensions.includes(fileExtension)) {
         await this.sendMessage(chatId, 
           `‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É!\n\n` +
           `–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: JPG, JPEG, PNG, GIF, WebP\n` +
           `–í–∞—à —Ñ–∞–π–ª: ${fileExtension || '–Ω–µ–≤—ñ–¥–æ–º–∏–π'}\n\n` +
           `–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —É –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.`
         );
         return;
       }

       // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ
       if (session.ticketData.photos.length >= 5) {
         await this.sendMessage(chatId, 
           `‚ùå –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ!\n\n` +
           `–ú–∞–∫—Å–∏–º—É–º: 5 —Ñ–æ—Ç–æ –Ω–∞ —Ç—ñ–∫–µ—Ç\n` +
           `–ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${session.ticketData.photos.length}\n\n` +
           `–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–∞–≤–µ—Ä—à–∏—Ç–∏" –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.`
         );
         return;
       }
       
       // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ—Ç–æ
       const savedPath = await this.downloadTelegramFile(filePath);
       
       // –î–æ–¥–∞—î–º–æ —Ñ–æ—Ç–æ –¥–æ —Å–µ—Å—ñ—ó
       session.ticketData.photos.push({
         fileId: fileId,
         path: savedPath,
         caption: caption || '',
         size: fileSizeBytes,
         extension: fileExtension
       });

       await this.sendMessage(chatId, 
         `‚úÖ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ! (${session.ticketData.photos.length}/5)\n\n` +
         `üìè –†–æ–∑–º—ñ—Ä: ${formatFileSize(fileSizeBytes)}\n` +
         `üìÑ –§–æ—Ä–º–∞—Ç: ${fileExtension.toUpperCase()}\n\n` +
         '–•–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ —Ñ–æ—Ç–æ?', {
           reply_markup: {
               inline_keyboard: [
                 [{ text: 'üì∑ –î–æ–¥–∞—Ç–∏ —â–µ —Ñ–æ—Ç–æ', callback_data: 'add_more_photos' }],
                 [{ text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏', callback_data: 'finish_ticket' }],
                 [{ text: this.getCancelButtonText(), callback_data: 'cancel_ticket' }]
               ]
             }
           }
         );
     } catch (error) {
       logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ:', error);
       await this.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
     }
   }

  async downloadTelegramFile(filePath) {
    return new Promise((resolve, reject) => {
      const token = process.env.TELEGRAM_BOT_TOKEN;
      const url = `https://api.telegram.org/file/bot${token}/${filePath}`;
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
      const uploadsDir = path.join(__dirname, '../uploads/telegram-photos');
      if (!fs.existsSync(uploadsDir)) {
        fs.mkdirSync(uploadsDir, { recursive: true });
      }

      const fileName = `${Date.now()}_${path.basename(filePath)}`;
      const localPath = path.join(uploadsDir, fileName);
      const file = fs.createWriteStream(localPath);

      https.get(url, (response) => {
        response.pipe(file);
        file.on('finish', () => {
          file.close();
          resolve(localPath);
        });
      }).on('error', (error) => {
        fs.unlink(localPath, () => {}); // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        reject(error);
      });
    });
   }

   // Callback –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ
  async handleAttachPhotoCallback(chatId, user) {
    await this.sendMessage(chatId, 
      'üì∑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –¥–æ —Ç—ñ–∫–µ—Ç—É.\n\n' +
      '–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.'
    );
  }

  async handleSkipPhotoCallback(chatId, user) {
    const session = this.userSessions.get(chatId);
    if (session) {
      session.step = 'category';
      const categoryButtons = await this.generateCategoryButtons();
      const categoriesCount = this.getAllCategories().length;
      const promptText = categoriesCount > 0 ? this.getCategoryPromptText() : '–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.';
      await this.sendMessage(chatId, promptText, {
        reply_markup: {
          inline_keyboard: categoryButtons
        }
      });
    }
  }

  async handleAddMorePhotosCallback(chatId, user) {
    await this.sendMessage(chatId, 
      'üì∑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ –æ–¥–Ω–µ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–∞–≤–µ—Ä—à–∏—Ç–∏" –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.'
    );
  }

  async handleFinishTicketCallback(chatId, user) {
    const session = this.userSessions.get(chatId);
    if (session) {
      session.step = 'category';
      const categoryButtons = await this.generateCategoryButtons();
      const categoriesCount = this.getAllCategories().length;
      const promptText = categoriesCount > 0 ? this.getCategoryPromptText() : '–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.';
      await this.sendMessage(chatId, promptText, {
        reply_markup: {
          inline_keyboard: categoryButtons
        }
      });
    }
  }

  async handleCancelTicketCallback(chatId, user) {
    this.userSessions.delete(chatId);
    await this.sendMessage(chatId, 
      `‚ùå *–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ*\n\n` +
      `üîÑ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é`
    );
    await this.showUserDashboard(chatId, user);
  }



  async handleStatisticsCallback(chatId, user) {
    try {
      const totalTickets = await Ticket.countDocuments({ createdBy: user._id });
      const openTickets = await Ticket.countDocuments({ 
        createdBy: user._id, 
        status: { $in: ['open', 'in_progress'] } 
      });
      const closedTickets = await Ticket.countDocuments({ 
        createdBy: user._id, 
        status: 'closed' 
      });

      const text = 
        `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `üìã *–í—Å—å–æ–≥–æ —Ç—ñ–∫–µ—Ç—ñ–≤:* \`${totalTickets}\`\n` +
        `üîì *–í—ñ–¥–∫—Ä–∏—Ç–∏—Ö:* \`${openTickets}\`\n` +
        `‚úÖ *–ó–∞–∫—Ä–∏—Ç–∏—Ö:* \`${closedTickets}\`\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

      await this.sendMessage(chatId, text, {
        reply_markup: {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }]]
        }
      });
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      await this.sendMessage(chatId, 
        `‚ùå *–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏*\n\n` +
        `–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n` +
        `üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`
      );
    }
  }

  async answerCallbackQuery(callbackQueryId, text = '') {
    try {
      await this.bot.answerCallbackQuery(callbackQueryId, { text });
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ callback query:', error);
    }
  }


  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤
   async handleCategoryCallback(chatId, user, categoryId) {
     const session = this.userSessions.get(chatId);
     if (session) {
       session.ticketData.categoryId = categoryId;
       session.step = 'priority';
       
       await this.sendMessage(chatId, 
         this.getPriorityPromptText(), {
           reply_markup: {
             inline_keyboard: [
               [{ text: this.getPriorityText('high'), callback_data: 'priority_high' }],
               [{ text: this.getPriorityText('medium'), callback_data: 'priority_medium' }],
               [{ text: this.getPriorityText('low'), callback_data: 'priority_low' }],
               [{ text: this.getCancelButtonText(), callback_data: 'cancel_ticket' }]
             ]
           }
         }
       );
     }
   }

   async handlePriorityCallback(chatId, user, priority) {
     const session = this.userSessions.get(chatId);
     if (session) {
       session.ticketData.priority = priority;
       await this.completeTicketCreation(chatId, user, session);
     }
   }

   async completeTicketCreation(chatId, user, session) {
     try {
       const ticketData = {
         title: session.ticketData.title,
         description: session.ticketData.description,
         category: session.ticketData.categoryId,
         priority: session.ticketData.priority,
         createdBy: user._id,
         city: user.city,
         status: 'open',
         metadata: {
           source: 'telegram'
         },
         attachments: session.ticketData.photos.map(photo => {
           let fileSize = 0;
           try {
             const stats = fs.statSync(photo.path);
             fileSize = stats.size;
           } catch (error) {
             logger.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É ${photo.path}:`, error);
           }
           
           return {
             filename: path.basename(photo.path),
             originalName: photo.caption || path.basename(photo.path),
             mimetype: 'image/jpeg', // –ú–æ–∂–Ω–∞ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø —Ñ–∞–π–ª—É –ø—ñ–∑–Ω—ñ—à–µ
             size: fileSize,
             path: photo.path,
             uploadedBy: user._id,
             caption: photo.caption
           };
         })
       };

       const ticket = new Ticket(ticketData);
       await ticket.save();

       // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –¥–∞–Ω—ñ –¥–ª—è WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
       await ticket.populate([
         { path: 'createdBy', select: 'firstName lastName email' },
         { path: 'city', select: 'name region' }
       ]);

       // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç
       try {
         ticketWebSocketService.notifyNewTicket(ticket);
         logger.info('‚úÖ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ (Telegram)');
       } catch (wsError) {
         logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç (Telegram):', wsError);
       }

       // –û—á–∏—â—É—î–º–æ —Å–µ—Å—ñ—é
       this.userSessions.delete(chatId);

      let confirmText = 
        `üéâ *–¢—ñ–∫–µ—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!*\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `üÜî *ID —Ç—ñ–∫–µ—Ç—É:* \`${ticket._id}\`\n\n` +
        `‚è≥ *–û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

       await this.sendMessage(chatId, confirmText, {
         reply_markup: {
           inline_keyboard: [[{ text: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'back' }]]
         }
       });

       logger.info(`–¢—ñ–∫–µ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram: ${ticket._id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ${user.email}`);
     } catch (error) {
       logger.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É:', error);
       await this.sendMessage(chatId, 
         `‚ùå *–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É*\n\n` +
         `–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç—ñ–∫–µ—Ç—É.\n\n` +
         `üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`
       );
     }
   }

  async getCategoryText(categoryId) {
    try {
      if (typeof categoryId === 'string' && categoryId.length === 24) {
        // ObjectId ‚Äì —à—É–∫–∞—î–º–æ –≤ –ë–î —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ icon, —è–∫—â–æ –∑–∞–¥–∞–Ω–æ
        const category = await Category.findById(categoryId);
        if (!category) return '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è';
        const icon = category.icon && category.icon.trim() !== '' ? category.icon : '';
        return icon ? `${icon} ${category.name}` : category.name;
      }

      // –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É: —à—É–∫–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–∞ –Ω–∞–∑–≤–æ—é
      const byName = await Category.findByName(categoryId);
      if (byName) {
        const icon = byName.icon && byName.icon.trim() !== '' ? byName.icon : '';
        return icon ? `${icon} ${byName.name}` : byName.name;
      }

      return '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è';
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:', error);
      return '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è';
    }
  }

  

   // –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω—ñ–≤
   async handleTemplateAddPhotoCallback(chatId, user) {
     const session = this.userSessions.get(chatId);
     if (session && session.isTemplate) {
       session.step = 'photo';
       await this.sendMessage(chatId, 
         'üì∑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –¥–æ —Ç—ñ–∫–µ—Ç—É –∑ —à–∞–±–ª–æ–Ω—É.\n\n' +
         '–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.'
       );
     }
   }

   async handleTemplateCreateWithoutPhotoCallback(chatId, user) {
     const session = this.userSessions.get(chatId);
     if (session && session.isTemplate) {
       await this.completeTemplateTicketCreation(chatId, user, session);
     }
   }

   async completeTemplateTicketCreation(chatId, user, session) {
     try {
       const ticketData = {
         title: session.ticketData.title,
         description: session.ticketData.description,
         category: session.ticketData.categoryId,
         priority: session.ticketData.priority,
         createdBy: user._id,
         city: user.city,
         status: 'open',
         metadata: {
           source: 'telegram',
           templateId: session.templateId
         },
         attachments: session.ticketData.photos.map(photo => {
           let fileSize = 0;
           try {
             const stats = fs.statSync(photo.path);
             fileSize = stats.size;
           } catch (error) {
             logger.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É ${photo.path}:`, error);
           }
           
           return {
             filename: path.basename(photo.path),
             originalName: photo.caption || path.basename(photo.path),
             mimetype: 'image/jpeg',
             size: fileSize,
             path: photo.path,
             uploadedBy: user._id,
             caption: photo.caption
           };
         })
       };

       // –î–æ–¥–∞—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—ñ –ø–æ–ª—è –∑ —à–∞–±–ª–æ–Ω—É
       if (session.ticketData.customFields && session.ticketData.customFields.length > 0) {
         ticketData.customFields = session.ticketData.customFields;
       }

       // Debug logging
       logger.info('Ticket data before creation:', JSON.stringify(ticketData, null, 2));
       logger.info('Session data:', JSON.stringify(session, null, 2));

       const ticket = new Ticket(ticketData);
       await ticket.save();

       // –û—á–∏—â—É—î–º–æ —Å–µ—Å—ñ—é
       this.userSessions.delete(chatId);

       let confirmText = `‚úÖ –¢—ñ–∫–µ—Ç –∑ —à–∞–±–ª–æ–Ω—É —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n` +
         `üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${ticket.title}\n` +
         `üìù –û–ø–∏—Å: ${ticket.description}\n` +
         `üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${await this.getCategoryText(ticket.category)}\n` +
         `‚ö° –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${this.getPriorityText(ticket.priority)}\n` +
         `üÜî ID —Ç—ñ–∫–µ—Ç—É: ${ticket._id}`;

       if (session.ticketData.photos.length > 0) {
         confirmText += `\nüì∑ –ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ: ${session.ticketData.photos.length}`;
       }

       await this.sendMessage(chatId, confirmText, {
         reply_markup: {
           inline_keyboard: [[{ text: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'back' }]]
         }
       });

       logger.info(`–¢—ñ–∫–µ—Ç –∑ —à–∞–±–ª–æ–Ω—É —Å—Ç–≤–æ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram: ${ticket._id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ${user.email}, —à–∞–±–ª–æ–Ω: ${session.templateId}`);
     } catch (error) {
       logger.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É –∑ —à–∞–±–ª–æ–Ω—É:', error);
       await this.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É –∑ —à–∞–±–ª–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
     }
   }

  get isInitialized() {
    return this.bot !== null;
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç –≤ –≥—Ä—É–ø—É
   */
  async sendNewTicketNotificationToGroup(ticket, user) {
    try {
      if (!this.bot) {
        logger.warn('Telegram –±–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç');
        return;
      }

      const groupChatId = process.env.TELEGRAM_GROUP_CHAT_ID;
      if (!groupChatId) {
        logger.warn('TELEGRAM_GROUP_CHAT_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        return;
      }

      await ticket.populate([
        { path: 'createdBy', select: 'firstName lastName email' },
        { path: 'city', select: 'name region' },
        { path: 'category', select: 'name' }
      ]);

      const categoryText = await this.getCategoryText(ticket.category._id);
      const message = `üÜï –ù–æ–≤–∏–π —Ç—ñ–∫–µ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n` +
        `üìã ID: ${ticket._id}\n` +
        `üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${ticket.title}\n` +
        `üë§ –°—Ç–≤–æ—Ä–∏–≤: ${user.firstName} ${user.lastName}\n` +
        `üìß Email: ${user.email}\n` +
        `üèôÔ∏è –ú—ñ—Å—Ç–æ: ${ticket.city?.name || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n` +
        `üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${categoryText}\n` +
        `‚ö° –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${this.getPriorityText(ticket.priority)}\n` +
        `üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: ${new Date(ticket.createdAt).toLocaleString('uk-UA')}`;

      await this.sendMessage(groupChatId, message);
      logger.info(`–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø—É: ${ticket._id}`);
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç –≤ –≥—Ä—É–ø—É:', error);
      throw error;
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É —Ç—ñ–∫–µ—Ç–∞ –≤ –≥—Ä—É–ø—É
   */
  async sendTicketStatusNotificationToGroup(ticket, previousStatus, newStatus, user) {
    try {
      if (!this.bot) {
        logger.warn('Telegram –±–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É');
        return;
      }

      const groupChatId = process.env.TELEGRAM_GROUP_CHAT_ID;
      if (!groupChatId) {
        logger.warn('TELEGRAM_GROUP_CHAT_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        return;
      }

      await ticket.populate([
        { path: 'createdBy', select: 'firstName lastName email' },
        { path: 'assignedTo', select: 'firstName lastName email' },
        { path: 'city', select: 'name region' }
      ]);

      const statusEmoji = this.getStatusEmoji(newStatus);
      const statusText = this.getStatusText(newStatus);
      const previousStatusText = this.getStatusText(previousStatus);

      let message = `${statusEmoji} –°—Ç–∞—Ç—É—Å —Ç—ñ–∫–µ—Ç–∞ –∑–º—ñ–Ω–µ–Ω–æ!\n\n` +
        `üìã ID: ${ticket._id}\n` +
        `üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${ticket.title}\n` +
        `üë§ –°—Ç–≤–æ—Ä–∏–≤: ${ticket.createdBy?.firstName} ${ticket.createdBy?.lastName}\n` +
        `üîÑ –ó–º—ñ–Ω–∏–≤: ${user.firstName} ${user.lastName}\n` +
        `üìä –°—Ç–∞—Ç—É—Å: ${previousStatusText} ‚Üí ${statusText}\n` +
        `üèôÔ∏è –ú—ñ—Å—Ç–æ: ${ticket.city?.name || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n` +
        `‚ö° –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${this.getPriorityText(ticket.priority)}`;

      if (ticket.assignedTo) {
        message += `\nüë®‚Äçüíº –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ: ${ticket.assignedTo.firstName} ${ticket.assignedTo.lastName}`;
      }

      await this.sendMessage(groupChatId, message);
      logger.info(`–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É —Ç—ñ–∫–µ—Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø—É: ${ticket._id}`);
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –≤ –≥—Ä—É–ø—É:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–≥—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async handleFeedbackCallback(chatId, data, user) {
    try {
      if (data === 'feedback_skip') {
        await this.sendMessage(chatId, '–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—É –æ—Ü—ñ–Ω–∫—É!');
        return;
      }

      const ticketId = data.replace('feedback_', '');
      const ticket = await Ticket.findById(ticketId);
      
      if (!ticket) {
        await this.sendMessage(chatId, '–¢—ñ–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
        return;
      }

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É
      this.userSessions[chatId] = {
        action: 'waiting_feedback',
        ticketId: ticketId,
        userId: user._id
      };

      await this.sendMessage(chatId, 
        `üí¨ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É:\n\n` +
        `üìã ${ticket.title}\n\n` +
        `–í–∞—à –≤—ñ–¥–≥—É–∫ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —è–∫—ñ—Å—Ç—å –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è.`
      );
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É –Ω–∞ –≤—ñ–¥–≥—É–∫:', error);
      await this.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É –Ω–∞ –≤—ñ–¥–≥—É–∫.');
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤—ñ–¥–≥—É–∫–æ–º
   */
  async handleFeedbackMessage(chatId, text, user) {
    try {
      const session = this.userSessions[chatId];
      if (!session || session.action !== 'waiting_feedback') {
        return false; // –ù–µ –æ–±—Ä–æ–±–ª—è—î–º–æ —è–∫ –≤—ñ–¥–≥—É–∫
      }

      const ticket = await Ticket.findById(session.ticketId);
      if (!ticket) {
        await this.sendMessage(chatId, '–¢—ñ–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
        delete this.userSessions[chatId];
        return true;
      }

      // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É
      ticket.qualityRating.feedback = text;
      await ticket.save();

      await this.sendMessage(chatId, 
        `‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!\n\n` +
        `–í–∞—à—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ–ø–æ–º–æ–∂—É—Ç—å –Ω–∞–º –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —è–∫—ñ—Å—Ç—å –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è.`
      );

      // –û—á–∏—â–∞—î–º–æ —Å–µ—Å—ñ—é
      delete this.userSessions[chatId];
      
      logger.info(`–í—ñ–¥–≥—É–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è —Ç—ñ–∫–µ—Ç—É ${session.ticketId} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user.email}`);
      return true; // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ —è–∫ –≤—ñ–¥–≥—É–∫
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É:', error);
      await this.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É.');
      delete this.userSessions[chatId];
      return true;
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –æ—Ü—ñ–Ω–∫—É —è–∫–æ—Å—Ç—ñ —Ç—ñ–∫–µ—Ç—É
   */
  async sendQualityRatingRequest(ticket) {
    try {
      if (!this.bot) {
        logger.warn('Telegram –±–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Ç—É –Ω–∞ –æ—Ü—ñ–Ω–∫—É');
        return;
      }

      await ticket.populate([
        { path: 'createdBy', select: 'firstName lastName email telegramId' }
      ]);

      const user = ticket.createdBy;
      if (!user || !user.telegramId) {
        logger.info(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î Telegram ID –¥–ª—è –∑–∞–ø–∏—Ç—É –æ—Ü—ñ–Ω–∫–∏ —Ç—ñ–∫–µ—Ç—É ${ticket._id}`);
        return;
      }

      const message = `‚úÖ –í–∞—à —Ç—ñ–∫–µ—Ç –±—É–ª–æ –∑–∞–∫—Ä–∏—Ç–æ!\n\n` +
        `üìã ID: ${ticket._id}\n` +
        `üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${ticket.title}\n` +
        `üìÖ –ó–∞–∫—Ä–∏—Ç–æ: ${new Date().toLocaleString('uk-UA')}\n\n` +
        `üåü –ß–∏ —Ö–æ—Ç—ñ–ª–∏ –± –≤–∏ –æ—Ü—ñ–Ω–∏—Ç–∏ —è–∫—ñ—Å—Ç—å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ —Ç—ñ–∫–µ—Ç—É?`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üëç –¢–∞–∫, –æ—Ü—ñ–Ω–∏—Ç–∏', callback_data: `rate_ticket_yes_${ticket._id}` },
            { text: 'üëé –ù—ñ, –¥—è–∫—É—é', callback_data: `rate_ticket_no_${ticket._id}` }
          ]
        ]
      };

      await this.sendMessage(user.telegramId, message, { reply_markup: keyboard });
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Ç—É –Ω–∞ –æ—Ü—ñ–Ω–∫—É
      ticket.qualityRating.ratingRequested = true;
      ticket.qualityRating.requestedAt = new Date();
      await ticket.save();

      logger.info(`–ó–∞–ø–∏—Ç –Ω–∞ –æ—Ü—ñ–Ω–∫—É —è–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –¥–ª—è —Ç—ñ–∫–µ—Ç—É ${ticket._id}`);
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Ç—É –Ω–∞ –æ—Ü—ñ–Ω–∫—É —è–∫–æ—Å—Ç—ñ:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç –æ—Ü—ñ–Ω–∫–∏ —è–∫–æ—Å—Ç—ñ
   */
  async handleQualityRatingResponse(chatId, data, user) {
    try {
      const [action, response, ticketId] = data.split('_').slice(1); // rate_ticket_yes_ticketId -> [ticket, yes, ticketId]
      
      if (action !== 'ticket') {
        logger.warn(`–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –¥–ª—è –æ—Ü—ñ–Ω–∫–∏: ${action}`);
        return;
      }

      const ticket = await Ticket.findById(ticketId);
      if (!ticket) {
        await this.sendMessage(chatId, '–¢—ñ–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
        return;
      }

      if (response === 'no') {
        // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–º–æ–≤–∏–≤—Å—è –≤—ñ–¥ –æ—Ü—ñ–Ω–∫–∏
        await this.sendMessage(chatId, '–î—è–∫—É—î–º–æ! –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞.');
        return;
      }

      if (response === 'yes') {
        // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –æ—Ü—ñ–Ω–∏—Ç–∏ - –ø–æ–∫–∞–∑—É—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –æ—Ü—ñ–Ω–æ–∫
        const message = `üåü –û—Ü—ñ–Ω—ñ—Ç—å —è–∫—ñ—Å—Ç—å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ —Ç—ñ–∫–µ—Ç—É:\n\n` +
          `üìã ${ticket.title}\n\n` +
          `–û–±–µ—Ä—ñ—Ç—å –æ—Ü—ñ–Ω–∫—É –≤—ñ–¥ 1 –¥–æ 5 –∑—ñ—Ä–æ–∫:`;

        const keyboard = {
          inline_keyboard: [
            [
              { text: '‚≠ê', callback_data: `rating_1_${ticketId}` },
              { text: '‚≠ê‚≠ê', callback_data: `rating_2_${ticketId}` },
              { text: '‚≠ê‚≠ê‚≠ê', callback_data: `rating_3_${ticketId}` }
            ],
            [
              { text: '‚≠ê‚≠ê‚≠ê‚≠ê', callback_data: `rating_4_${ticketId}` },
              { text: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê', callback_data: `rating_5_${ticketId}` }
            ],
            [
              { text: this.getCancelButtonText(), callback_data: `rate_ticket_no_${ticketId}` }
            ]
          ]
        };

        await this.sendMessage(chatId, message, { reply_markup: keyboard });
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç –æ—Ü—ñ–Ω–∫–∏:', error);
      await this.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.');
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –æ—Ü—ñ–Ω–∫–∏ —è–∫–æ—Å—Ç—ñ —Ç—ñ–∫–µ—Ç—É
   */
  async handleQualityRating(chatId, data, user) {
    try {
      const [action, rating, ticketId] = data.split('_'); // rating_5_ticketId
      
      if (action !== 'rating') {
        logger.warn(`–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥—É: ${action}`);
        return;
      }

      const ratingValue = parseInt(rating);
      if (isNaN(ratingValue) || ratingValue < 1 || ratingValue > 5) {
        await this.sendMessage(chatId, '–ù–µ–≤—ñ—Ä–Ω–∞ –æ—Ü—ñ–Ω–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        return;
      }

      const ticket = await Ticket.findById(ticketId);
      if (!ticket) {
        await this.sendMessage(chatId, '–¢—ñ–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
        return;
      }

      // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏
      ticket.qualityRating.hasRating = true;
      ticket.qualityRating.rating = ratingValue;
      ticket.qualityRating.ratedAt = new Date();
      ticket.qualityRating.ratedBy = user._id;
      await ticket.save();

      const stars = '‚≠ê'.repeat(ratingValue);
      let responseMessage = `–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—É –æ—Ü—ñ–Ω–∫—É!\n\n` +
        `üåü –í–∞—à–∞ –æ—Ü—ñ–Ω–∫–∞: ${stars} (${ratingValue}/5)\n` +
        `üìã –¢—ñ–∫–µ—Ç: ${ticket.title}`;

      // –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫ –¥–ª—è –Ω–∏–∑—å–∫–∏—Ö –æ—Ü—ñ–Ω–æ–∫
      if (ratingValue <= 3) {
        responseMessage += `\n\nüí¨ –ß–∏ —Ö–æ—Ç—ñ–ª–∏ –± –≤–∏ –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É?`;
        
        const keyboard = {
          inline_keyboard: [
            [
              { text: 'üí¨ –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫', callback_data: `feedback_${ticketId}` },
              { text: '‚ùå –ù—ñ, –¥—è–∫—É—é', callback_data: 'feedback_skip' }
            ]
          ]
        };

        await this.sendMessage(chatId, responseMessage, { reply_markup: keyboard });
      } else {
        await this.sendMessage(chatId, responseMessage);
      }

      logger.info(`–û—Ü—ñ–Ω–∫–∞ ${ratingValue} –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –¥–ª—è —Ç—ñ–∫–µ—Ç—É ${ticketId} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ${user.email}`);
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏ —è–∫–æ—Å—Ç—ñ:', error);
      await this.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –æ—Ü—ñ–Ω–∫–∏.');
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ —Ç—ñ–∫–µ—Ç
   */
  async sendTicketNotification(ticket, type) {
    try {
      if (!this.bot) {
        logger.warn('Telegram –±–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É');
        return;
      }

      await ticket.populate([
        { path: 'createdBy', select: 'firstName lastName email telegramId' },
        { path: 'assignedTo', select: 'firstName lastName email telegramId' }
      ]);

      let targetUser = null;
      let message = '';

      switch (type) {
        case 'assigned':
          targetUser = ticket.assignedTo;
          if (targetUser && targetUser.telegramId) {
            message = `üë®‚Äçüíº –í–∞–º –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç!\n\n` +
              `üìã ID: ${ticket._id}\n` +
              `üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${ticket.title}\n` +
              `‚ö° –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${this.getPriorityText(ticket.priority)}\n` +
              `üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: ${new Date(ticket.createdAt).toLocaleString('uk-UA')}`;
          }
          break;

        case 'updated':
          targetUser = ticket.createdBy;
          if (targetUser && targetUser.telegramId) {
            const statusText = this.getStatusText(ticket.status);
            const statusEmoji = this.getStatusEmoji(ticket.status);
            
            message = `${statusEmoji} –°—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ —Ç—ñ–∫–µ—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ!\n\n` +
              `üìã ID: ${ticket._id}\n` +
              `üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${ticket.title}\n` +
              `üìä –ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å: ${statusText}\n` +
              `üìÖ –û–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('uk-UA')}`;
          }
          break;

        default:
          logger.warn(`–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: ${type}`);
          return;
      }

      if (targetUser && targetUser.telegramId && message) {
        await this.sendMessage(targetUser.telegramId, message);
        logger.info(`–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç–∏–ø—É "${type}" –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${targetUser.email}`);
      } else {
        logger.info(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î Telegram ID –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—î –¥–ª—è —Ç–∏–ø—É "${type}"`);
      }
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (—Ç–∏–ø: ${type}):`, error);
      throw error;
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
   */
  async sendNotification(telegramId, notification) {
    try {
      if (!this.bot) {
        logger.warn('Telegram –±–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è');
        return;
      }

      const message = `üì¢ ${notification.title}\n\n${notification.message}`;
      await this.sendMessage(telegramId, message);
      logger.info(`–ó–∞–≥–∞–ª—å–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ Telegram ID: ${telegramId}`);
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–æ—Ç–∞ –∑ –ë–î
   */
  async loadBotSettings() {
    try {
      const settings = await BotSettings.findOne({ key: 'default' });
      if (!settings) {
        logger.warn('BotSettings (key=default) –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –ë–î. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑—ñ —Å—Ö–µ–º–∏.');
        this.botSettings = new BotSettings({ key: 'default' });
      } else {
        this.botSettings = settings;
        logger.info('‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –ë–î');
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è BotSettings:', error);
    }
  }

  getCategoryPromptText() {
    return this.botSettings?.categoryPromptText || '–ö—Ä–æ–∫ 4/5: –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:';
  }

  getPriorityPromptText() {
    return this.botSettings?.priorityPromptText || '–ö—Ä–æ–∫ 5/5: –û–±–µ—Ä—ñ—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:';
  }

  getCancelButtonText() {
    return this.botSettings?.cancelButtonText || '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏';
  }

  /**
   * –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
   * (getCategoryText –≤–∏–∑–Ω–∞—á–µ–Ω–æ –≤–∏—â–µ —ñ –ø—Ä–∞—Ü—é—î –∑ –ë–î —Ç–∞ icon)
   */

  getPriorityText(priority) {
    const map = this.botSettings?.priorityTexts;
    try {
      if (map && typeof map.get === 'function') {
        return map.get(priority) || priority;
      }
      // –Ø–∫—â–æ –∫–∞—Ä—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª—é—á —è–∫ —Ç–µ–∫—Å—Ç
      return priority;
    } catch (err) {
      logger.warn('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É –∑ BotSettings:', err);
      return priority;
    }
  }

  getStatusText(status) {
    const map = this.botSettings?.statusTexts;
    try {
      if (map && typeof map.get === 'function') {
        return map.get(status) || status;
      }
      return status;
    } catch (err) {
      logger.warn('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑ BotSettings:', err);
      return status;
    }
  }

  getStatusEmoji(status) {
    const map = this.botSettings?.statusEmojis;
    try {
      if (map && typeof map.get === 'function') {
        return map.get(status) || '';
      }
      return '';
    } catch (err) {
      logger.warn('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–º–æ–¥–∑—ñ —Å—Ç–∞—Ç—É—Å—É –∑ BotSettings:', err);
      return '';
    }
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
  async loadCategories() {
    try {
      const categories = await Category.find({ isActive: true }).sort({ sortOrder: 1, name: 1 });
      this.categoryCache.clear();
      
      categories.forEach(category => {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø—ñ–Ω–≥ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –Ω–∞–∑–≤–∞ -> –æ–±'—î–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        this.categoryCache.set(category.name, category);
      });
      
      console.log(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${categories.length} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π`);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:', error);
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ –Ω–∞–∑–≤–æ—é
  getCategoryByName(categoryName) {
    return this.categoryCache.get(categoryName);
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
  getAllCategories() {
    return Array.from(this.categoryCache.values());
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è Telegram (–∑ –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º –ø—Ä–∏ –ø—É—Å—Ç–æ–º—É –∫–µ—à—ñ)
  async generateCategoryButtons() {
    let categories = this.getAllCategories();
    if (!categories || categories.length === 0) {
      // –õ—ñ–Ω–∏–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –ë–î, —è–∫—â–æ –∫–µ—à –ø–æ—Ä–æ–∂–Ω—ñ–π
      await this.loadCategories();
      categories = this.getAllCategories();
    }

    // –§–æ—Ä–º—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —ñ–∫–æ–Ω–∫—É –∑ –ë–î, —è–∫—â–æ —î
    const categoryButtonsFlat = categories.map((category) => {
      const icon = category.icon && category.icon.trim() !== '' ? category.icon : '';
      const text = icon ? `${icon} ${category.name}` : category.name;
      return {
        text,
        callback_data: `category_${category._id}`
      };
    });

    // –î–∏–Ω–∞–º—ñ—á–Ω–µ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º (—Ä–æ–∑–º—ñ—Ä —Ä—è–¥–∫–∞)
    const rowSize = Math.max(1, Number(this.botSettings?.categoryButtonRowSize || 2));
    const rows = [];
    let currentRow = [];
    for (const btn of categoryButtonsFlat) {
      currentRow.push(btn);
      if (currentRow.length === rowSize) {
        rows.push(currentRow);
        currentRow = [];
      }
    }

    // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è, —â–æ–± –∑–∞–≥–∞–ª–æ–º –±—É–ª–æ –∫–æ–º–ø–∞–∫—Ç–Ω–æ
    const cancelBtn = { text: this.getCancelButtonText(), callback_data: 'cancel_ticket' };
    if (currentRow.length === 1) {
      // –Ø–∫—â–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥ –Ω–µ–ø–æ–≤–Ω–∏–π ‚Äî –¥–æ–¥–∞—î–º–æ –¥–æ –Ω—å–æ–≥–æ –∫–Ω–æ–ø–∫—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
      currentRow.push(cancelBtn);
      rows.push(currentRow);
    } else {
      if (currentRow.length === 2) {
        rows.push(currentRow);
      }
      // –Ü–Ω–∞–∫—à–µ –¥–æ–¥–∞—î–º–æ –æ–∫—Ä–µ–º–∏–º —Ä—è–¥–∫–æ–º
      rows.push([cancelBtn]);
    }

    return rows;
  }

  // –í–∏–¥–∞–ª–µ–Ω–æ –º–∞–ø—ñ–Ω–≥ –µ–º–æ–¥–∑—ñ, —ñ–∫–æ–Ω–∫–∏ –∫–µ—Ä—É—é—Ç—å—Å—è –∑ –ë–î

  // –ù–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
  async handleDynamicCategoryCallback(chatId, user, categoryId) {
    const session = this.userSessions.get(chatId);
    if (session) {
      try {
        const category = await Category.findById(categoryId);
        if (!category) {
          await this.sendMessage(chatId, '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
          return;
        }

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –ë–î –Ω–∞–ø—Ä—è–º—É
        session.ticketData.categoryId = categoryId;
        session.step = 'priority';
        
        await this.sendMessage(chatId, 
          this.getPriorityPromptText(), {
            reply_markup: {
              inline_keyboard: [
                [{ text: this.getPriorityText('–í–∏—Å–æ–∫–∏–πüî¥'), callback_data: 'priority_high' }],
                [{ text: this.getPriorityText('–°–µ—Ä–µ–¥–Ω—ñ–πüü°'), callback_data: 'priority_medium' }],
                [{ text: this.getPriorityText('–ù–∏–∑—å–∫–∏–πüü¢'), callback_data: 'priority_low' }],
                [{ text: this.getCancelButtonText(), callback_data: 'cancel_ticket' }]
              ]
            }
          }
        );
      } catch (error) {
        logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:', error);
        await this.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
      }
    }
  }

  // –û–±—Ä–æ–±–Ω–∏–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  async handleUserRegistrationCallback(chatId, userId) {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      let pendingRegistration = await PendingRegistration.findOne({ telegramId: userId });
      
      if (!pendingRegistration) {
        // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram
        const chatInfo = await this.bot.getChat(userId);
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∑–∞–ø–∏—Å –¥–ª—è –ø–æ–∫—Ä–æ–∫–æ–≤–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        pendingRegistration = new PendingRegistration({
          telegramId: userId,
          step: 'firstName',
          telegramInfo: {
            firstName: chatInfo.first_name || '',
            lastName: chatInfo.last_name || '',
            username: chatInfo.username || ''
          }
        });
        await pendingRegistration.save();
      }

      // –ü–æ—á–∏–Ω–∞—î–º–æ –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
      await this.processRegistrationStep(chatId, userId, pendingRegistration);
      
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
      await this.sendMessage(chatId, 
        `‚ùå *–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó*\n\n` +
        `–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤–∞—à–æ—ó –∑–∞—è–≤–∫–∏.\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `üìû –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–ø—Ä—è–º—É.`
      );
    }
  }

  // –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –æ–±—Ä–æ–±–∫–∏ –∫—Ä–æ–∫—ñ–≤ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
  async processRegistrationStep(chatId, userId, pendingRegistration) {
    const step = pendingRegistration.step;
    
    switch (step) {
      case 'firstName':
        await this.askForFirstName(chatId);
        break;
      case 'lastName':
        await this.askForLastName(chatId);
        break;
      case 'email':
        await this.askForEmail(chatId);
        break;
      case 'phone':
        await this.askForPhone(chatId);
        break;
      case 'password':
        await this.askForPassword(chatId);
        break;
      case 'city':
        await this.askForCity(chatId);
        break;
      case 'position':
        await this.askForPosition(chatId);
        break;
      case 'department':
        await this.askForDepartment(chatId);
        break;
      case 'completed':
        await this.completeRegistration(chatId, userId, pendingRegistration);
        break;
      default:
        await this.askForFirstName(chatId);
        break;
    }
  }

  // –ú–µ—Ç–æ–¥–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫—Ä–æ–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
  async askForFirstName(chatId) {
    await this.sendMessage(chatId, 
      `üìù *–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è - –ö—Ä–æ–∫ 1/8*\n\n` +
      `üë§ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ *—ñ–º'—è*:\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üí° *–ü—Ä–∏–∫–ª–∞–¥:* –û–ª–µ–∫—Å–∞–Ω–¥—Ä`
    );
  }

  async askForLastName(chatId) {
    await this.sendMessage(chatId, 
      `üìù *–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è - –ö—Ä–æ–∫ 2/8*\n\n` +
      `üë§ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ *–ø—Ä—ñ–∑–≤–∏—â–µ*:\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üí° *–ü—Ä–∏–∫–ª–∞–¥:* –ü–µ—Ç—Ä–µ–Ω–∫–æ`
    );
  }

  async askForEmail(chatId) {
    await this.sendMessage(chatId, 
      `üìù *–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è - –ö—Ä–æ–∫ 3/8*\n\n` +
      `üìß –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É *–µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É*:\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üí° *–ü—Ä–∏–∫–ª–∞–¥:* oleksandr.petrenko@example.com`
    );
  }

  async askForPhone(chatId) {
    await this.sendMessage(chatId, 
      `üìù *–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è - –ö—Ä–æ–∫ 4/8*\n\n` +
      `üì± –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É*:\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üí° *–ü—Ä–∏–∫–ª–∞–¥:* +380501234567`
    );
  }

  async askForPassword(chatId) {
    await this.sendMessage(chatId, 
      `üìù *–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è - –ö—Ä–æ–∫ 5/8*\n\n` +
      `üîê –ë—É–¥—å –ª–∞—Å–∫–∞, —Å—Ç–≤–æ—Ä—ñ—Ç—å *–ø–∞—Ä–æ–ª—å* –¥–ª—è –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É:\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `‚ö†Ô∏è *–í–∏–º–æ–≥–∏ –¥–æ –ø–∞—Ä–æ–ª—é:*\n` +
      `‚Ä¢ –ú—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤\n` +
      `‚Ä¢ –ú—ñ—Å—Ç–∏—Ç—å –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ —Ü–∏—Ñ—Ä–∏\n\n` +
      `üí° *–ü—Ä–∏–∫–ª–∞–¥:* MyPass123`
    );
  }

  async askForCity(chatId) {
    try {
      const cities = await City.find({}).sort({ name: 1 });
      
      if (cities.length === 0) {
        await this.sendMessage(chatId, 
          `‚ùå *–ü–æ–º–∏–ª–∫–∞*\n\n` +
          `–°–ø–∏—Å–æ–∫ –º—ñ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`
        );
        return;
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞ (–ø–æ 2 –≤ —Ä—è–¥—É)
      const cityButtons = [];
      for (let i = 0; i < cities.length; i += 2) {
        const row = [];
        row.push({ text: cities[i].name, callback_data: `city_${cities[i]._id}` });
        if (cities[i + 1]) {
          row.push({ text: cities[i + 1].name, callback_data: `city_${cities[i + 1]._id}` });
        }
        cityButtons.push(row);
      }

      await this.sendMessage(chatId, 
        `üìù *–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è - –ö—Ä–æ–∫ 6/8*\n\n` +
        `üèôÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ *–º—ñ—Å—Ç–æ*:`,
        {
          reply_markup: {
            inline_keyboard: cityButtons
          }
        }
      );
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º—ñ—Å—Ç:', error);
      await this.sendMessage(chatId, 
        `‚ùå *–ü–æ–º–∏–ª–∫–∞*\n\n` +
        `–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –º—ñ—Å—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.`
      );
    }
  }

  async askForPosition(chatId) {
    try {
      const positions = await Position.find({}).sort({ name: 1 });
      
      if (positions.length === 0) {
        await this.sendMessage(chatId, 
          `‚ùå *–ü–æ–º–∏–ª–∫–∞*\n\n` +
          `–°–ø–∏—Å–æ–∫ –ø–æ—Å–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`
        );
        return;
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –ø–æ—Å–∞–¥–∏ (–ø–æ 1 –≤ —Ä—è–¥—É –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ)
      const positionButtons = positions.map(position => [
        { text: position.title, callback_data: `position_${position._id}` }
      ]);

      await this.sendMessage(chatId, 
        `üìù *–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è - –ö—Ä–æ–∫ 7/8*\n\n` +
        `üíº –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à—É *–ø–æ—Å–∞–¥—É*:`,
        {
          reply_markup: {
            inline_keyboard: positionButtons
          }
        }
      );
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å–∞–¥:', error);
      await this.sendMessage(chatId, 
        `‚ùå *–ü–æ–º–∏–ª–∫–∞*\n\n` +
        `–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–∞–¥. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.`
      );
    }
  }

  async askForDepartment(chatId) {
    await this.sendMessage(chatId, 
      `üìù *–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è - –ö—Ä–æ–∫ 8/8*\n\n` +
      `üè¢ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ *–≤—ñ–¥–¥—ñ–ª—É/–∑–∞–∫–ª–∞–¥—É*:\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üí° *–ü—Ä–∏–∫–ª–∞–¥:* –í—ñ–¥–¥—ñ–ª —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π`
    );
  }

  async completeRegistration(chatId, userId, pendingRegistration) {
    try {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const newUser = new User({
        telegramId: userId,
        firstName: pendingRegistration.data.firstName,
        lastName: pendingRegistration.data.lastName,
        email: pendingRegistration.data.email,
        phone: pendingRegistration.data.phone,
        password: pendingRegistration.data.password, // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ö–µ—à—É–≤–∞—Ç–∏
        city: pendingRegistration.data.cityId,
        position: pendingRegistration.data.positionId,
        department: pendingRegistration.data.department,
        telegramUsername: pendingRegistration.telegramInfo.username,
        isActive: false // –ü–æ—Ç—Ä–µ–±—É—î –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
      });

      await newUser.save();

      // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ —Ç–∏–º—á–∞—Å–æ–≤—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
      await PendingRegistration.deleteOne({ _id: pendingRegistration._id });

      await this.sendMessage(chatId, 
        `‚úÖ *–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `üéâ –î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é!\n\n` +
        `üìã *–í–∞—à—ñ –¥–∞–Ω—ñ:*\n` +
        `üë§ *–Ü–º'—è:* ${pendingRegistration.data.firstName}\n` +
        `üë§ *–ü—Ä—ñ–∑–≤–∏—â–µ:* ${pendingRegistration.data.lastName}\n` +
        `üìß *Email:* ${pendingRegistration.data.email}\n` +
        `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${pendingRegistration.data.phone}\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `‚è≥ *–í–∞—à –∞–∫–∞—É–Ω—Ç –æ—á—ñ–∫—É—î –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*\n\n` +
        `üìû –ü—ñ—Å–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –≤–∏ –∑–º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –±–æ—Ç–∞.`
      );

      // –õ–æ–≥—É—î–º–æ —É—Å–ø—ñ—à–Ω—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
      logger.info(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: ${pendingRegistration.data.firstName} ${pendingRegistration.data.lastName} (${userId})`);

    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
      await this.sendMessage(chatId, 
        `‚ùå *–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó*\n\n` +
        `–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö.\n\n` +
        `üìû –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`
      );
    }
  }

  // –û–±—Ä–æ–±–Ω–∏–∫ –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  async handleContactAdminCallback(chatId) {
    try {
      await this.sendMessage(chatId, 
        `üìû *–ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `üë®‚Äçüíº *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:*\n\n` +
        `üìß Email: admin@helpdesk.com\n` +
        `üì± –¢–µ–ª–µ—Ñ–æ–Ω: +380 XX XXX XX XX\n` +
        `üí¨ Telegram: @admin_helpdesk\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `‚è∞ *–†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏:* –ü–Ω-–ü—Ç 9:00-18:00\n` +
        `üïê *–ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:* –î–æ 24 –≥–æ–¥–∏–Ω`
      );
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
      await this.sendMessage(chatId, 
        `‚ùå *–ü–æ–º–∏–ª–∫–∞*\n\n` +
        `–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.\n` +
        `–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.`
      );
    }
  }

  // –û–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (–≤–∏–±—ñ—Ä –º—ñ—Å—Ç–∞ —Ç–∞ –ø–æ—Å–∞–¥–∏)
  async handleRegistrationCallback(chatId, userId, data) {
    try {
      const pendingRegistration = await PendingRegistration.findOne({ telegramId: userId });
      
      if (!pendingRegistration) {
        await this.sendMessage(chatId, '‚ùå –°–µ—Å—ñ—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ—á–Ω—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–ø–æ—á–∞—Ç–∫—É.');
        return;
      }

      if (data.startsWith('city_')) {
        const cityId = data.replace('city_', '');
        const city = await City.findById(cityId);
        
        if (!city) {
          await this.sendMessage(chatId, '‚ùå –ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
          return;
        }

        pendingRegistration.data.cityId = cityId;
        pendingRegistration.step = 'position';
        await pendingRegistration.save();

        await this.sendMessage(chatId, `‚úÖ –ú—ñ—Å—Ç–æ –æ–±—Ä–∞–Ω–æ: ${city.name}`);
        await this.processRegistrationStep(chatId, userId, pendingRegistration);
        
      } else if (data.startsWith('position_')) {
        const positionId = data.replace('position_', '');
        const position = await Position.findById(positionId);
        
        if (!position) {
          await this.sendMessage(chatId, '‚ùå –ü–æ—Å–∞–¥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
          return;
        }

        pendingRegistration.data.positionId = positionId;
        pendingRegistration.step = 'department';
        await pendingRegistration.save();

        await this.sendMessage(chatId, `‚úÖ –ü–æ—Å–∞–¥–∞ –æ–±—Ä–∞–Ω–∞: ${position.title}`);
        await this.processRegistrationStep(chatId, userId, pendingRegistration);
      }

    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ callback —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
      await this.sendMessage(chatId, '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
   * @param {Object} user - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á
   */
  async sendRegistrationApprovedNotification(user) {
    try {
      if (!user.telegramId) {
        logger.info(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.email} –Ω–µ –º–∞—î Telegram ID –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è`);
        return;
      }

      const message = 
        `‚úÖ *–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å—Ö–≤–∞–ª–µ–Ω–æ!*\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `üéâ –í—ñ—Ç–∞—î–º–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –±—É–ª–∞ —Å—Ö–≤–∞–ª–µ–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n` +
        `üë§ *–Ü–º'—è:* ${user.firstName} ${user.lastName}\n` +
        `üìß *Email:* ${user.email}\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `üîê –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å–≤–æ—ó –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ.\n\n` +
        `üí° –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`;

      await this.sendMessage(user.telegramId, message);
      logger.info(`–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: ${user.email}`);
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${user.email}:`, error);
      throw error;
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
   * @param {Object} user - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á
   * @param {string} reason - –ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
   */
  async sendRegistrationRejectedNotification(user, reason) {
    try {
      if (!user.telegramId) {
        logger.info(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.email} –Ω–µ –º–∞—î Telegram ID –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è`);
        return;
      }

      const message = 
        `‚ùå *–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ*\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `üòî –ù–∞ –∂–∞–ª—å, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n` +
        `üë§ *–Ü–º'—è:* ${user.firstName} ${user.lastName}\n` +
        `üìß *Email:* ${user.email}\n\n` +
        `üìù *–ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è:*\n${reason || '–ü—Ä–∏—á–∏–Ω—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `üîÑ –í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –∑–Ω–æ–≤—É, –≤–∏–ø—Ä–∞–≤–∏–≤—à–∏ –∑–∞–∑–Ω–∞—á–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏.\n\n` +
        `üìû –Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`;

      await this.sendMessage(user.telegramId, message);
      logger.info(`–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: ${user.email}`);
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${user.email}:`, error);
      throw error;
    }
  }
}

module.exports = TelegramService;