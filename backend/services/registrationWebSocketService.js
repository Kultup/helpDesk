/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –∑–∞–ø–∏—Ç–∏ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
 */

const logger = require('../utils/logger');

class RegistrationWebSocketService {
  constructor() {
    this.io = null;
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É –∑ Socket.IO —ñ–Ω—Å—Ç–∞–Ω—Å–æ–º
   * @param {Object} io - Socket.IO —Å–µ—Ä–≤–µ—Ä —ñ–Ω—Å—Ç–∞–Ω—Å
   */
  initialize(io) {
    this.io = io;
    logger.websocket('üîå RegistrationWebSocketService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
   * @param {Object} user - –û–±'—î–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  notifyNewRegistrationRequest(user) {
    if (!this.io) {
      logger.warn('‚ö†Ô∏è WebSocket –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
      return;
    }

    const notification = {
      type: 'new_registration_request',
      data: {
        userId: user._id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        department: user.department,
        position: user.position?.name || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
        city: user.city?.name || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
        createdAt: user.createdAt,
        timestamp: new Date().toISOString()
      },
      message: `–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –≤—ñ–¥ ${user.firstName} ${user.lastName}`
    };

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    this.io.to('admin-room').emit('registration-notification', notification);
    
    logger.websocket(`üì¢ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é: ${user.email}`);
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
   * @param {Object} user - –û–±'—î–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @param {string} oldStatus - –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞—Ç—É—Å
   * @param {string} newStatus - –ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å
   */
  notifyRegistrationStatusChange(user, oldStatus, newStatus) {
    if (!this.io) {
      logger.warn('‚ö†Ô∏è WebSocket –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
      return;
    }

    const notification = {
      type: 'registration_status_change',
      data: {
        userId: user._id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        oldStatus,
        newStatus,
        timestamp: new Date().toISOString()
      },
      message: `–°—Ç–∞—Ç—É—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ${user.firstName} ${user.lastName} –∑–º—ñ–Ω–µ–Ω–æ –∑ "${oldStatus}" –Ω–∞ "${newStatus}"`
    };

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    this.io.to('admin-room').emit('registration-notification', notification);
    
    logger.websocket(`üì¢ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ${user.email}`);
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
   * @param {number} count - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤
   */
  notifyRegistrationCountUpdate(count) {
    if (!this.io) {
      logger.warn('‚ö†Ô∏è WebSocket –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
      return;
    }

    const notification = {
      type: 'registration_count_update',
      data: {
        count,
        timestamp: new Date().toISOString()
      }
    };

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    this.io.to('admin-room').emit('registration-count-update', notification);
    
    logger.websocket(`üìä –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ WebSocket –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π: ${count}`);
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ WebSocket
   * @returns {boolean}
   */
  isInitialized() {
    return this.io !== null;
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Å–∏–Ω–≥–ª—Ç–æ–Ω
module.exports = new RegistrationWebSocketService();