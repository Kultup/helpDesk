const logger = require('../utils/logger');

class TicketWebSocketService {
  constructor() {
    this.io = null;
  }

  initialize(io) {
    this.io = io;
    logger.info('üé´ TicketWebSocketService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
  }

  // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç
  notifyNewTicket(ticketData) {
    if (!this.io) {
      logger.warn('‚ö†Ô∏è TicketWebSocketService –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
      return;
    }

    try {
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤ admin-room
      this.io.to('admin-room').emit('ticket-notification', {
        type: 'new_ticket',
        data: ticketData,
        timestamp: new Date().toISOString()
      });

      logger.info(`üì¢ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç: ${ticketData._id}`);
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç:', error);
    }
  }

  // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É —Ç—ñ–∫–µ—Ç—É
  notifyTicketStatusChange(ticketData) {
    if (!this.io) {
      logger.warn('‚ö†Ô∏è TicketWebSocketService –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
      return;
    }

    try {
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤ admin-room
      this.io.to('admin-room').emit('ticket-notification', {
        type: 'ticket_status_change',
        data: ticketData,
        timestamp: new Date().toISOString()
      });

      logger.info(`üì¢ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É —Ç—ñ–∫–µ—Ç—É: ${ticketData._id}`);
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É —Ç—ñ–∫–µ—Ç—É:', error);
    }
  }

  // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É
  notifyTicketAssignment(ticketData) {
    if (!this.io) {
      logger.warn('‚ö†Ô∏è TicketWebSocketService –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
      return;
    }

    try {
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤ admin-room
      this.io.to('admin-room').emit('ticket-notification', {
        type: 'ticket_assignment',
        data: ticketData,
        timestamp: new Date().toISOString()
      });

      logger.info(`üì¢ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É: ${ticketData._id}`);
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É:', error);
    }
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—ñ–∫–µ—Ç—ñ–≤
  notifyTicketCountUpdate(count) {
    if (!this.io) {
      logger.warn('‚ö†Ô∏è TicketWebSocketService –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
      return;
    }

    try {
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤ admin-room
      this.io.to('admin-room').emit('ticket-count-update', {
        count: count,
        timestamp: new Date().toISOString()
      });

      logger.info(`üìä –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ WebSocket –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç—ñ–∫–µ—Ç—ñ–≤: ${count}`);
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ WebSocket –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç—ñ–∫–µ—Ç—ñ–≤:', error);
    }
  }
}

module.exports = new TicketWebSocketService();