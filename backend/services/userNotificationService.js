const telegramService = require('./telegramServiceInstance');
const Notification = require('../models/Notification');
const logger = require('../utils/logger');

class UserNotificationService {
  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @param {Object} user - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á
   * @param {Object} statusChanges - –û–±'—î–∫—Ç –∑—ñ –∑–º—ñ–Ω–∞–º–∏ —Å—Ç–∞—Ç—É—Å—É
   */
  async sendUserStatusChangeNotification(user, statusChanges) {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î Telegram ID
      if (!user.telegramId) {
        logger.info(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.email} –Ω–µ –º–∞—î Telegram ID –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å`);
        return;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      if (!this.shouldSendNotification(user, statusChanges)) {
        logger.info(`–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user.email} –≤–∏–º–∫–Ω–µ–Ω—ñ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö`);
        return;
      }

      // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ—ó –∑–º—ñ–Ω–∏
      for (const [field, change] of Object.entries(statusChanges)) {
        const message = this.formatStatusChangeMessage(user, field, change);
        const notificationType = this.getNotificationType(field);

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ Telegram
        await this.sendTelegramNotification(user, message, notificationType);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        await this.saveNotificationToDatabase(user, field, change, notificationType);
      }

      logger.info(`–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${user.email}`);
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
   * @param {Object} user - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á
   * @param {Object} statusChanges - –ó–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É
   * @returns {boolean}
   */
  shouldSendNotification(user, statusChanges) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram —Å–ø–æ–≤—ñ—â–µ–Ω—å
    if (!user.telegramSettings?.notifications) {
      return true; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ
    }

    const telegramNotifications = user.telegramSettings.notifications;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –∑–º—ñ–Ω–∏
    for (const field of Object.keys(statusChanges)) {
      switch (field) {
        case 'isActive':
          if (telegramNotifications.statusUpdates !== false) return true;
          break;
        case 'role':
          if (telegramNotifications.statusUpdates !== false) return true;
          break;
        case 'registrationStatus':
          if (telegramNotifications.statusUpdates !== false) return true;
          break;
        default:
          return true;
      }
    }

    return false;
  }

  /**
   * –§–æ—Ä–º—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É
   * @param {Object} user - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á
   * @param {string} field - –ü–æ–ª–µ —â–æ –∑–º—ñ–Ω–∏–ª–æ—Å—è
   * @param {Object} change - –û–±'—î–∫—Ç –∑—ñ —Å—Ç–∞—Ä–∏–º —Ç–∞ –Ω–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º
   * @returns {string}
   */
  formatStatusChangeMessage(user, field, change) {
    const userName = `${user.firstName} ${user.lastName}`;
    
    switch (field) {
      case 'isActive':
        return this.formatActiveStatusMessage(userName, change);
      case 'role':
        return this.formatRoleChangeMessage(userName, change);
      case 'registrationStatus':
        return this.formatRegistrationStatusMessage(userName, change);
      default:
        return `üîî *–ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞*\n\n` +
               `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: *${userName}*\n` +
               `–ü–æ–ª–µ: ${field}\n` +
               `–ë—É–ª–æ: ${change.old}\n` +
               `–°—Ç–∞–ª–æ: ${change.new}`;
    }
  }

  /**
   * –§–æ—Ä–º—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
   */
  formatActiveStatusMessage(userName, change) {
    const statusText = change.new ? '–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π' : '–¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π';
    const emoji = change.new ? '‚úÖ' : '‚ùå';
    
    return `${emoji} *–ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ*\n\n` +
           `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á *${userName}* –±—É–≤ ${statusText}.\n\n` +
           `–ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å: ${change.new ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}`;
  }

  /**
   * –§–æ—Ä–º—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Ä–æ–ª—ñ
   */
  formatRoleChangeMessage(userName, change) {
    const roleNames = {
      'admin': '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä',
      'user': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'
    };

    return `üë§ *–ó–º—ñ–Ω–∞ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞*\n\n` +
           `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: *${userName}*\n` +
           `–ü–æ–ø–µ—Ä–µ–¥–Ω—è —Ä–æ–ª—å: ${roleNames[change.old] || change.old}\n` +
           `–ù–æ–≤–∞ —Ä–æ–ª—å: ${roleNames[change.new] || change.new}`;
  }

  /**
   * –§–æ—Ä–º—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
   */
  formatRegistrationStatusMessage(userName, change) {
    const statusNames = {
      'pending': '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
      'approved': '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ',
      'rejected': '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ'
    };

    const emoji = change.new === 'approved' ? '‚úÖ' : 
                  change.new === 'rejected' ? '‚ùå' : '‚è≥';

    return `${emoji} *–ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó*\n\n` +
           `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: *${userName}*\n` +
           `–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞—Ç—É—Å: ${statusNames[change.old] || change.old}\n` +
           `–ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å: ${statusNames[change.new] || change.new}`;
  }

  /**
   * –í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
   */
  getNotificationType(field) {
    switch (field) {
      case 'isActive':
        return 'user_status_change';
      case 'role':
        return 'user_role_change';
      case 'registrationStatus':
        return 'user_registration_status_change';
      default:
        return 'user_status_change';
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ Telegram
   */
  async sendTelegramNotification(user, message, type) {
    try {
      if (!telegramService.isInitialized) {
        logger.warn('Telegram —Å–µ—Ä–≤—ñ—Å –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
        return;
      }

      await telegramService.sendNotification(user.telegramId, {
        title: '–ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
        message: message,
        type: type
      });

      logger.info(`Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${user.email}`);
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${user.email}:`, error);
      throw error;
    }
  }

  /**
   * –ó–±–µ—Ä—ñ–≥–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
   */
  async saveNotificationToDatabase(user, field, change, type) {
    try {
      const notification = new Notification({
        userId: user._id,
        type: type,
        title: '–ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
        message: this.formatStatusChangeMessage(user, field, change),
        priority: 'medium',
        sentToTelegram: true,
        metadata: {
          field: field,
          oldValue: change.old,
          newValue: change.new,
          userEmail: user.email
        }
      });

      await notification.save();
      logger.info(`–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user.email}`);
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user.email}:`, error);
      // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –Ω–µ –∑—É–ø–∏–Ω—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async notifyAdminsAboutUserStatusChange(user, statusChanges) {
    try {
      const User = require('../models/User');
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –∑ Telegram ID
      const admins = await User.find({
        role: 'admin',
        isActive: true,
        telegramId: { $exists: true, $ne: null }
      });

      if (admins.length === 0) {
        logger.info('–ù–µ–º–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –∑ Telegram –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å');
        return;
      }

      const userName = `${user.firstName} ${user.lastName}`;
      
      for (const admin of admins) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (!this.shouldSendAdminNotification(admin)) {
          continue;
        }

        for (const [field, change] of Object.entries(statusChanges)) {
          const message = this.formatAdminNotificationMessage(userName, user.email, field, change);
          
          try {
            await telegramService.sendNotification(admin.telegramId, {
              title: '–ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ê–¥–º—ñ–Ω)',
              message: message,
              type: 'admin_user_status_change'
            });

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await this.saveAdminNotificationToDatabase(admin, user, field, change);
          } catch (error) {
            logger.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É ${admin.email}:`, error);
          }
        }
      }

      logger.info(`–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user.email} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º`);
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º:', error);
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
   */
  shouldSendAdminNotification(admin) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (admin.telegramSettings?.notifications?.statusUpdates === false) {
      return false;
    }
    return true;
  }

  /**
   * –§–æ—Ä–º—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
   */
  formatAdminNotificationMessage(userName, userEmail, field, change) {
    const fieldNames = {
      'isActive': '–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
      'role': '–†–æ–ª—å',
      'registrationStatus': '–°—Ç–∞—Ç—É—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó'
    };

    return `üîß *–ê–¥–º—ñ–Ω —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è*\n\n` +
           `–ó–º—ñ–Ω–µ–Ω–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n` +
           `üë§ *${userName}* (${userEmail})\n\n` +
           `üìã –ü–æ–ª–µ: ${fieldNames[field] || field}\n` +
           `üì§ –ë—É–ª–æ: ${change.old}\n` +
           `üì• –°—Ç–∞–ª–æ: ${change.new}\n\n` +
           `‚è∞ –ß–∞—Å: ${new Date().toLocaleString('uk-UA')}`;
  }

  /**
   * –ó–±–µ—Ä—ñ–≥–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   */
  async saveAdminNotificationToDatabase(admin, user, field, change) {
    try {
      const notification = new Notification({
        userId: admin._id,
        type: 'admin_user_status_change',
        title: '–ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ê–¥–º—ñ–Ω)',
        message: this.formatAdminNotificationMessage(
          `${user.firstName} ${user.lastName}`,
          user.email,
          field,
          change
        ),
        priority: 'medium',
        sentToTelegram: true,
        metadata: {
          targetUserId: user._id,
          targetUserEmail: user.email,
          field: field,
          oldValue: change.old,
          newValue: change.new
        }
      });

      await notification.save();
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è ${admin.email}:`, error);
    }
  }
}

module.exports = new UserNotificationService();