const express = require('express');
const router = express.Router();
const { body, query, param } = require('express-validator');
const Joi = require('joi');
const Position = require('../models/Position');
const positionController = require('../controllers/positionController');
const { authenticateToken, requirePermission, logUserAction } = require('../middleware/auth');
const adminAuth = require('../middleware/adminAuth');
const logger = require('../utils/logger');

// –°—Ö–µ–º–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
const createPositionSchema = Joi.object({
  title: Joi.string().max(100).required().messages({
    'string.max': '–ù–∞–∑–≤–∞ –ø–æ—Å–∞–¥–∏ –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 100 —Å–∏–º–≤–æ–ª—ñ–≤',
    'any.required': '–ù–∞–∑–≤–∞ –ø–æ—Å–∞–¥–∏ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ—é'
  }),
  description: Joi.string().max(500).allow('').optional(),
  department: Joi.string().max(100).required().messages({
    'string.max': '–ù–∞–∑–≤–∞ –≤—ñ–¥–¥—ñ–ª—É –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 100 —Å–∏–º–≤–æ–ª—ñ–≤',
    'any.required': '–í—ñ–¥–¥—ñ–ª —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
  }),
  permissions: Joi.array().items(
    Joi.object({
      module: Joi.string().required(),
      actions: Joi.array().items(Joi.string()).required()
    })
  ).optional(),
  responsibilities: Joi.array().items(Joi.string()).optional(),
  requirements: Joi.array().items(Joi.string()).optional(),
  skills: Joi.array().items(
    Joi.object({
      name: Joi.string().required(),
      level: Joi.string().valid('basic', 'intermediate', 'advanced', 'expert').required(),
      required: Joi.boolean().required()
    })
  ).optional(),
  salary: Joi.object({
    min: Joi.number().min(0).optional(),
    max: Joi.number().min(0).optional(),
    currency: Joi.string().valid('UAH', 'USD', 'EUR').default('UAH')
  }).optional(),
  workSchedule: Joi.object({
    type: Joi.string().valid('full-time', 'part-time', 'contract', 'remote', 'hybrid').required(),
    hoursPerWeek: Joi.number().min(1).max(168).required()
  }).optional(),
  reportingTo: Joi.string().allow('').optional(),
  isActive: Joi.boolean().optional(),
  isPublic: Joi.boolean().optional()
});

const updatePositionSchema = Joi.object({
  title: Joi.string().max(100).optional(),
  description: Joi.string().max(500).allow('').optional(),
  department: Joi.string().max(100).optional(),
  permissions: Joi.array().items(
    Joi.object({
      module: Joi.string().required(),
      actions: Joi.array().items(Joi.string()).required()
    })
  ).optional(),
  responsibilities: Joi.array().items(Joi.string()).optional(),
  requirements: Joi.array().items(Joi.string()).optional(),
  skills: Joi.array().items(
    Joi.object({
      name: Joi.string().required(),
      level: Joi.string().valid('basic', 'intermediate', 'advanced', 'expert').required(),
      required: Joi.boolean().required()
    })
  ).optional(),
  salary: Joi.object({
    min: Joi.number().min(0).optional(),
    max: Joi.number().min(0).optional(),
    currency: Joi.string().valid('UAH', 'USD', 'EUR').optional()
  }).optional(),
  workSchedule: Joi.object({
    type: Joi.string().valid('full-time', 'part-time', 'contract', 'remote', 'hybrid').required(),
    hoursPerWeek: Joi.number().min(1).max(168).required()
  }).optional(),
  reportingTo: Joi.string().allow('').optional(),
  isActive: Joi.boolean().optional(),
  isPublic: Joi.boolean().optional()
});

// @route   GET /api/positions
// @desc    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ—Å–∞–¥
// @access  Private
router.get('/', authenticateToken, async (req, res) => {
  try {
    const {
      page = 1,
      limit = 50,
      department,
      search,
      isActive,
      sortBy = 'title',
      sortOrder = 'asc'
    } = req.query;

    // –ü–æ–±—É–¥–æ–≤–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    const filters = {};
    
    logger.info('Query params:', { page, limit, department, search, isActive, sortBy, sortOrder });
    
    if (department) filters.department = department;
    // –Ø–∫—â–æ isActive –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ—Å–∞–¥–∏
    // –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ 'false', –ø–æ–∫–∞–∑—É—î–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ
    // –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ 'true' –∞–±–æ 'all', –ø–æ–∫–∞–∑—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ
    if (isActive === undefined || isActive === 'true') {
      filters.isActive = true;
    } else if (isActive === 'false') {
      filters.isActive = false;
    }
    // –Ø–∫—â–æ isActive === 'all', –Ω–µ –¥–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä
    
    logger.info('Filters:', filters);
    
    // –ü–æ—à—É–∫ –ø–æ –Ω–∞–∑–≤—ñ –ø–æ—Å–∞–¥–∏
    if (search) {
      filters.title = { $regex: search, $options: 'i' };
    }

    const options = {
      page: parseInt(page),
      limit: parseInt(limit),
      sort: { [sortBy]: sortOrder === 'desc' ? -1 : 1 }
    };

    const positions = await Position.find(filters)
      .sort(options.sort)
      .limit(options.limit * options.page)
      .skip((options.page - 1) * options.limit);

    const total = await Position.countDocuments(filters);

    res.json({
      success: true,
      data: {
        positions,
        pagination: {
          page: options.page,
          limit: options.limit,
          total,
          pages: Math.ceil(total / options.limit)
        }
      }
    });

  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∞–¥:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// @route   GET /api/positions/:id
// @desc    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–æ—Å–∞–¥–∏
// @access  Private
router.get('/:id', authenticateToken, async (req, res) => {
  try {
    const position = await Position.findById(req.params.id);

    if (!position) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ—Å–∞–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    res.json({
      success: true,
      data: position
    });

  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∞–¥–∏:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// @route   GET /api/positions/:id/statistics
// @desc    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–∞–¥–∏
// @access  Private
router.get('/:id/statistics', authenticateToken, async (req, res) => {
  try {
    const position = await Position.findById(req.params.id);

    if (!position) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ—Å–∞–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    const statistics = await position.getStatistics();

    res.json({
      success: true,
      data: {
        position: {
          _id: position._id,
          title: position.title,
          department: position.department
        },
        statistics
      }
    });

  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–∞–¥–∏:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// @route   POST /api/positions
// @desc    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ø–æ—Å–∞–¥–∏
// @access  Private (Admin only)
router.post('/', 
  authenticateToken,
  requirePermission('manage_positions'),
  logUserAction('—Å—Ç–≤–æ—Ä–∏–≤ –ø–æ—Å–∞–¥—É'),
  async (req, res) => {
    try {
      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
      const { error, value } = createPositionSchema.validate(req.body);
      if (error) {
        return res.status(400).json({
          success: false,
          message: error.details[0].message
        });
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞–∑–≤–∏
      const existingPosition = await Position.findOne({ title: value.title });
      if (existingPosition) {
        return res.status(400).json({
          success: false,
          message: '–ü–æ—Å–∞–¥–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î'
        });
      }

      // –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      logger.debug('üîç –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑–∞–ø–∏—Ç—É:', JSON.stringify(req.body, null, 2));
    logger.debug('üîç –í–∞–ª—ñ–¥–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ:', JSON.stringify(value, null, 2));
    logger.debug('üîç reportingTo –∑–Ω–∞—á–µ–Ω–Ω—è:', value.reportingTo);
    logger.debug('üîç reportingTo —Ç–∏–ø:', typeof value.reportingTo);

      // –û–±—Ä–æ–±–∫–∞ reportingTo - —è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ null
      const processedValue = {
        ...value,
        reportingTo: value.reportingTo && value.reportingTo.trim() !== '' ? value.reportingTo : null
      };

      logger.debug('üîç –û–±—Ä–æ–±–ª–µ–Ω—ñ –¥–∞–Ω—ñ:', JSON.stringify(processedValue, null, 2));

      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∞–¥–∏
      const position = new Position({
        ...processedValue,
        createdBy: req.user._id
      });
      await position.save();

      res.status(201).json({
        success: true,
        message: '–ü–æ—Å–∞–¥—É —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ',
        data: position
      });

    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∞–¥–∏:', error);
      res.status(500).json({
        success: false,
        message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }
);

// @route   PUT /api/positions/:id
// @desc    –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–∞–¥–∏
// @access  Private (Admin only)
router.put('/:id', 
  authenticateToken,
  requirePermission('manage_positions'),
  logUserAction('–æ–Ω–æ–≤–∏–≤ –ø–æ—Å–∞–¥—É'),
  async (req, res) => {
    try {
      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
      const { error, value } = updatePositionSchema.validate(req.body);
      if (error) {
        return res.status(400).json({
          success: false,
          message: error.details[0].message
        });
      }

      const position = await Position.findById(req.params.id);
      if (!position) {
        return res.status(404).json({
          success: false,
          message: '–ü–æ—Å–∞–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
        });
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞–∑–≤–∏ (—è–∫—â–æ –∑–º—ñ–Ω—é—î—Ç—å—Å—è)
      if (value.title && value.title !== position.title) {
        const existingPosition = await Position.findOne({ title: value.title });
        if (existingPosition) {
          return res.status(400).json({
            success: false,
            message: '–ü–æ—Å–∞–¥–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î'
          });
        }
      }

      // –û–±—Ä–æ–±–∫–∞ reportingTo - —è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ null
      const processedValue = {
        ...value,
        reportingTo: value.reportingTo !== undefined ? 
          (value.reportingTo && value.reportingTo.trim() !== '' ? value.reportingTo : null) : 
          undefined
      };

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–∞–¥–∏
      Object.assign(position, processedValue);
      await position.save();

      res.json({
        success: true,
        message: '–ü–æ—Å–∞–¥—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ',
        data: position
      });

    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–∞–¥–∏:', error);
      res.status(500).json({
        success: false,
        message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }
);

// @route   DELETE /api/positions/:id
// @desc    –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å–∞–¥–∏
// @access  Private (Admin only)
router.delete('/:id', 
  authenticateToken,
  requirePermission('manage_positions'),
  logUserAction('–≤–∏–¥–∞–ª–∏–≤ –ø–æ—Å–∞–¥—É'),
  async (req, res) => {
    try {
      const position = await Position.findById(req.params.id);
      if (!position) {
        return res.status(404).json({
          success: false,
          message: '–ü–æ—Å–∞–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
        });
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ —Ü—ñ—î—é –ø–æ—Å–∞–¥–æ—é
      const User = require('../models/User');
      const userCount = await User.countDocuments({ position: position._id });

      if (userCount > 0) {
        return res.status(400).json({
          success: false,
          message: '–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å–∞–¥—É, –æ—Å–∫—ñ–ª—å–∫–∏ –∑ –Ω–µ—é –ø–æ–≤\'—è–∑–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ'
        });
      }

      await position.deleteOne();

      res.json({
        success: true,
        message: '–ü–æ—Å–∞–¥—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ'
      });

    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å–∞–¥–∏:', error);
      res.status(500).json({
        success: false,
        message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }
);

// –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é
router.patch('/:id/activate', 
  authenticateToken,
  requirePermission('manage_positions'),
  [
    param('id')
      .isMongoId()
      .withMessage('ID –ø–æ–∑–∏—Ü—ñ—ó –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–º')
  ],
  logUserAction('–∞–∫—Ç–∏–≤—É–≤–∞–≤ –ø–æ–∑–∏—Ü—ñ—é'),
  async (req, res) => {
    try {
      const { id } = req.params;

      const position = await Position.findById(id);
      if (!position) {
        return res.status(404).json({
          success: false,
          message: '–ü–æ–∑–∏—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
        });
      }

      position.isActive = true;
      position.updatedAt = new Date();
      await position.save();

      res.json({
        success: true,
        message: '–ü–æ–∑–∏—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ',
        data: position
      });
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ—ó:', error);
      res.status(500).json({
        success: false,
        message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ—ó'
      });
    }
  }
);

// @route   GET /api/positions/departments/list
// @desc    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—ñ–¥–¥—ñ–ª—ñ–≤
// @access  Private
router.get('/departments/list', authenticateToken, async (req, res) => {
  try {
    const departments = await Position.distinct('department', { isActive: true });
    
    res.json({
      success: true,
      data: departments.sort()
    });

  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª—ñ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// @route   DELETE /api/positions/bulk/delete
// @desc    –ú–∞—Å–æ–≤–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å–∞–¥
// @access  Private (Admin only)
router.delete('/bulk/delete', 
  authenticateToken,
  requirePermission('manage_positions'),
  [
    body('positionIds')
      .isArray({ min: 1 })
      .withMessage('positionIds –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –Ω–µ–ø—É—Å—Ç–∏–º –º–∞—Å–∏–≤–æ–º'),
    body('positionIds.*')
      .isMongoId()
      .withMessage('–ö–æ–∂–µ–Ω ID –ø–æ—Å–∞–¥–∏ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–º')
  ],
  logUserAction('–º–∞—Å–æ–≤–æ –≤–∏–¥–∞–ª–∏–≤ –ø–æ—Å–∞–¥–∏'),
  positionController.bulkDeletePositions
);

// @route   GET /api/positions/permissions/list
// @desc    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–æ–∑–≤–æ–ª—ñ–≤
// @access  Private (Admin only)
router.get('/permissions/list', 
  authenticateToken,
  requirePermission('manage_positions'),
  async (req, res) => {
    try {
      const permissions = [
        {
          module: 'tickets',
          actions: ['create', 'read', 'update', 'delete', 'assign', 'close']
        },
        {
          module: 'users',
          actions: ['create', 'read', 'update', 'delete', 'manage_roles']
        },
        {
          module: 'positions',
          actions: ['create', 'read', 'update', 'delete', 'manage_permissions']
        },
        {
          module: 'analytics',
          actions: ['read', 'export']
        }
      ];

      res.json({
        success: true,
        data: permissions
      });
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª—ñ–≤:', error);
      res.status(500).json({
        success: false,
        message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª—ñ–≤'
      });
    }
  }
);

// –ü—Ä–æ—Å—Ç–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ—Å–∞–¥ (–¥–ª—è Telegram –±–æ—Ç–∞ —Ç–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É)
router.get('/simple/list', async (req, res) => {
  try {
    const positions = await Position.find({ isActive: { $ne: false } })
      .select('_id title department')
      .sort({ title: 1 })
      .lean();

    res.json({
      success: true,
      data: positions.map(pos => ({
        id: pos._id,
        title: pos.title,
        department: pos.department
      }))
    });
  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ—Å–∞–¥:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –ø–æ—Å–∞–¥'
    });
  }
});

module.exports = router;