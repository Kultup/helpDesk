const express = require('express');
const jwt = require('jsonwebtoken');
const Joi = require('joi');
const User = require('../models/User');
const { authenticateToken } = require('../middleware/auth');
const logger = require('../utils/logger');
const registrationWebSocketService = require('../services/registrationWebSocketService');

const router = express.Router();

// –°—Ö–µ–º–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
const registerSchema = Joi.object({
  email: Joi.string().email().required().messages({
    'string.email': '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email',
    'any.required': 'Email —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
  }),
  password: Joi.string().min(6).required().messages({
    'string.min': '–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤',
    'any.required': '–ü–∞—Ä–æ–ª—å —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
  }),
  firstName: Joi.string().max(50).required().messages({
    'string.max': '–Ü–º\'—è –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 50 —Å–∏–º–≤–æ–ª—ñ–≤',
    'any.required': '–Ü–º\'—è —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
  }),
  lastName: Joi.string().max(50).required().messages({
    'string.max': '–ü—Ä—ñ–∑–≤–∏—â–µ –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 50 —Å–∏–º–≤–æ–ª—ñ–≤',
    'any.required': '–ü—Ä—ñ–∑–≤–∏—â–µ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
  }),
  position: Joi.string().required().messages({
    'any.required': '–ü–æ—Å–∞–¥–∞ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ—é'
  }),
  department: Joi.string().required().messages({
    'any.required': '–í—ñ–¥–¥—ñ–ª —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
  }),
  city: Joi.string().required().messages({
    'any.required': '–ú—ñ—Å—Ç–æ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
  }),
  phone: Joi.string().pattern(/^\+?[1-9]\d{1,14}$/).optional().messages({
    'string.pattern.base': '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É'
  }),
  telegramId: Joi.string().optional().messages({
    'string.base': 'Telegram ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ä—è–¥–∫–æ–º'
  })
});

const loginSchema = Joi.object({
  email: Joi.string().email().required().messages({
    'string.email': '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email',
    'any.required': 'Email —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
  }),
  password: Joi.string().required().messages({
    'any.required': '–ü–∞—Ä–æ–ª—å —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
  })
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó JWT —Ç–æ–∫–µ–Ω–∞
const generateToken = (userId) => {
  return jwt.sign(
    { userId },
    process.env.JWT_SECRET,
    { expiresIn: process.env.JWT_EXPIRES_IN || '7d' }
  );
};

// @route   POST /api/auth/register
// @desc    –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
// @access  Public
router.post('/register', async (req, res) => {
  try {
    logger.info('üöÄ –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
    const { error, value } = registerSchema.validate(req.body);
    if (error) {
      return res.status(400).json({
        success: false,
        message: error.details[0].message
      });
    }

    const { email, password, firstName, lastName, position, department, city, phone, telegramId } = value;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î (–≤–∫–ª—é—á–∞—é—á–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç–∞ pending)
    const existingUser = await User.findOne({ 
      email: email.toLowerCase() 
    });
    
    if (existingUser) {
      // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î —ñ –º–∞—î —Å—Ç–∞—Ç—É—Å pending
      if (existingUser.registrationStatus === 'pending') {
        return res.status(400).json({
          success: false,
          message: '–ó–∞—è–≤–∫–∞ –∑ —Ü–∏–º email –≤–∂–µ –ø–æ–¥–∞–Ω–∞ —ñ –æ—á—ñ–∫—É—î —Ä–æ–∑–≥–ª—è–¥—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
        });
      }
      
      // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î —ñ –º–∞—î —Å—Ç–∞—Ç—É—Å rejected
      if (existingUser.registrationStatus === 'rejected') {
        return res.status(400).json({
          success: false,
          message: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑ —Ü–∏–º email –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
        });
      }
      
      // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î —ñ –∞–∫—Ç–∏–≤–Ω–∏–π
      if (existingUser.isActive && existingUser.registrationStatus === 'approved') {
        return res.status(400).json({
          success: false,
          message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π'
        });
      }
      
      // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î –∞–ª–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π (–º'—è–∫–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π)
      if (!existingUser.isActive && existingUser.deletedAt) {
        return res.status(400).json({
          success: false,
          message: '–¶–µ–π email –±—É–≤ —Ä–∞–Ω—ñ—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É'
        });
      }
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º pending
    const user = new User({
      email: email.toLowerCase(),
      password,
      firstName,
      lastName,
      position,
      department,
      city,
      phone,
      telegramId,
      registrationStatus: 'pending',
      isActive: false
    });

    await user.save();
    logger.info('üíæ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:', user.email);

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    try {
      logger.info('üì° –°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é');
      logger.info('üîç WebSocket —Å–µ—Ä–≤—ñ—Å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π:', !!registrationWebSocketService.io);
      
      await registrationWebSocketService.notifyNewRegistrationRequest(user);
      logger.info('‚úÖ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', error);
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–º–∏ –ø–æ–ª—è–º–∏
    const populatedUser = await User.findById(user._id)
      .populate('position')
      .populate('city')
      .select('-password');

    res.status(201).json({
      success: true,
      message: '–ó–∞—è–≤–∫—É –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –ø–æ–¥–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
      data: {
        user: populatedUser
      }
    });

  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó'
    });
  }
});

// @route   POST /api/auth/login
// @desc    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
// @access  Public
router.post('/login', async (req, res) => {
  try {
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
    const { error, value } = loginSchema.validate(req.body);
    if (error) {
      return res.status(400).json({
        success: false,
        message: error.details[0].message
      });
    }

    const { email, password } = value;

    // –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const user = await User.findOne({ email })
      .select('+password')
      .populate('position')
      .populate('city');

    if (!user) {
      return res.status(401).json({
        success: false,
        message: '–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    if (user.registrationStatus === 'pending') {
      return res.status(401).json({
        success: false,
        message: '–í–∞—à–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É rejected –≤–∏–¥–∞–ª–µ–Ω–∞, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤–∏–¥–∞–ª—è—é—Ç—å—Å—è –∑ –ë–î

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∞–∫–∞—É–Ω—Ç–∞
    if (!user.isActive) {
      return res.status(401).json({
        success: false,
        message: '–ê–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    const bcrypt = require('bcryptjs');
    const isPasswordValid = await bcrypt.compare(password, user.password);
    
    if (!isPasswordValid) {
      return res.status(401).json({
        success: false,
        message: '–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å'
      });
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—Ö–æ–¥—É
    user.lastLogin = new Date();
    await user.save();

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞
    const token = generateToken(user._id);

    res.json({
      success: true,
      message: '–£—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è',
      data: {
        token,
        user: {
          _id: user._id,
          email: user.email,
          firstName: user.firstName,
          lastName: user.lastName,
          role: user.role,
          department: user.department,
          position: user.position,
          city: user.city,
          isActive: user.isActive,
          lastLogin: user.lastLogin
        }
      }
    });

  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó'
    });
  }
});

// @route   GET /api/auth/me
// @desc    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
// @access  Private
router.get('/me', authenticateToken, async (req, res) => {
  try {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±–µ–∑ –ø–∞—Ä–æ–ª—è
    const userWithoutPassword = {
      _id: req.user._id,
      email: req.user.email,
      firstName: req.user.firstName,
      lastName: req.user.lastName,
      role: req.user.role,
      position: req.user.position,
      city: req.user.city,
      telegramId: req.user.telegramId,
      isActive: req.user.isActive,
      lastLogin: req.user.lastLogin,
      createdAt: req.user.createdAt,
      updatedAt: req.user.updatedAt
    };

    res.json({
      success: true,
      data: userWithoutPassword
    });
  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// @route   POST /api/auth/refresh
// @desc    –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
// @access  Private
router.post('/refresh', authenticateToken, async (req, res) => {
  try {
    const token = generateToken(req.user._id);
    
    res.json({
      success: true,
      message: '–¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ',
      data: {
        token
      }
    });
  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// @route   POST /api/auth/logout
// @desc    –í–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏
// @access  Private
router.post('/logout', authenticateToken, async (req, res) => {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É —Ç—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ç–æ–∫–µ–Ω –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
    // –∞–±–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏—Ö—ñ–¥ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    
    res.json({
      success: true,
      message: '–£—Å–ø—ñ—à–Ω–∏–π –≤–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏'
    });
  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

module.exports = router;