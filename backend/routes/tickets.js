const express = require('express');
const router = express.Router();
const logger = require('../utils/logger');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const Joi = require('joi');
const { body, query, param } = require('express-validator');
const Ticket = require('../models/Ticket');
const ticketController = require('../controllers/ticketController');
const commentController = require('../controllers/commentController');
const attachmentController = require('../controllers/attachmentController');
const timeEntryController = require('../controllers/timeEntryController');
const tagController = require('../controllers/tagController');
const { authenticateToken, logUserAction, requirePermission } = require('../middleware/auth');
const adminAuth = require('../middleware/adminAuth');
const { rateLimits } = require('../middleware');
const telegramService = require('../services/telegramServiceInstance');

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è multer –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadPath = path.join(__dirname, '../uploads/tickets');
    if (!fs.existsSync(uploadPath)) {
      fs.mkdirSync(uploadPath, { recursive: true });
    }
    cb(null, uploadPath);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({
  storage,
  limits: {
    fileSize: parseInt(process.env.MAX_FILE_SIZE) || 5 * 1024 * 1024 // 5MB
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|gif|pdf|doc|docx|txt/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);
    
    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É'));
    }
  }
});

// –°—Ö–µ–º–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
const createTicketSchema = Joi.object({
  title: Joi.string().max(200).required().messages({
    'string.max': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 200 —Å–∏–º–≤–æ–ª—ñ–≤',
    'any.required': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
  }),
  description: Joi.string().max(2000).required().messages({
    'string.max': '–û–ø–∏—Å –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 2000 —Å–∏–º–≤–æ–ª—ñ–≤',
    'any.required': '–û–ø–∏—Å —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
  }),
  priority: Joi.string().valid('low', 'medium', 'high').default('medium'),
  category: Joi.string().valid('technical', 'account', 'billing', 'general').default('general'),
  city: Joi.string().required().messages({
    'any.required': '–ú—ñ—Å—Ç–æ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
  }),
  assignedTo: Joi.string().optional(),
  tags: Joi.array().items(Joi.string()).optional(),
  estimatedTime: Joi.number().min(0).optional(),
  dueDate: Joi.date().optional()
});

const updateTicketSchema = Joi.object({
  title: Joi.string().max(200).optional(),
  description: Joi.string().max(2000).optional(),
  status: Joi.string().valid('open', 'in_progress', 'resolved', 'closed').optional(),
  priority: Joi.string().valid('low', 'medium', 'high').optional(),
  category: Joi.string().valid('technical', 'account', 'billing', 'general').optional(),
  assignedTo: Joi.string().allow(null).optional(),
  tags: Joi.array().items(Joi.string()).optional(),
  estimatedTime: Joi.number().min(0).allow(null).optional(),
  actualTime: Joi.number().min(0).allow(null).optional(),
  dueDate: Joi.date().allow(null).optional()
});

const commentSchema = Joi.object({
  content: Joi.string().max(1000).required().messages({
    'string.max': '–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 1000 —Å–∏–º–≤–æ–ª—ñ–≤',
    'any.required': '–ó–º—ñ—Å—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—è —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
  }),
  isInternal: Joi.boolean().default(false)
});

// @route   GET /api/tickets
// @desc    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–∏–∫–µ—Ç—ñ–≤ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
// @access  Private
router.get('/', authenticateToken, async (req, res) => {
  try {
    const {
      page = 1,
      limit = 10,
      status,
      priority,
      category,
      city,
      assignedTo,
      createdBy,
      search,
      sortBy = 'createdAt',
      sortOrder = 'desc'
    } = req.query;

    // –ü–æ–±—É–¥–æ–≤–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    const filters = {};
    
    if (status) filters.status = status;
    if (priority) filters.priority = priority;
    if (category) filters.category = category;
    if (city) filters.city = city;
    if (assignedTo) filters.assignedTo = assignedTo;
    if (createdBy) filters.createdBy = createdBy;
    
    // –ü–æ—à—É–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É —Ç–∞ –æ–ø–∏—Å—É
    if (search) {
      filters.$or = [
        { title: { $regex: search, $options: 'i' } },
        { description: { $regex: search, $options: 'i' } }
      ];
    }
    
    // –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if (req.user.role !== 'admin') {
      filters.$or = [
        { createdBy: req.user._id },
        { assignedTo: req.user._id }
      ];
    }

    const options = {
      page: parseInt(page),
      limit: parseInt(limit),
      sort: { [sortBy]: sortOrder === 'desc' ? -1 : 1 },
      populate: [
        { path: 'createdBy', select: 'firstName lastName email' },
        { path: 'assignedTo', select: 'firstName lastName email' },
        { path: 'city', select: 'name region' }
      ]
    };

    const tickets = await Ticket.paginate(filters, options);

    res.json({
      success: true,
      data: tickets.docs,
      pagination: {
        currentPage: tickets.page,
        totalPages: tickets.totalPages,
        totalItems: tickets.totalDocs,
        hasNext: tickets.hasNextPage,
        hasPrev: tickets.hasPrevPage
      }
    });

  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∏–∫–µ—Ç—ñ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});



// –ï–∫—Å–ø–æ—Ä—Ç —Ç—ñ–∫–µ—Ç—ñ–≤
router.get('/export', authenticateToken, ticketController.exportTickets);

// @route   GET /api/tickets/:id
// @desc    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç—É
// @access  Private
router.get('/:id', authenticateToken, async (req, res) => {
  try {
    const ticket = await Ticket.findById(req.params.id)
      .populate('createdBy', 'firstName lastName email')
      .populate('assignedTo', 'firstName lastName email')
      .populate('city', 'name region')
      .populate('comments.author', 'firstName lastName email');

    if (!ticket) {
      return res.status(404).json({
        success: false,
        message: '–¢–∏–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin' && 
        ticket.createdBy._id.toString() !== req.user._id.toString() &&
        (!ticket.assignedTo || ticket.assignedTo._id.toString() !== req.user._id.toString())) {
      return res.status(403).json({
        success: false,
        message: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'
      });
    }

    res.json({
      success: true,
      data: ticket
    });

  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∏–∫–µ—Ç—É:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// @route   POST /api/tickets
// @desc    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç—É
// @access  Private
router.post('/', 
  authenticateToken, 
  rateLimits.createTicket,
  upload.array('attachments', 5),
  logUserAction('—Å—Ç–≤–æ—Ä–∏–≤ —Ç–∏–∫–µ—Ç'),
  async (req, res) => {
    try {
      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
      const { error, value } = createTicketSchema.validate(req.body);
      if (error) {
        return res.status(400).json({
          success: false,
          message: error.details[0].message
        });
      }

      // –û–±—Ä–æ–±–∫–∞ –≤–∫–ª–∞–¥–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
      const attachments = req.files ? req.files.map(file => ({
        filename: file.filename,
        originalName: file.originalname,
        path: file.path,
        size: file.size,
        mimetype: file.mimetype
      })) : [];

      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–∫–µ—Ç—É
      const ticket = new Ticket({
        ...value,
        createdBy: req.user._id,
        attachments,
        source: 'web'
      });

      await ticket.save();

      // –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      await ticket.populate([
        { path: 'createdBy', select: 'firstName lastName email' },
        { path: 'assignedTo', select: 'firstName lastName email' },
        { path: 'city', select: 'name region' }
      ]);

      res.status(201).json({
        success: true,
        message: '–¢–∏–∫–µ—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ',
        data: ticket
      });

    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–∫–µ—Ç—É:', error);
      res.status(500).json({
        success: false,
        message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }
);

// @route   PUT /api/tickets/:id
// @desc    –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∏–∫–µ—Ç—É
// @access  Private
router.put('/:id', 
  authenticateToken,
  logUserAction('–æ–Ω–æ–≤–∏–≤ —Ç–∏–∫–µ—Ç'),
  async (req, res) => {
    try {
      logger.info(`üéØ –ü–û–ß–ê–¢–û–ö updateTicket –¥–ª—è —Ç—ñ–∫–µ—Ç–∞ ${req.params.id}, body:`, JSON.stringify(req.body));
      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
      const { error, value } = updateTicketSchema.validate(req.body);
      if (error) {
        return res.status(400).json({
          success: false,
          message: error.details[0].message
        });
      }

      const ticket = await Ticket.findById(req.params.id);
      if (!ticket) {
        return res.status(404).json({
          success: false,
          message: '–¢–∏–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
        });
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É
      if (req.user.role !== 'admin' && 
          ticket.createdBy.toString() !== req.user._id.toString() &&
          (!ticket.assignedTo || ticket.assignedTo.toString() !== req.user._id.toString())) {
        return res.status(403).json({
          success: false,
          message: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'
        });
      }

      // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–º—ñ–Ω
      const previousStatus = ticket.status;
      logger.info(`üöÄ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É ${req.params.id}: –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞—Ç—É—Å="${previousStatus}", –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å="${value.status || '–Ω–µ –∑–º—ñ–Ω–µ–Ω–æ'}"`);

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∏–∫–µ—Ç—É
      Object.assign(ticket, value);
      await ticket.save();

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å
      if (value.status && value.status !== previousStatus) {
        logger.info(`‚úÖ –°—Ç–∞—Ç—É—Å —Ç—ñ–∫–µ—Ç—É –∑–º—ñ–Ω–∏–≤—Å—è –∑ "${previousStatus}" –Ω–∞ "${value.status}". –í—ñ–¥–ø—Ä–∞–≤–ª—è—é —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è...`);
        try {
          // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É
          await telegramService.sendTicketStatusNotificationToGroup(
            ticket,
            previousStatus,
            value.status,
            req.user
          );
          
          // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
          await telegramService.sendTicketNotification(ticket, 'updated');
          logger.info(`üì§ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);
        } catch (error) {
          logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', error);
          // –ù–µ –∑—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏
        }
      } else {
        logger.info(`‚ùå –°—Ç–∞—Ç—É—Å —Ç—ñ–∫–µ—Ç—É –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è, —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è`);
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è —Ç—ñ–∫–µ—Ç–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Ç—É –Ω–∞ –æ—Ü—ñ–Ω–∫—É —á–µ—Ä–µ–∑ Telegram
      const isTicketClosed = value.status && (value.status === 'resolved' || value.status === 'closed');
      const wasTicketOpen = previousStatus && previousStatus !== 'resolved' && previousStatus !== 'closed';
      
      logger.info(`üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –æ—Ü—ñ–Ω–∫–∏:`);
      logger.info(`   - value.status: ${value.status}`);
      logger.info(`   - previousStatus: ${previousStatus}`);
      logger.info(`   - isTicketClosed: ${isTicketClosed}`);
      logger.info(`   - wasTicketOpen: ${wasTicketOpen}`);
      logger.info(`   - –£–º–æ–≤–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è: ${isTicketClosed && wasTicketOpen}`);
      
      // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –æ—Ü—ñ–Ω–∫—É —è–∫–æ—Å—Ç—ñ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ —Ç—ñ–∫–µ—Ç—É
      if (isTicketClosed && wasTicketOpen) {
        try {
          logger.info(`üìä –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –æ—Ü—ñ–Ω–∫—É —è–∫–æ—Å—Ç—ñ –¥–ª—è —Ç—ñ–∫–µ—Ç—É ${req.params.id}`);
          logger.info(`üîç –°—Ç–∞—Ç—É—Å qualityRating: ratingRequested=${ticket.qualityRating.ratingRequested}, hasRating=${ticket.qualityRating.hasRating}`);
          
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –±—É–ª–æ –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ü—ñ–Ω–∫—É
          if (!ticket.qualityRating.ratingRequested) {
            await telegramService.sendQualityRatingRequest(ticket);
            
            // –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ü—ñ–Ω–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
            ticket.qualityRating.ratingRequested = true;
            ticket.qualityRating.requestedAt = new Date();
            await ticket.save();
            
            logger.info(`‚úÖ –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ü—ñ–Ω–∫—É —è–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);
          } else {
            logger.info(`‚ÑπÔ∏è –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ü—ñ–Ω–∫—É –≤–∂–µ –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω—ñ—à–µ (requestedAt: ${ticket.qualityRating.requestedAt})`);
          }
        } catch (error) {
          logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Ç—É –Ω–∞ –æ—Ü—ñ–Ω–∫—É —è–∫–æ—Å—Ç—ñ:', error);
          // –ù–µ –∑—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ü—ñ–Ω–∫—É –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏
        }
      }
      // –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      await ticket.populate([
        { path: 'createdBy', select: 'firstName lastName email' },
        { path: 'assignedTo', select: 'firstName lastName email' },
        { path: 'city', select: 'name region' }
      ]);

      res.json({
        success: true,
        message: '–¢–∏–∫–µ—Ç —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ',
        data: ticket
      });

    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∏–∫–µ—Ç—É:', error);
      res.status(500).json({
        success: false,
        message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }
);

// @route   DELETE /api/tickets/:id
// @desc    –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–∫–µ—Ç—É
// @access  Private (Admin only)
router.delete('/:id', 
  authenticateToken,
  requirePermission('delete_tickets'),
  logUserAction('–≤–∏–¥–∞–ª–∏–≤ —Ç–∏–∫–µ—Ç'),
  async (req, res) => {
    try {
      const ticket = await Ticket.findById(req.params.id);
      if (!ticket) {
        return res.status(404).json({
          success: false,
          message: '–¢–∏–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
        });
      }

      // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
      ticket.attachments.forEach(attachment => {
        if (fs.existsSync(attachment.path)) {
          fs.unlinkSync(attachment.path);
        }
      });

      await ticket.deleteOne();

      res.json({
        success: true,
        message: '–¢–∏–∫–µ—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ'
      });

    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–∫–µ—Ç—É:', error);
      res.status(500).json({
        success: false,
        message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }
);

// @route   POST /api/tickets/:id/comments
// @desc    –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è –¥–æ —Ç–∏–∫–µ—Ç—É
// @access  Private
router.post('/:id/comments',
  authenticateToken,
  upload.array('attachments', 3),
  logUserAction('–¥–æ–¥–∞–≤ –∫–æ–º–µ–Ω—Ç–∞—Ä'),
  async (req, res) => {
    try {
      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
      const { error, value } = commentSchema.validate(req.body);
      if (error) {
        return res.status(400).json({
          success: false,
          message: error.details[0].message
        });
      }

      const ticket = await Ticket.findById(req.params.id);
      if (!ticket) {
        return res.status(404).json({
          success: false,
          message: '–¢–∏–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
        });
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É
      if (req.user.role !== 'admin' && 
          ticket.createdBy.toString() !== req.user._id.toString() &&
          (!ticket.assignedTo || ticket.assignedTo.toString() !== req.user._id.toString())) {
        return res.status(403).json({
          success: false,
          message: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'
        });
      }

      // –û–±—Ä–æ–±–∫–∞ –≤–∫–ª–∞–¥–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
      const attachments = req.files ? req.files.map(file => ({
        filename: file.filename,
        originalName: file.originalname,
        path: file.path,
        size: file.size,
        mimetype: file.mimetype
      })) : [];

      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
      const comment = {
        author: req.user._id,
        content: value.content,
        isInternal: value.isInternal,
        attachments
      };

      ticket.comments.push(comment);
      await ticket.save();

      // –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
      await ticket.populate('comments.author', 'firstName lastName email');

      const newComment = ticket.comments[ticket.comments.length - 1];

      res.status(201).json({
        success: true,
        message: '–ö–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ',
        data: newComment
      });

    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è:', error);
      res.status(500).json({
        success: false,
        message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }
);

// –ú–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∞—Å—É
// –ü–æ—á–∞—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –¥–ª—è —Ç—ñ–∫–µ—Ç—É
router.post('/:id/time-entries/start', authenticateToken, timeEntryController.startTimeTracking);

// –ó—É–ø–∏–Ω–∏—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –¥–ª—è —Ç—ñ–∫–µ—Ç—É
router.post('/:id/time-entries/stop', authenticateToken, timeEntryController.stopTimeTracking);

// –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–ø–∏—Å–∏ —á–∞—Å—É –¥–ª—è —Ç—ñ–∫–µ—Ç—É
router.get('/:id/time-entries', authenticateToken, timeEntryController.getTimeEntries);

// –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É —Å–µ—Å—ñ—é –¥–ª—è —Ç—ñ–∫–µ—Ç—É
router.get('/:id/time-entries/active', authenticateToken, timeEntryController.getActiveSession);

// –û–Ω–æ–≤–∏—Ç–∏ –∑–∞–ø–∏—Å —á–∞—Å—É
router.put('/:id/time-entries/:entryId', authenticateToken, timeEntryController.updateTimeEntry);

// –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å —á–∞—Å—É
router.delete('/:id/time-entries/:entryId', authenticateToken, timeEntryController.deleteTimeEntry);

// –ú–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–µ–≥–∞–º–∏ —Ç—ñ–∫–µ—Ç—ñ–≤
// –î–æ–¥–∞—Ç–∏ —Ç–µ–≥ –¥–æ —Ç—ñ–∫–µ—Ç—É
router.post('/:ticketId/tags/:tagId', authenticateToken, tagController.addTagToTicket);

// –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–≥ –∑ —Ç—ñ–∫–µ—Ç—É
router.delete('/:ticketId/tags/:tagId', authenticateToken, tagController.removeTagFromTicket);

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–≥–∏ —Ç—ñ–∫–µ—Ç—É
router.get('/:ticketId/tags', authenticateToken, tagController.getTicketTags);

// –ú–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –Ω–æ—Ç–∞—Ç–∫–∞–º–∏ —Ç—ñ–∫–µ—Ç—ñ–≤
const noteController = require('../controllers/noteController');

// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏ —Ç—ñ–∫–µ—Ç—É
router.get('/:id/notes', authenticateToken, noteController.getNotesByTicket);

// –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –Ω–æ—Ç–∞—Ç–∫—É
router.get('/:id/notes/:noteId', authenticateToken, noteController.getNoteById);

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –Ω–æ—Ç–∞—Ç–∫—É
router.post('/:id/notes', authenticateToken, noteController.createNote);

// –û–Ω–æ–≤–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É
router.put('/:id/notes/:noteId', authenticateToken, noteController.updateNote);

// –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É (soft delete)
router.delete('/:id/notes/:noteId', authenticateToken, noteController.deleteNote);

// –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω—É –Ω–æ—Ç–∞—Ç–∫—É
router.patch('/:id/notes/:noteId/restore', authenticateToken, noteController.restoreNote);

// –î–æ–¥–∞—Ç–∏ —Ç–µ–≥ –¥–æ –Ω–æ—Ç–∞—Ç–∫–∏
router.post('/:id/notes/:noteId/tags', authenticateToken, noteController.addTag);

// –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–≥ –∑ –Ω–æ—Ç–∞—Ç–∫–∏
router.delete('/:id/notes/:noteId/tags/:tag', authenticateToken, noteController.removeTag);

// –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–æ—Ç–∞—Ç–∫–∏
router.patch('/:id/notes/:noteId/reminder', authenticateToken, noteController.setReminder);

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–æ—Ç–∞—Ç–æ–∫
router.get('/:id/notes/statistics', authenticateToken, noteController.getNotesStatistics);



// –ú–∞—Ä—à—Ä—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—ñ–∫–µ—Ç—ñ–≤
const ticketHistoryController = require('../controllers/ticketHistoryController');

// GET /api/tickets/:id/history - –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–º—ñ–Ω —Ç—ñ–∫–µ—Ç—É
router.get('/:id/history', authenticateToken, ticketHistoryController.getTicketHistory);

// GET /api/tickets/:id/history/stats - –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–º—ñ–Ω —Ç—ñ–∫–µ—Ç—É
router.get('/:id/history/stats', authenticateToken, ticketHistoryController.getTicketChangeStats);

module.exports = router;