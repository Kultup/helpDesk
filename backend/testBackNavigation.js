const TelegramService = require('./services/telegramService');

// –ú–æ–∫–∞—î–º–æ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
class MockBot {
  constructor() {
    this.messages = [];
  }

  async sendMessage(chatId, text, options = {}) {
    this.messages.push({
      chatId,
      text,
      options,
      timestamp: new Date()
    });
    console.log(`üì§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ ${chatId}: ${text.substring(0, 50)}${text.length > 50 ? '...' : ''}`);
    return { message_id: Date.now() };
  }

  getLastMessage() {
    return this.messages[this.messages.length - 1];
  }

  clearMessages() {
    this.messages = [];
  }
}

async function testCompleteNavigation() {
  console.log('üß™ –ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó "–ù–∞–∑–∞–¥" —É Telegram –±–æ—Ç—ñ...\n');
  
  const telegramService = new TelegramService();
  const mockBot = new MockBot();
  
  // –ó–∞–º—ñ–Ω—é—î–º–æ –±–æ—Ç–∞ –Ω–∞ –º–æ–∫
  telegramService.bot = mockBot;
  
  const testChatId = 123456789;
  const testUser = {
    _id: 'test_user_id',
    telegramId: testChatId,
    firstName: 'Test',
    lastName: 'User',
    email: 'test@example.com',
    registrationStatus: 'approved',
    isActive: true,
    department: 'IT Department',
    city: { name: '–ö–∏—ó–≤' },
    position: { title: 'Developer' }
  };

  // –ú–æ–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  telegramService.findUserByTelegramId = async (chatId) => {
    return testUser;
  };

  try {
    console.log('üîÑ –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è');
    console.log('‚ïê'.repeat(50));
    
    // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
    telegramService.userStates.delete(testChatId);
    mockBot.clearMessages();
    
    // /start -> main
    await telegramService.handleStartCommand(testChatId);
    console.log('üìç –ü—ñ—Å–ª—è /start:', telegramService.getCurrentState(testChatId));
    console.log('üìö –°—Ç–µ–∫:', telegramService.userStates.get(testChatId));
    
    // main -> my_tickets
    await telegramService.handleCallbackQuery(testChatId, 'my_tickets', testUser, true);
    console.log('üìç –ü—ñ—Å–ª—è my_tickets:', telegramService.getCurrentState(testChatId));
    console.log('üìö –°—Ç–µ–∫:', telegramService.userStates.get(testChatId));
    
    // my_tickets -> back -> main
    mockBot.clearMessages();
    await telegramService.handleCallbackQuery(testChatId, 'back', testUser, true);
    console.log('üìç –ü—ñ—Å–ª—è back:', telegramService.getCurrentState(testChatId));
    console.log('üìö –°—Ç–µ–∫:', telegramService.userStates.get(testChatId));
    
    const lastMessage = mockBot.getLastMessage();
    const test1Result = lastMessage && lastMessage.text.includes('–í—ñ—Ç–∞—î–º–æ');
    console.log(test1Result ? '‚úÖ –¢–µ—Å—Ç 1 –ü–†–û–ô–î–ï–ù–û' : '‚ùå –¢–µ—Å—Ç 1 –ü–†–û–í–ê–õ–ï–ù–û');
    console.log('');

    console.log('üîÑ –¢–µ—Å—Ç 2: –ì–ª–∏–±–æ–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è');
    console.log('‚ïê'.repeat(50));
    
    // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
    telegramService.userStates.delete(testChatId);
    
    // main -> my_tickets -> create_ticket -> settings
    await telegramService.handleStartCommand(testChatId);
    await telegramService.handleCallbackQuery(testChatId, 'my_tickets', testUser, true);
    await telegramService.handleCallbackQuery(testChatId, 'create_ticket', testUser, true);
    await telegramService.handleCallbackQuery(testChatId, 'settings', testUser, true);
    
    console.log('üìö –°—Ç–µ–∫ –ø—ñ—Å–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:', telegramService.userStates.get(testChatId));
    
    // settings -> back -> create_ticket
    await telegramService.handleCallbackQuery(testChatId, 'back', testUser, true);
    const state1 = telegramService.getCurrentState(testChatId);
    console.log('üìç –ü—ñ—Å–ª—è 1-–≥–æ back:', state1);
    
    // create_ticket -> back -> my_tickets
    await telegramService.handleCallbackQuery(testChatId, 'back', testUser, true);
    const state2 = telegramService.getCurrentState(testChatId);
    console.log('üìç –ü—ñ—Å–ª—è 2-–≥–æ back:', state2);
    
    // my_tickets -> back -> main
    mockBot.clearMessages();
    await telegramService.handleCallbackQuery(testChatId, 'back', testUser, true);
    const state3 = telegramService.getCurrentState(testChatId);
    console.log('üìç –ü—ñ—Å–ª—è 3-–≥–æ back:', state3);
    
    const finalMessage = mockBot.getLastMessage();
    const test2Result = state1 === 'create_ticket' && state2 === 'my_tickets' && 
                       state3 === 'main' && finalMessage && finalMessage.text.includes('–í—ñ—Ç–∞—î–º–æ');
    console.log(test2Result ? '‚úÖ –¢–µ—Å—Ç 2 –ü–†–û–ô–î–ï–ù–û' : '‚ùå –¢–µ—Å—Ç 2 –ü–†–û–í–ê–õ–ï–ù–û');
    console.log('');

    console.log('üîÑ –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤');
    console.log('‚ïê'.repeat(50));
    
    // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
    telegramService.userStates.delete(testChatId);
    
    // main -> my_tickets -> my_tickets (–ø–æ–≤—Ç–æ—Ä–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥)
    await telegramService.handleStartCommand(testChatId);
    await telegramService.handleCallbackQuery(testChatId, 'my_tickets', testUser, true);
    console.log('üìö –°—Ç–µ–∫ –ø—ñ—Å–ª—è 1-–≥–æ my_tickets:', telegramService.userStates.get(testChatId));
    
    await telegramService.handleCallbackQuery(testChatId, 'my_tickets', testUser, true);
    console.log('üìö –°—Ç–µ–∫ –ø—ñ—Å–ª—è 2-–≥–æ my_tickets:', telegramService.userStates.get(testChatId));
    
    const stack = telegramService.userStates.get(testChatId);
    const test3Result = stack.length === 2 && stack[0] === 'main' && stack[1] === 'my_tickets';
    console.log(test3Result ? '‚úÖ –¢–µ—Å—Ç 3 –ü–†–û–ô–î–ï–ù–û (–¥—É–±–ª—ñ–∫–∞—Ç–∏ –Ω–µ –¥–æ–¥–∞—é—Ç—å—Å—è)' : '‚ùå –¢–µ—Å—Ç 3 –ü–†–û–í–ê–õ–ï–ù–û');
    console.log('');

    console.log('üîÑ –¢–µ—Å—Ç 4: –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º —Å—Ç–µ–∫–æ–º');
    console.log('‚ïê'.repeat(50));
    
    // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø–æ–≤–Ω—ñ—Å—Ç—é
    telegramService.userStates.delete(testChatId);
    
    // –°–ø—Ä–æ–±—É—î–º–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ "–ù–∞–∑–∞–¥" –±–µ–∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É
    mockBot.clearMessages();
    await telegramService.handleCallbackQuery(testChatId, 'back', testUser, true);
    const emptyStackState = telegramService.getCurrentState(testChatId);
    console.log('üìç –°—Ç–∞–Ω –ø—ñ—Å–ª—è back –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º —Å—Ç–µ–∫–æ–º:', emptyStackState);
    
    const test4Result = emptyStackState === 'main';
    console.log(test4Result ? '‚úÖ –¢–µ—Å—Ç 4 –ü–†–û–ô–î–ï–ù–û' : '‚ùå –¢–µ—Å—Ç 4 –ü–†–û–í–ê–õ–ï–ù–û');
    console.log('');

    // –ü—ñ–¥—Å—É–º–æ–∫
    console.log('üìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø');
    console.log('‚ïê'.repeat(50));
    const allTestsPassed = test1Result && test2Result && test3Result && test4Result;
    
    if (allTestsPassed) {
      console.log('üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–û –£–°–ü–Ü–®–ù–û!');
      console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î');
      console.log('‚úÖ –ì–ª–∏–±–æ–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î');
      console.log('‚úÖ –î—É–±–ª—ñ–∫–∞—Ç–∏ –Ω–µ –¥–æ–¥–∞—é—Ç—å—Å—è');
      console.log('‚úÖ –û–±—Ä–æ–±–∫–∞ –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ —Å—Ç–µ–∫—É –ø—Ä–∞—Ü—é—î');
    } else {
      console.log('‚ùå –î–ï–Ø–ö–Ü –¢–ï–°–¢–ò –ü–†–û–í–ê–õ–ï–ù–û');
      console.log(`${test1Result ? '‚úÖ' : '‚ùå'} –û—Å–Ω–æ–≤–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è`);
      console.log(`${test2Result ? '‚úÖ' : '‚ùå'} –ì–ª–∏–±–æ–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è`);
      console.log(`${test3Result ? '‚úÖ' : '‚ùå'} –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤`);
      console.log(`${test4Result ? '‚úÖ' : '‚ùå'} –ü–æ—Ä–æ–∂–Ω—ñ–π —Å—Ç–µ–∫`);
    }

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç
testCompleteNavigation();