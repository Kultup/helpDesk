const express = require('express');
const mongoose = require('mongoose');
const compression = require('compression');
const morgan = require('morgan');
const path = require('path');
const { createServer } = require('http');
const { Server } = require('socket.io');
const logger = require('./utils/logger');
require('dotenv').config();

// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ middleware
const {
  cors,
  securityHeaders,
  sanitizeData,
  rateLimits,
  requestLogger,
  globalErrorHandler,
  notFoundHandler,
  unhandledRejectionHandler,
  uncaughtExceptionHandler
} = require('./middleware');

const app = express();
const server = createServer(app);

// Socket.IO –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const allowedSocketOrigins = [
  process.env.FRONTEND_URL,
  process.env.CORS_ORIGIN
].filter(Boolean);

const io = new Server(server, {
  cors: {
    origin: (origin, callback) => {
      if (!origin) return callback(null, true);
      if (allowedSocketOrigins.length === 0) return callback(null, true);
      if (allowedSocketOrigins.includes(origin)) return callback(null, true);
      logger.warn(`üö´ [Socket.IO] CORS –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –∑–∞–ø–∏—Ç –∑ –¥–æ–º–µ–Ω—É: ${origin}`);
      callback(new Error('–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ CORS –ø–æ–ª—ñ—Ç–∏–∫–æ—é'));
    },
    methods: ['GET', 'POST'],
    credentials: true
  }
});

// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ io –≤ app –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö —á–∞—Å—Ç–∏–Ω–∞—Ö –¥–æ–¥–∞—Ç–∫—É
app.set('io', io);

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
unhandledRejectionHandler();
uncaughtExceptionHandler();

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/helpdesk', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => {
  console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB');
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤—Å—ñ –º–æ–¥–µ–ª—ñ
  require('./models');
  console.log('‚úÖ –ú–æ–¥–µ–ª—ñ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram –±–æ—Ç–∞
  const telegramService = require('./services/telegramServiceInstance');
  telegramService.initialize();
  console.log('‚úÖ Telegram –±–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π
  const { setupCleanupJob } = require('./jobs/cleanupJob');
  setupCleanupJob();
  logger.info('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ WebSocket —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
  const registrationWebSocketService = require('./services/registrationWebSocketService');
  registrationWebSocketService.initialize(io);
  logger.info('‚úÖ WebSocket —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ WebSocket —Å–µ—Ä–≤—ñ—Å –¥–ª—è –ª–æ–≥—ñ–≤
  const logWebSocketService = require('./services/logWebSocketService');
  logWebSocketService.initialize(io);
  logger.info('‚úÖ WebSocket —Å–µ—Ä–≤—ñ—Å –¥–ª—è –ª–æ–≥—ñ–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ WebSocket —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ç—ñ–∫–µ—Ç—ñ–≤
  const ticketWebSocketService = require('./services/ticketWebSocketService');
  ticketWebSocketService.initialize(io);
  logger.info('‚úÖ WebSocket —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ç—ñ–∫–µ—Ç—ñ–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
  
  // WebSocket –æ–±—Ä–æ–±–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω—å
  io.on('connection', (socket) => {
    logger.info('üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è:', socket.id);
    
    // –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    socket.on('join-admin-room', () => {
      socket.join('admin-room');
      logger.info('üîê –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å:', socket.id);
    });

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—ó –ª–æ–≥—ñ–≤ –Ω–æ–≤–æ–º—É –∫–ª—ñ—î–Ω—Ç—É
    socket.on('request-log-history', () => {
      const logHistory = logWebSocketService.getLogHistory();
      socket.emit('log-history', logHistory);
    });

    // –û–±—Ä–æ–±–∫–∞ –ª–æ–≥—ñ–≤ –≤—ñ–¥ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
    socket.on('frontend-log', (data) => {
      logWebSocketService.broadcastFrontendLog(data.level, data.message, data.details);
    });
    
    socket.on('disconnect', () => {
      logger.info('üëã –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è:', socket.id);
    });
  });
})
.catch(err => logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:', err));

// Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
app.use(requestLogger);

// Middleware –¥–ª—è –±–µ–∑–ø–µ–∫–∏
app.use(securityHeaders);

// CORS –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
app.use(cors);

// –°–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
app.use(sanitizeData);

// Rate limiting –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤
app.use('/api/', rateLimits.general);
app.use('/api/auth/', rateLimits.auth);
app.use('/api/upload/', rateLimits.upload);
app.use('/api/telegram/', rateLimits.telegram);
app.use('/api/analytics/', rateLimits.analytics);

// CORS –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–∑–∞–ª–∏—à–∞—î–º–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
// app.use(cors({
//   origin: process.env.FRONTEND_URL || 'http://localhost:3000',
//   credentials: true,
//   methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
//   allowedHeaders: ['Content-Type', 'Authorization']
// }));

// –°—Ç–∏—Å–Ω–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
app.use(compression());

// –õ–æ–≥—É–≤–∞–Ω–Ω—è
if (process.env.NODE_ENV === 'development') {
  app.use(morgan('dev'));
} else {
  app.use(morgan('combined'));
}

// –ü–∞—Ä—Å–∏–Ω–≥ JSON —Ç–∞ URL-encoded –¥–∞–Ω–∏—Ö
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// –ú–∞—Ä—à—Ä—É—Ç–∏ API
app.use('/api/swagger', require('./routes/swagger')); // Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
app.use('/api/auth', require('./routes/auth'));
app.use('/api/tickets', require('./routes/tickets'));
app.use('/api/ticket-history', require('./routes/ticketHistory')); // –Ü—Å—Ç–æ—Ä—ñ—è —Ç—ñ–∫–µ—Ç—ñ–≤
app.use('/api/users', require('./routes/users'));
app.use('/api/cities', require('./routes/cities'));
app.use('/api/positions', require('./routes/positions'));
app.use('/api/institutions', require('./routes/institutions'));
app.use('/api/categories', require('./routes/categories'));
app.use('/api/comments', require('./routes/comments'));
app.use('/api/analytics', require('./routes/analytics'));
app.use('/api/active-directory', require('./routes/activeDirectory'));
// –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è
app.use('/api/notifications', require('./routes/notifications'));

// –¢–µ–≥–∏ —Ç–∞ —à–≤–∏–¥–∫—ñ –ø–æ—Ä–∞–¥–∏
app.use('/api/tags', require('./routes/tags'));
app.use('/api/quick-tips', require('./routes/quickTips'));

app.use('/api/ticket-templates', require('./routes/ticketTemplates'));
app.use('/api/events', require('./routes/events')); // –ö–∞–ª–µ–Ω–¥–∞—Ä –ø–æ–¥—ñ–π
app.use('/api/admin-notes', require('./routes/adminNotes')); // –û—Å–æ–±–∏—Å—Ç—ñ –Ω–æ—Ç–∞—Ç–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞

// Telegram webhook
app.use('/api/telegram', require('./routes/telegram'));

// –§–∞–π–ª–∏
app.use('/api/files', require('./routes/files'));

// –ë–∞–∑–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.json({
    success: true,
    message: 'Help Desk API –ø—Ä–∞—Ü—é—î',
    version: '1.0.0',
    timestamp: new Date().toISOString()
  });
});

// –¢–µ—Å—Ç–æ–≤–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ API
app.get('/api/test', (req, res) => {
  res.json({
    success: true,
    message: 'API endpoint working',
    timestamp: new Date().toISOString(),
    middleware: {
      cors: 'enabled',
      security: 'enabled',
      compression: 'enabled'
    }
  });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏
app.get('/health', async (req, res) => {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    const dbState = mongoose.connection.readyState;
    const dbStatus = dbState === 1 ? 'connected' : 'disconnected';
    
    // –ë–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const User = require('./models/User');
    const Ticket = require('./models/Ticket');
    
    const [userCount, ticketCount] = await Promise.all([
      User.countDocuments(),
      Ticket.countDocuments()
    ]);

    res.json({
      success: true,
      status: 'healthy',
      timestamp: new Date().toISOString(),
      database: {
        status: dbStatus,
        state: dbState
      },
      statistics: {
        users: userCount,
        tickets: ticketCount
      },
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      version: process.version
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      status: 'unhealthy',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// –û–±—Ä–æ–±–∫–∞ –Ω–µ—ñ—Å–Ω—É—é—á–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
app.use(notFoundHandler);

// –ì–ª–æ–±–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
app.use(globalErrorHandler);

const PORT = process.env.PORT || 5000;

server.listen(PORT, () => {
  logger.info(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  logger.info(`üìä –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
  const apiBase = process.env.API_BASE_URL || '(–Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ API_BASE_URL)';
  logger.info(`üåê API –±–∞–∑–æ–≤–∞ –∞–¥—Ä–µ—Å–∞: ${apiBase}`);
  logger.info(
    `üîå –î–æ–∑–≤–æ–ª–µ–Ω—ñ CORS origins –¥–ª—è WebSocket: ${
      allowedSocketOrigins.length ? allowedSocketOrigins.join(', ') : '–±—É–¥—å-—è–∫–µ (DEV –∞–±–æ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ)'
    }`
  );
});

// Graceful shutdown
const { gracefulShutdownHandler } = require('./middleware');
gracefulShutdownHandler(server);

module.exports = app;