openapi: 3.0.3
info:
  title: Help Desk API
  description: |
    API для системи управління заявками Help Desk
    
    ## Автентифікація
    API використовує JWT токени для автентифікації. Отримайте токен через `/api/auth/login` та передавайте його в заголовку `Authorization: Bearer <token>`.
    
    ## Обмеження швидкості
    - Загальні запити: 100 запитів на хвилину
    - Автентифікація: 5 спроб на хвилину
    - Завантаження файлів: 10 запитів на хвилину
    
  version: 1.0.0
  contact:
    name: Help Desk Support
    email: support@helpdesk.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.helpdesk.com/api
    description: Production server

tags:
  - name: Authentication
    description: Операції автентифікації та авторизації
  - name: Users
    description: Управління користувачами
  - name: Tickets
    description: Управління тикетами
  - name: Comments
    description: Коментарі до тикетів
  - name: Categories
    description: Категорії тикетів
  - name: Cities
    description: Міста та регіони
  - name: Files
    description: Завантаження та управління файлами

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Реєстрація нового користувача
      description: Створення нового облікового запису користувача
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              firstName: "Іван"
              lastName: "Петренко"
              email: "ivan.petrenko@company.com"
              password: "SecurePass123!"
              phone: "+380501234567"
              position: "507f1f77bcf86cd799439011"
              city: "507f1f77bcf86cd799439012"
      responses:
        '201':
          description: Користувач успішно зареєстрований
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Валідаційні помилки
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Користувач з таким email вже існує
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Вхід в систему
      description: Автентифікація користувача та отримання JWT токену
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "ivan.petrenko@company.com"
              password: "SecurePass123!"
      responses:
        '200':
          description: Успішна автентифікація
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Невірні дані для входу
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Невірний email або пароль
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Отримання інформації про поточного користувача
      description: Повертає дані авторизованого користувача
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Інформація про користувача
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Не авторизований
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tickets:
    get:
      tags:
        - Tickets
      summary: Отримання списку тикетів
      description: Повертає список тикетів з можливістю фільтрації та пагінації
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Номер сторінки
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Кількість записів на сторінку
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: status
          in: query
          description: Фільтр за статусом
          schema:
            type: string
            enum: [open, in_progress, resolved, closed]
        - name: priority
          in: query
          description: Фільтр за пріоритетом
          schema:
            type: string
            enum: [low, medium, high, urgent]
        - name: search
          in: query
          description: Пошук по заголовку та опису
          schema:
            type: string
        - name: sortBy
          in: query
          description: Поле для сортування
          schema:
            type: string
            enum: [createdAt, updatedAt, priority, status]
            default: createdAt
        - name: sortOrder
          in: query
          description: Порядок сортування
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Список тикетів
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketsListResponse'
        '400':
          description: Невірні параметри запиту
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизований
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Tickets
      summary: Створення нового тикету
      description: Створює новий тикет в системі
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTicketRequest'
            example:
              title: "Проблема з принтером HP LaserJet"
              description: "Принтер не друкує документи. При спробі друку з'являється помилка 'Paper Jam'"
              priority: "high"
              category: "507f1f77bcf86cd799439015"
              city: "507f1f77bcf86cd799439012"
              tags: ["принтер", "HP", "технічна підтримка"]
              estimatedTime: 60
      responses:
        '201':
          description: Тикет успішно створено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '400':
          description: Валідаційні помилки
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизований
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tickets/{id}:
    get:
      tags:
        - Tickets
      summary: Отримання тикету за ID
      description: Повертає детальну інформацію про конкретний тикет
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID тикету
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '200':
          description: Інформація про тикет
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketDetailResponse'
        '401':
          description: Не авторизований
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ заборонено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Тикет не знайдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Tickets
      summary: Оновлення тикету
      description: Оновлює існуючий тикет
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID тикету
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTicketRequest'
            example:
              status: "resolved"
              assignedTo: "507f1f77bcf86cd799439016"
              actualTime: 45
      responses:
        '200':
          description: Тикет успішно оновлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '400':
          description: Валідаційні помилки
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизований
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ заборонено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Тикет не знайдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tickets/{id}/comments:
    get:
      tags:
        - Comments
      summary: Отримання коментарів тикету
      description: Повертає список коментарів для конкретного тикету
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID тикету
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
        - name: page
          in: query
          description: Номер сторінки
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Кількість записів на сторінку
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Список коментарів
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsListResponse'
        '401':
          description: Не авторизований
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Тикет не знайдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Comments
      summary: Додавання коментаря
      description: Додає новий коментар до тикету
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID тикету
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
            example:
              content: "Оновив драйвери принтера. Тестування показало, що проблема вирішена."
              isInternal: false
      responses:
        '201':
          description: Коментар успішно додано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: Валідаційні помилки
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизований
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Тикет не знайдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          type: string
          maxLength: 50
          example: "Іван"
        lastName:
          type: string
          maxLength: 50
          example: "Петренко"
        email:
          type: string
          format: email
          example: "ivan.petrenko@company.com"
        password:
          type: string
          minLength: 8
          example: "SecurePass123!"
        phone:
          type: string
          example: "+380501234567"
        position:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          example: "507f1f77bcf86cd799439011"
        city:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          example: "507f1f77bcf86cd799439012"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "ivan.petrenko@company.com"
        password:
          type: string
          example: "SecurePass123!"

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Успішна автентифікація"
        data:
          type: object
          properties:
            token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            user:
              $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439013"
        firstName:
          type: string
          example: "Іван"
        lastName:
          type: string
          example: "Петренко"
        email:
          type: string
          example: "ivan.petrenko@company.com"
        phone:
          type: string
          example: "+380501234567"
        role:
          type: string
          enum: [user, admin, support]
          example: "user"
        isActive:
          type: boolean
          example: true
        registrationStatus:
          type: string
          enum: [pending, approved, rejected]
          example: "approved"

    CreateTicketRequest:
      type: object
      required:
        - title
        - description
        - priority
        - category
      properties:
        title:
          type: string
          maxLength: 200
          example: "Проблема з принтером HP LaserJet"
        description:
          type: string
          maxLength: 2000
          example: "Принтер не друкує документи"
        priority:
          type: string
          enum: [low, medium, high, urgent]
          example: "high"
        category:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          example: "507f1f77bcf86cd799439015"
        city:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          example: "507f1f77bcf86cd799439012"
        assignedTo:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          example: "507f1f77bcf86cd799439016"
        tags:
          type: array
          items:
            type: string
          example: ["принтер", "HP", "технічна підтримка"]
        estimatedTime:
          type: integer
          minimum: 0
          example: 60

    UpdateTicketRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 200
        description:
          type: string
          maxLength: 2000
        status:
          type: string
          enum: [open, in_progress, resolved, closed]
        priority:
          type: string
          enum: [low, medium, high, urgent]
        assignedTo:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
        category:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
        tags:
          type: array
          items:
            type: string
        estimatedTime:
          type: integer
          minimum: 0
        actualTime:
          type: integer
          minimum: 0

    CreateCommentRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          maxLength: 2000
          example: "Оновив драйвери принтера"
        isInternal:
          type: boolean
          default: false
          example: false

    Ticket:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439017"
        title:
          type: string
          example: "Проблема з принтером HP LaserJet"
        description:
          type: string
          example: "Принтер не друкує документи"
        status:
          type: string
          enum: [open, in_progress, resolved, closed]
          example: "open"
        priority:
          type: string
          enum: [low, medium, high, urgent]
          example: "high"
        category:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
            color:
              type: string
        createdBy:
          $ref: '#/components/schemas/User'
        assignedTo:
          $ref: '#/components/schemas/User'
        city:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
            region:
              type: string
        tags:
          type: array
          items:
            type: string
        estimatedTime:
          type: integer
        actualTime:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Comment:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439018"
        content:
          type: string
          example: "Перевірив принтер, проблема в драйверах"
        author:
          $ref: '#/components/schemas/User'
        ticket:
          type: string
          example: "507f1f77bcf86cd799439017"
        isInternal:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        currentPage:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 5
        totalItems:
          type: integer
          example: 47
        itemsPerPage:
          type: integer
          example: 10
        hasNext:
          type: boolean
          example: true
        hasPrev:
          type: boolean
          example: false

    UserResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/User'

    TicketResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Тикет успішно створено"
        data:
          $ref: '#/components/schemas/Ticket'

    TicketDetailResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          allOf:
            - $ref: '#/components/schemas/Ticket'
            - type: object
              properties:
                comments:
                  type: array
                  items:
                    $ref: '#/components/schemas/Comment'
                attachments:
                  type: array
                  items:
                    type: object

    TicketsListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            tickets:
              type: array
              items:
                $ref: '#/components/schemas/Ticket'
            pagination:
              $ref: '#/components/schemas/Pagination'

    CommentResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Коментар успішно додано"
        data:
          $ref: '#/components/schemas/Comment'

    CommentsListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            comments:
              type: array
              items:
                $ref: '#/components/schemas/Comment'
            pagination:
              $ref: '#/components/schemas/Pagination'

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Помилка валідації"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Email обов'язковий"