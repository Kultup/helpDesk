const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const User = require('../models/User');
const Position = require('../models/Position');
const City = require('../models/City');

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
mongoose.connect('mongodb://localhost:27017/helpdesk', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

async function recreateAdmin() {
  try {
    console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB...');
    
    // –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await User.deleteOne({ email: 'admin@test.com' });
    console.log('üóëÔ∏è –°—Ç–∞—Ä–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–∏–¥–∞–ª–µ–Ω–æ');
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –º—ñ—Å—Ç–æ
    let defaultCity = await City.findOne({ name: '–ö–∏—ó–≤' });
    if (!defaultCity) {
      defaultCity = await City.create({
        name: '–ö–∏—ó–≤',
        region: '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        coordinates: { lat: 50.4501, lng: 30.5234 }
      });
      console.log('üèôÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–æ –º—ñ—Å—Ç–æ: –ö–∏—ó–≤');
    }
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∞–¥—É
    let adminPosition = await Position.findOne({ title: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏' });
    if (!adminPosition) {
      // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ–ª—è createdBy
      const tempUser = new User({
        email: 'temp@system.com',
        firstName: 'System',
        lastName: 'Admin',
        role: 'admin',
        city: defaultCity._id,
        department: 'System'
      });
      await tempUser.save({ validateBeforeSave: false });
      
      adminPosition = await Position.create({
        title: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏',
        description: '–ü–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ —Å–∏—Å—Ç–µ–º–∏',
        department: 'IT –≤—ñ–¥–¥—ñ–ª',
        level: 'director',
        category: 'management',
        permissions: [
          {
            module: 'tickets',
            actions: ['create', 'read', 'update', 'delete', 'assign', 'export']
          },
          {
            module: 'users',
            actions: ['create', 'read', 'update', 'delete']
          }
        ],
        createdBy: tempUser._id
      });
      
      // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      await User.findByIdAndDelete(tempUser._id);
      console.log('üíº –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—Å–∞–¥—É: –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏');
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ë–ï–ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ö–µ–º–∏ (—â–æ–± –æ–±—ñ–π—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é)
    const hashedPassword = await bcrypt.hash('admin123', 12);
    
    const adminData = {
      email: 'admin@test.com',
      password: hashedPassword,
      firstName: '–ê–¥–º—ñ–Ω',
      lastName: '–°–∏—Å—Ç–µ–º–∏',
      role: 'admin',
      position: adminPosition._id,
      city: defaultCity._id,
      department: 'IT –≤—ñ–¥–¥—ñ–ª',
      permissions: [
        'create_tickets', 'edit_tickets', 'delete_tickets', 'assign_tickets',
        'view_all_tickets', 'view_analytics', 'export_data', 'manage_users',
        'manage_cities', 'manage_positions', 'system_settings', 'telegram_admin'
      ],
      isActive: true,
      isEmailVerified: true,
      statistics: {
        ticketsCreated: 0,
        ticketsResolved: 0,
        averageResolutionTime: 0,
        satisfactionRating: 5
      },
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    // –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–∞–ø—Ä—è–º—É –≤ –∫–æ–ª–µ–∫—Ü—ñ—é
    const result = await mongoose.connection.db.collection('users').insertOne(adminData);
    console.log('‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    const newAdmin = await User.findById(result.insertedId);
    if (newAdmin) {
      console.log('üìß Email:', newAdmin.email);
      console.log('üë§ –Ü–º\'—è:', newAdmin.firstName, newAdmin.lastName);
      console.log('üîë –†–æ–ª—å:', newAdmin.role);
      console.log('üîê –ü–∞—Ä–æ–ª—å –ø—Ä–∏—Å—É—Ç–Ω—ñ–π:', !!newAdmin.password);
      
      // –¢–µ—Å—Ç—É—î–º–æ –ø–∞—Ä–æ–ª—å
      const isValid = await bcrypt.compare('admin123', newAdmin.password);
      console.log('üîç –ü–∞—Ä–æ–ª—å –≤–∞–ª—ñ–¥–Ω–∏–π:', isValid ? '‚úÖ –¢–∞–∫' : '‚ùå –ù—ñ');
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
  } finally {
    mongoose.connection.close();
  }
}

recreateAdmin();