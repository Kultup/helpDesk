const mongoose = require('mongoose');
require('dotenv').config();

// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –≤—Å—ñ –º–æ–¥–µ–ª—ñ
require('../models');

async function checkRatingsData() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/helpdesk');
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB');

    const Rating = require('../models/Rating');
    const Ticket = require('../models/Ticket');
    const User = require('../models/User');

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤
    const totalRatings = await Rating.countDocuments();
    console.log(`üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤: ${totalRatings}`);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    
    const recentRatings = await Rating.countDocuments({
      createdAt: { $gte: thirtyDaysAgo }
    });
    console.log(`üìÖ –†–µ–π—Ç–∏–Ω–≥–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤: ${recentRatings}`);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥
    const avgResult = await Rating.aggregate([
      {
        $match: {
          createdAt: { $gte: thirtyDaysAgo }
        }
      },
      {
        $group: {
          _id: null,
          averageRating: { $avg: '$rating' },
          totalCount: { $sum: 1 }
        }
      }
    ]);
    
    if (avgResult.length > 0) {
      console.log(`‚≠ê –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ 30 –¥–Ω—ñ–≤: ${avgResult[0].averageRating?.toFixed(1) || 'N/A'}`);
    } else {
      console.log('‚≠ê –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥: –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö');
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    const recommendStats = await Rating.aggregate([
      {
        $match: {
          createdAt: { $gte: thirtyDaysAgo },
          wouldRecommend: true
        }
      },
      {
        $group: {
          _id: null,
          count: { $sum: 1 }
        }
      }
    ]);
    
    const recommendCount = recommendStats.length > 0 ? recommendStats[0].count : 0;
    console.log(`üëç –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –∑–∞ 30 –¥–Ω—ñ–≤: ${recommendCount}`);
    
    if (recentRatings > 0) {
      const recommendPercentage = ((recommendCount / recentRatings) * 100).toFixed(1);
      console.log(`üìà –í—ñ–¥—Å–æ—Ç–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π: ${recommendPercentage}%`);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏
    const ratingsWithComments = await Rating.countDocuments({
      createdAt: { $gte: thirtyDaysAgo },
      comment: { $exists: true, $ne: '', $ne: null }
    });
    console.log(`üí¨ –†–µ–π—Ç–∏–Ω–≥–∏ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏ –∑–∞ 30 –¥–Ω—ñ–≤: ${ratingsWithComments}`);

    // –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤
    console.log('\nüìã –û—Å—Ç–∞–Ω–Ω—ñ 5 —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤:');
    const latestRatings = await Rating.find()
      .populate('ticket', 'title')
      .populate('user', 'firstName lastName email')
      .sort({ createdAt: -1 })
      .limit(5);

    if (latestRatings.length === 0) {
      console.log('–†–µ–π—Ç–∏–Ω–≥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    } else {
      latestRatings.forEach((rating, index) => {
        console.log(`${index + 1}. –¢—ñ–∫–µ—Ç: ${rating.ticket?.title || 'N/A'}`);
        console.log(`   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${rating.user?.firstName || 'N/A'} ${rating.user?.lastName || ''} (${rating.user?.email || 'N/A'})`);
        console.log(`   –†–µ–π—Ç–∏–Ω–≥: ${rating.rating}/5`);
        console.log(`   –†–µ–∫–æ–º–µ–Ω–¥—É—î: ${rating.wouldRecommend === true ? '–¢–∞–∫' : rating.wouldRecommend === false ? '–ù—ñ' : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}`);
        console.log(`   –î–∂–µ—Ä–µ–ª–æ: ${rating.source || 'N/A'}`);
        console.log(`   –î–∞—Ç–∞: ${rating.createdAt?.toLocaleDateString('uk-UA') || 'N/A'}`);
        console.log('');
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–ø–æ–¥—ñ–ª –∑–∞ –¥–∂–µ—Ä–µ–ª–∞–º–∏
    console.log('üìä –†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ –¥–∂–µ—Ä–µ–ª–∞–º–∏:');
    const sourceStats = await Rating.aggregate([
      {
        $match: {
          createdAt: { $gte: thirtyDaysAgo }
        }
      },
      {
        $group: {
          _id: '$source',
          count: { $sum: 1 }
        }
      }
    ]);
    
    if (sourceStats.length === 0) {
      console.log('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ –¥–∂–µ—Ä–µ–ª–∞–º–∏');
    } else {
      sourceStats.forEach(stat => {
        console.log(`   ${stat._id || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}: ${stat.count}`);
      });
    }

    process.exit(0);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
    process.exit(1);
  }
}

checkRatingsData();