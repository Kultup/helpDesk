const mongoose = require('mongoose');
require('dotenv').config();
const TelegramService = require('../services/telegramService');
const Rating = require('../models/Rating');
const Ticket = require('../models/Ticket');
const User = require('../models/User');

// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –≤—Å—ñ –º–æ–¥–µ–ª—ñ
require('../models');

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/helpdesk');
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:', error);
    process.exit(1);
  }
}

async function testTelegramRating() {
  await connectDB();
  
  try {
    console.log('üß™ –¢–µ—Å—Ç—É—î–º–æ –æ–±—Ä–æ–±–∫—É callback –¥–ª—è –æ—Ü—ñ–Ω–∫–∏...');
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ TelegramService
    const telegramService = new TelegramService();
    const isInitialized = await telegramService.initialize();
    
    if (!isInitialized) {
      console.log('‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω)');
      console.log('   –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ç–µ—Å—Ç –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...');
    } else {
      console.log('‚úÖ Telegram –±–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    }
    
    // –°–∏–º—É–ª—é—î–º–æ callback data
    const callbackData = 'rate_68d5340d74a2451a0116b1be_5';
    console.log('üìû Callback data:', callbackData);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫ callback query
    const mockCallbackQuery = {
      id: 'test_callback_id',
      data: callbackData,
      message: {
        chat: {
          id: 123456789 // –¢–µ—Å—Ç–æ–≤–∏–π chat ID
        }
      }
    };
    
    // –¢–µ—Å—Ç—É—î–º–æ –æ–±—Ä–æ–±–∫—É callback
    try {
      await telegramService.handleCallbackQuery(mockCallbackQuery);
      console.log('‚úÖ Callback –æ–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
      
      // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –ø–æ–≤'—è–∑–∞–Ω–∞ –∑ –±–æ—Ç–æ–º, —Å–ø—Ä–æ–±—É—î–º–æ –æ–±—Ä–æ–±–∏—Ç–∏ –ª–æ–≥—ñ–∫—É –±–µ–∑ –±–æ—Ç–∞
      if (error.message.includes('answerCallbackQuery') || error.message.includes('null')) {
        console.log('üîß –°–ø—Ä–æ–±—É—î–º–æ –æ–±—Ä–æ–±–∏—Ç–∏ –ª–æ–≥—ñ–∫—É –æ—Ü—ñ–Ω–∫–∏ –±–µ–∑ Telegram –±–æ—Ç–∞...');
        await testRatingLogicOnly(callbackData);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ MongoDB');
  }
}

async function testRatingLogicOnly(callbackData) {
  try {
    // –ü–∞—Ä—Å–∏–º–æ callback data
    if (callbackData.startsWith('rate_')) {
      const parts = callbackData.split('_');
      if (parts.length === 3) {
        const ticketId = parts[1];
        const rating = parseInt(parts[2]);
        
        console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ callback data —É—Å–ø—ñ—à–Ω–∏–π:');
        console.log(`   - Ticket ID: ${ticketId}`);
        console.log(`   - Rating: ${rating}`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç—ñ–∫–µ—Ç
        const ticket = await Ticket.findById(ticketId);
        if (ticket) {
          console.log(`‚úÖ –¢—ñ–∫–µ—Ç –∑–Ω–∞–π–¥–µ–Ω–æ: "${ticket.title}"`);
          
          // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          const testUser = await User.findOne({ email: 'test@example.com' });
          if (testUser) {
            console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–æ: ${testUser.email}`);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î –æ—Ü—ñ–Ω–∫–∞
            const existingRating = await Rating.findOne({
              ticket: ticketId,
              user: testUser._id
            });
            
            if (existingRating) {
              console.log('‚ö†Ô∏è –û—Ü—ñ–Ω–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ç—ñ–∫–µ—Ç–∞');
              console.log(`   - –ü–æ—Ç–æ—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞: ${existingRating.rating}/5`);
            } else {
              // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –æ—Ü—ñ–Ω–∫—É
              const newRating = new Rating({
                ticket: ticketId,
                user: testUser._id,
                rating: rating,
                comment: `–¢–µ—Å—Ç–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ (${rating}/5)`,
                categories: {
                  responseTime: rating,
                  solutionQuality: rating,
                  communication: rating,
                  overall: rating
                },
                wouldRecommend: rating >= 4,
                source: 'telegram'
              });
              
              await newRating.save();
              console.log('‚úÖ –ù–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ:');
              console.log(`   - –û—Ü—ñ–Ω–∫–∞: ${rating}/5`);
              console.log(`   - –î–∂–µ—Ä–µ–ª–æ: Telegram`);
              console.log(`   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: ${rating >= 4 ? '–¢–∞–∫' : '–ù—ñ'}`);
            }
          } else {
            console.log('‚ùå –¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
          }
        } else {
          console.log('‚ùå –¢—ñ–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
      } else {
        console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback data');
      }
    } else {
      console.log('‚ùå Callback data –Ω–µ —î –æ—Ü—ñ–Ω–∫–æ—é');
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç –ª–æ–≥—ñ–∫–∏ –æ—Ü—ñ–Ω–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ª–æ–≥—ñ—Ü—ñ –æ—Ü—ñ–Ω–∫–∏:', error);
  }
}

testTelegramRating();