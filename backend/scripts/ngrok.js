const ngrok = require('ngrok');
const axios = require('axios');
require('dotenv').config();

async function startNgrok() {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const authtoken = process.env.NGROK_AUTHTOKEN;
    const region = process.env.NGROK_REGION || 'us';
    const port = process.env.PORT || 5000;

    if (!botToken) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ');
    }

    if (!authtoken || authtoken === 'your_ngrok_authtoken_here') {
      throw new Error('NGROK_AUTHTOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ. –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ https://dashboard.ngrok.com/get-started/your-authtoken');
    }

    console.log('üîë –ù–∞–ª–∞—à—Ç–æ–≤—É—é ngrok authtoken...');
    await ngrok.authtoken(authtoken);

    console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞—é ngrok —Ç—É–Ω–µ–ª—å –Ω–∞ –ø–æ—Ä—Ç ${port}...`);
    
    // –î–ª—è ngrok 5.x –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π API
    const url = await ngrok.connect({
      addr: port,
      region: region,
      authtoken: authtoken
    });
    
    const publicUrl = url.startsWith('http') ? url : `https://${url}`;
    const webhookUrl = `${publicUrl}/api/telegram/webhook`;

    console.log(`üåê Ngrok tunnel –∑–∞–ø—É—â–µ–Ω–æ: ${publicUrl}`);
    console.log(`üîó –ù–∞–ª–∞—à—Ç–æ–≤—É—é Telegram webhook: ${webhookUrl}`);

    try {
      const response = await axios.post(`https://api.telegram.org/bot${botToken}/setWebhook`, {
        url: webhookUrl,
        drop_pending_updates: true
      });

      if (response && response.data && response.data.ok) {
        console.log('‚úÖ Webhook —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
      } else {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook:', response?.data || '–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ');
        throw new Error(`Webhook setup failed: ${JSON.stringify(response?.data || 'No response')}`);
      }
    } catch (webhookError) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ webhook:', webhookError.message);
      if (webhookError.response) {
        console.error('üìÑ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Telegram API:', JSON.stringify(webhookError.response.data, null, 2));
      }
      throw webhookError;
    }

    console.log('üéØ Ngrok —Ç—É–Ω–µ–ª—å –¥–ª—è –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∏–π. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏.');

    const infoResponse = await axios.get(`https://api.telegram.org/bot${botToken}/getWebhookInfo`);
    if (infoResponse && infoResponse.data && infoResponse.data.result) {
      console.log('üìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ webhook:', JSON.stringify(infoResponse.data.result, null, 2));
    } else {
      console.log('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ webhook');
    }

    const cleanup = async () => {
      console.log('\nüõë –ó—É–ø–∏–Ω—è—é ngrok...');
      try {
        await axios.post(`https://api.telegram.org/bot${botToken}/deleteWebhook`);
        console.log('‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ');
      } catch (e) {
        console.error('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ webhook:', e.message);
      }
      try {
        await ngrok.disconnect();
        await ngrok.kill();
        console.log('‚úÖ Ngrok –∑—É–ø–∏–Ω–µ–Ω–æ');
      } catch (e) {
        console.error('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ ngrok:', e.message);
      }
      process.exit(0);
    };

    process.on('SIGINT', cleanup);
    process.on('SIGTERM', cleanup);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É ngrok –∞–±–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook:', error.message);
    console.error('üîç –ü–æ–≤–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
    
    if (error.response && error.response.data) {
      console.error('üìÑ –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(error.response.data, null, 2));
    }
    
    if (error.code) {
      console.error('üîç –ö–æ–¥ –ø–æ–º–∏–ª–∫–∏:', error.code);
    }
    
    if (error.stack) {
      console.error('üìç Stack trace:', error.stack);
    }
    
    if (error.message.includes('authtoken')) {
      console.error('üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å NGROK_AUTHTOKEN –≤ .env —Ñ–∞–π–ª—ñ');
    }
    
    if (error.message.includes('tunnel')) {
      console.error('üí° –ú–æ–∂–ª–∏–≤–æ, —ñ–Ω—à–∏–π –ø—Ä–æ—Ü–µ—Å –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–µ–π –ø–æ—Ä—Ç –∞–±–æ ngrok');
    }
    
    process.exit(1);
  }
}

startNgrok();