const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

async function createAdmin() {
  try {
    console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB...');
    
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
    await mongoose.connect('mongodb://localhost:27017/helpdesk', {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB');
    
    // –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
    await mongoose.connection.db.collection('users').deleteMany({ 
      $or: [
        { email: 'admin@test.com' },
        { email: 'gorodok048@gmail.com' }
      ]
    });
    console.log('üóëÔ∏è –°—Ç–∞—Ä–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –≤–∏–¥–∞–ª–µ–Ω–æ');
    
    // –•–µ—à—É—î–º–æ –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash('admin123', 12);
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ—Å–Ω—É—é—á—ñ –º—ñ—Å—Ç–æ —Ç–∞ –ø–æ—Å–∞–¥—É
    const city = await mongoose.connection.db.collection('cities').findOne({ name: '–ö–∏—ó–≤' });
    const position = await mongoose.connection.db.collection('positions').findOne({ 
      $or: [
        { title: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏' },
        { name: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä' }
      ]
    });
    
    if (!city) {
      throw new Error('–ú—ñ—Å—Ç–æ "–ö–∏—ó–≤" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö');
    }
    
    if (!position) {
      throw new Error('–ü–æ—Å–∞–¥–∞ "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö');
    }
    
    console.log('üèôÔ∏è –ó–Ω–∞–π–¥–µ–Ω–æ –º—ñ—Å—Ç–æ:', city.name, '- ID:', city._id);
    console.log('üíº –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–∞–¥—É:', position.title || position.name, '- ID:', position._id);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–ø—Ä—è–º—É –≤ –∫–æ–ª–µ–∫—Ü—ñ—ó
    const adminData = {
      email: 'gorodok048@gmail.com',
      password: hashedPassword,
      firstName: '–ê–¥–º—ñ–Ω',
      lastName: '–°–∏—Å—Ç–µ–º–∏',
      role: 'admin',
      department: 'IT –≤—ñ–¥–¥—ñ–ª',
      city: city._id,
      position: position._id,
      isActive: true,
      isEmailVerified: true,
      registrationStatus: 'approved',
      statistics: {
        ticketsCreated: 0,
        ticketsResolved: 0,
        averageResolutionTime: 0,
        totalRatings: 0
      },
      preferences: {
        theme: 'light',
        language: 'uk',
        timezone: 'Europe/Kiev',
        dateFormat: 'DD/MM/YYYY',
        timeFormat: '24h'
      },
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    const result = await mongoose.connection.db.collection('users').insertOne(adminData);
    console.log('‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    const User = require('../models/User');
    const newAdmin = await User.findById(result.insertedId).select('+password');
    if (newAdmin) {
      console.log('üìß Email:', newAdmin.email);
      console.log('üë§ –Ü–º\'—è:', newAdmin.firstName, newAdmin.lastName);
      console.log('üîë –†–æ–ª—å:', newAdmin.role);
      console.log('üîê –ü–∞—Ä–æ–ª—å –ø—Ä–∏—Å—É—Ç–Ω—ñ–π:', !!newAdmin.password);
      
      // –¢–µ—Å—Ç—É—î–º–æ –ø–∞—Ä–æ–ª—å
      const isValid = await newAdmin.comparePassword('admin123');
      console.log('üîç –ü–∞—Ä–æ–ª—å –≤–∞–ª—ñ–¥–Ω–∏–π:', isValid ? '‚úÖ –¢–∞–∫' : '‚ùå –ù—ñ');
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
  } finally {
    mongoose.connection.close();
  }
}

createAdmin();