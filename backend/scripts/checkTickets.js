const mongoose = require('mongoose');
require('dotenv').config();

// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –≤—Å—ñ –º–æ–¥–µ–ª—ñ
require('../models');

async function checkTickets() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB');

    const Ticket = require('../models/Ticket');
    const tickets = await Ticket.find().populate('createdBy', 'name email').limit(5);
    
    console.log('\nüìã –Ü—Å–Ω—É—é—á—ñ —Ç—ñ–∫–µ—Ç–∏:');
    if (tickets.length === 0) {
      console.log('–¢—ñ–∫–µ—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    } else {
      tickets.forEach(t => {
        console.log(`ID: ${t._id}, –ù–∞–∑–≤–∞: ${t.title}, –°—Ç–∞—Ç—É—Å: ${t.status}, –ê–≤—Ç–æ—Ä: ${t.createdBy?.email || 'N/A'}`);
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ –æ—Ü—ñ–Ω–∫–∏
    const Rating = require('../models/Rating');
    const ratings = await Rating.find().populate('ticket', 'title').populate('user', 'email').limit(5);
    
    console.log('\n‚≠ê –Ü—Å–Ω—É—é—á—ñ –æ—Ü—ñ–Ω–∫–∏:');
    if (ratings.length === 0) {
      console.log('–û—Ü—ñ–Ω–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    } else {
      ratings.forEach(r => {
        console.log(`–¢—ñ–∫–µ—Ç: ${r.ticket?.title || 'N/A'}, –û—Ü—ñ–Ω–∫–∞: ${r.rating || 'N/A'}, –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${r.user?.email || 'N/A'}`);
      });
    }

    process.exit(0);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
    process.exit(1);
  }
}

checkTickets();