const mongoose = require('mongoose');
const Rating = require('../models/Rating');
const Ticket = require('../models/Ticket');
const User = require('../models/User');

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/helpdesk');
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:', error);
    process.exit(1);
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤
const createTestRatings = async () => {
  try {
    console.log('üîç –ü–æ—à—É–∫ —ñ—Å–Ω—É—é—á–∏—Ö —Ç—ñ–∫–µ—Ç—ñ–≤ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...');
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ—Å–Ω—É—é—á—ñ —Ç—ñ–∫–µ—Ç–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º "resolved" –∞–±–æ "closed"
    const tickets = await Ticket.find({
      status: { $in: ['resolved', 'closed'] }
    }).populate('createdBy').limit(10);
    
    if (tickets.length === 0) {
      console.log('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç—ñ–∫–µ—Ç—ñ–≤ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º "resolved" –∞–±–æ "closed"');
      
      // –°—Ç–≤–æ—Ä–∏–º–æ –∫—ñ–ª—å–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ç—ñ–∫–µ—Ç—ñ–≤
      const users = await User.find().limit(3);
      const cities = await mongoose.model('City').find().limit(1);
      
      if (users.length === 0) {
        console.log('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤');
        return;
      }
      
      if (cities.length === 0) {
        console.log('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –º—ñ—Å—Ç');
        return;
      }
      
      console.log('üìù –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Ç—ñ–∫–µ—Ç–∏...');
      const testTickets = [];
      for (let i = 0; i < 5; i++) {
        const ticket = new Ticket({
          title: `–¢–µ—Å—Ç–æ–≤–∏–π —Ç—ñ–∫–µ—Ç ${i + 1}`,
          description: `–û–ø–∏—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—ñ–∫–µ—Ç–∞ ${i + 1}`,
          createdBy: users[i % users.length]._id,
          status: 'resolved',
          priority: ['low', 'medium', 'high'][i % 3],
          category: ['technical', 'account', 'billing', 'general'][i % 4],
          city: cities[0]._id
        });
        await ticket.save();
        testTickets.push(ticket);
      }
      tickets.push(...testTickets);
    }
    
    console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${tickets.length} —Ç—ñ–∫–µ—Ç—ñ–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤`);
    
    // –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è —Ü–∏—Ö —Ç—ñ–∫–µ—Ç—ñ–≤
    const ticketIds = tickets.map(t => t._id);
    await Rating.deleteMany({ ticket: { $in: ticketIds } });
    console.log('üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —ñ—Å–Ω—É—é—á—ñ —Ä–µ–π—Ç–∏–Ω–≥–∏');
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∑ –ø–æ–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
    const testRatings = [];
    const comments = [
      '–î—É–∂–µ —à–≤–∏–¥–∫–æ –≤–∏—Ä—ñ—à–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É, –¥—è–∫—É—é!',
      '–í—ñ–¥–º—ñ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞, –≤—Å–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ –ø–æ—è—Å–Ω–∏–ª–∏',
      '–¢—Ä–æ—Ö–∏ –¥–æ–≤–≥–æ —á–µ–∫–∞–≤, –∞–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î',
      '–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é',
      '–í—Å–µ –¥–æ–±—Ä–µ, –∞–ª–µ –º–æ–∂–Ω–∞ –±—É–ª–æ –± —à–≤–∏–¥—à–µ',
      '–ß—É–¥–æ–≤–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞, –¥—É–∂–µ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∏–π',
      '–ù–æ—Ä–º–∞–ª—å–Ω–æ, –±–µ–∑ –æ—Å–æ–±–ª–∏–≤–∏—Ö –∑–∞—É–≤–∞–∂–µ–Ω—å',
      '–í—ñ–¥–º—ñ–Ω–Ω–æ! –ü–µ—Ä–µ–≤–µ—Ä—à–∏–ª–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è',
      null, // –ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
      '–î–æ–±—Ä–µ, –∞–ª–µ —î –∫—É–¥–∏ —Ä–æ—Å—Ç–∏'
    ];
    
    for (let i = 0; i < Math.min(tickets.length, 10); i++) {
      const ticket = tickets[i];
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î createdBy
      if (!ticket.createdBy) {
        console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç—ñ–∫–µ—Ç ${ticket.title} - –Ω–µ–º–∞—î createdBy`);
        continue;
      }
      
      const rating = Math.floor(Math.random() * 5) + 1; // 1-5
      
      const testRating = new Rating({
        ticket: ticket._id,
        user: ticket.createdBy._id || ticket.createdBy,
        rating: rating,
        categories: {
          speed: Math.floor(Math.random() * 5) + 1,
          quality: Math.floor(Math.random() * 5) + 1,
          communication: Math.floor(Math.random() * 5) + 1,
          professionalism: Math.floor(Math.random() * 5) + 1
        },
        comment: comments[i % comments.length],
        wouldRecommend: Math.random() > 0.3 // 70% —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—å
      });
      
      await testRating.save();
      testRatings.push(testRating);
      console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥ ${i + 1}: ${rating} –∑—ñ—Ä–æ–∫ –¥–ª—è —Ç—ñ–∫–µ—Ç–∞ "${ticket.title}"`);
    }
    
    console.log(`üéâ –£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ ${testRatings.length} —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤!`);
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await Rating.aggregate([
      {
        $group: {
          _id: null,
          totalRatings: { $sum: 1 },
          averageRating: { $avg: '$rating' },
          averageSpeed: { $avg: '$categories.speed' },
          averageQuality: { $avg: '$categories.quality' },
          averageCommunication: { $avg: '$categories.communication' },
          averageProfessionalism: { $avg: '$categories.professionalism' },
          recommendCount: {
            $sum: {
              $cond: [{ $eq: ['$wouldRecommend', true] }, 1, 0]
            }
          }
        }
      }
    ]);
    
    if (stats.length > 0) {
      const stat = stats[0];
      console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤:');
      console.log(`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${stat.totalRatings}`);
      console.log(`–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥: ${stat.averageRating.toFixed(1)}`);
      console.log(`–†–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—å: ${stat.recommendCount}/${stat.totalRatings} (${((stat.recommendCount/stat.totalRatings)*100).toFixed(1)}%)`);
      console.log(`–°–µ—Ä–µ–¥–Ω—ñ –æ—Ü—ñ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:`);
      console.log(`  –®–≤–∏–¥–∫—ñ—Å—Ç—å: ${stat.averageSpeed.toFixed(1)}`);
      console.log(`  –Ø–∫—ñ—Å—Ç—å: ${stat.averageQuality.toFixed(1)}`);
      console.log(`  –ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è: ${stat.averageCommunication.toFixed(1)}`);
      console.log(`  –ü—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–∑–º: ${stat.averageProfessionalism.toFixed(1)}`);
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤:', error);
  }
};

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
const main = async () => {
  await connectDB();
  await createTestRatings();
  await mongoose.disconnect();
  console.log('üëã –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ MongoDB');
  process.exit(0);
};

main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
  process.exit(1);
});