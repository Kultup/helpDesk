const mongoose = require('mongoose');
require('dotenv').config();

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/helpdesk');
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:', error);
    process.exit(1);
  }
}

async function fixRatingIndexes() {
  await connectDB();
  
  try {
    console.log('üîß –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –∫–æ–ª–µ–∫—Ü—ñ—ó ratings...');
    
    const db = mongoose.connection.db;
    const collection = db.collection('ratings');
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —ñ—Å–Ω—É—é—á–∏—Ö —ñ–Ω–¥–µ–∫—Å—ñ–≤
    const indexes = await collection.indexes();
    console.log('üìã –Ü—Å–Ω—É—é—á—ñ —ñ–Ω–¥–µ–∫—Å–∏:');
    indexes.forEach(index => {
      console.log(`   - ${index.name}: ${JSON.stringify(index.key)}`);
    });
    
    // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –Ω–∞ ticket
    try {
      await collection.dropIndex({ ticket: 1 });
      console.log('‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –Ω–∞ ticket');
    } catch (error) {
      if (error.code === 27) {
        console.log('‚ö†Ô∏è –Ü–Ω–¥–µ–∫—Å –Ω–∞ ticket –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–º–æ–∂–ª–∏–≤–æ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ)');
      } else {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É:', error.message);
      }
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å
    try {
      await collection.createIndex({ ticket: 1, user: 1 }, { unique: true });
      console.log('‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å (ticket + user)');
    } catch (error) {
      if (error.code === 85) {
        console.log('‚ö†Ô∏è –Ü–Ω–¥–µ–∫—Å –≤–∂–µ —ñ—Å–Ω—É—î');
      } else {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É:', error.message);
      }
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–æ–≤—ñ —ñ–Ω–¥–µ–∫—Å–∏
    const newIndexes = await collection.indexes();
    console.log('üìã –û–Ω–æ–≤–ª–µ–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏:');
    newIndexes.forEach(index => {
      console.log(`   - ${index.name}: ${JSON.stringify(index.key)}`);
    });
    
    console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ MongoDB');
  }
}

fixRatingIndexes();