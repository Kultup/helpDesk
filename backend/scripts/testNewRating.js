const mongoose = require('mongoose');
require('dotenv').config();
const Rating = require('../models/Rating');
const Ticket = require('../models/Ticket');
const User = require('../models/User');

// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –≤—Å—ñ –º–æ–¥–µ–ª—ñ
require('../models');

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/helpdesk');
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:', error);
    process.exit(1);
  }
}

async function testNewRating() {
  await connectDB();
  
  try {
    console.log('üß™ –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –æ—Ü—ñ–Ω–∫–∏...');
    
    // –°–∏–º—É–ª—é—î–º–æ callback data –∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–º 3
    const callbackData = 'rate_68d5340d74a2451a0116b1be_3';
    console.log('üìû Callback data:', callbackData);
    
    // –ü–∞—Ä—Å–∏–º–æ callback data
    if (callbackData.startsWith('rate_')) {
      const parts = callbackData.split('_');
      if (parts.length === 3) {
        const ticketId = parts[1];
        const rating = parseInt(parts[2]);
        
        console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ callback data —É—Å–ø—ñ—à–Ω–∏–π:');
        console.log(`   - Ticket ID: ${ticketId}`);
        console.log(`   - Rating: ${rating}`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç—ñ–∫–µ—Ç
        const ticket = await Ticket.findById(ticketId);
        if (ticket) {
          console.log(`‚úÖ –¢—ñ–∫–µ—Ç –∑–Ω–∞–π–¥–µ–Ω–æ: "${ticket.title}"`);
          
          // –®—É–∫–∞—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          let testUser = await User.findOne({ email: 'test2@example.com' });
          
          if (!testUser) {
            testUser = new User({
              email: 'test2@example.com',
              password: 'testpassword123',
              firstName: '–¢–µ—Å—Ç',
              lastName: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á2',
              position: '507f1f77bcf86cd799439011', // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID –ø–µ—Ä—à–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
              department: 'IT',
              city: '507f1f77bcf86cd799439012', // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID –ø–µ—Ä—à–æ–≥–æ –º—ñ—Å—Ç–∞
              registrationStatus: 'approved'
            });
            
            await testUser.save();
            console.log(`‚úÖ –ù–æ–≤–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${testUser.email}`);
          } else {
            console.log(`‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${testUser.email}`);
          }
          
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î –æ—Ü—ñ–Ω–∫–∞ –≤—ñ–¥ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          const existingRating = await Rating.findOne({
            ticket: ticketId,
            user: testUser._id
          });
          
          if (existingRating) {
            console.log('‚ö†Ô∏è –û—Ü—ñ–Ω–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ç—ñ–∫–µ—Ç–∞');
            console.log(`   - –ü–æ—Ç–æ—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞: ${existingRating.rating}/5`);
          } else {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –æ—Ü—ñ–Ω–∫—É
            const newRating = new Rating({
              ticket: ticketId,
              user: testUser._id,
              rating: rating,
              comment: `–¢–µ—Å—Ç–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ (${rating}/5) - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á 2`,
              categories: {
                responseTime: rating,
                solutionQuality: rating,
                communication: rating,
                overall: rating
              },
              wouldRecommend: rating >= 4,
              source: 'telegram'
            });
            
            await newRating.save();
            console.log('‚úÖ –ù–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ:');
            console.log(`   - –û—Ü—ñ–Ω–∫–∞: ${rating}/5`);
            console.log(`   - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${testUser.email}`);
            console.log(`   - –î–∂–µ—Ä–µ–ª–æ: Telegram`);
            console.log(`   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: ${rating >= 4 ? '–¢–∞–∫' : '–ù—ñ'}`);
          }
          
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ü—ñ–Ω–æ–∫ –¥–ª—è —Ü—å–æ–≥–æ —Ç—ñ–∫–µ—Ç–∞
          const totalRatings = await Rating.countDocuments({ ticket: ticketId });
          console.log(`üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ü—ñ–Ω–æ–∫ –¥–ª—è —Ç—ñ–∫–µ—Ç–∞: ${totalRatings}`);
          
        } else {
          console.log('‚ùå –¢—ñ–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
      } else {
        console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback data');
      }
    } else {
      console.log('‚ùå Callback data –Ω–µ —î –æ—Ü—ñ–Ω–∫–æ—é');
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –æ—Ü—ñ–Ω–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ MongoDB');
  }
}

testNewRating();