const mongoose = require('mongoose');
require('dotenv').config();

// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –≤—Å—ñ –º–æ–¥–µ–ª—ñ
require('../models');

async function testRating() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB');

    const Ticket = require('../models/Ticket');
    const User = require('../models/User');
    const Rating = require('../models/Rating');

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à–∏–π —Ç—ñ–∫–µ—Ç –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º resolved
    const ticket = await Ticket.findOne({ status: 'resolved' });
    if (!ticket) {
      console.log('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç—ñ–∫–µ—Ç—ñ–≤ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º "resolved"');
      process.exit(1);
    }

    console.log(`üìã –ó–Ω–∞–π–¥–µ–Ω–æ —Ç—ñ–∫–µ—Ç: ${ticket.title} (ID: ${ticket._id})`);

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    let user = await User.findOne({ email: 'test@example.com' });
    if (!user) {
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à—É –ø–æ–∑–∏—Ü—ñ—é —Ç–∞ –º—ñ—Å—Ç–æ
      const Position = require('../models/Position');
      const City = require('../models/City');
      
      const position = await Position.findOne();
      const city = await City.findOne();
      
      if (!position || !city) {
        console.log('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü—ñ—é –∞–±–æ –º—ñ—Å—Ç–æ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
        process.exit(1);
      }

      user = new User({
        firstName: '–¢–µ—Å—Ç–æ–≤–∏–π',
        lastName: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
        email: 'test@example.com',
        password: 'test123',
        position: position._id,
        department: 'IT',
        city: city._id,
        role: 'user',
        isActive: true,
        registrationStatus: 'approved'
      });
      await user.save();
      console.log('üë§ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
    } else {
      console.log('üë§ –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î –æ—Ü—ñ–Ω–∫–∞ –¥–ª—è —Ü—å–æ–≥–æ —Ç—ñ–∫–µ—Ç–∞
    const existingRating = await Rating.findOne({ ticket: ticket._id });
    if (existingRating) {
      console.log('‚≠ê –û—Ü—ñ–Ω–∫–∞ –¥–ª—è —Ü—å–æ–≥–æ —Ç—ñ–∫–µ—Ç–∞ –≤–∂–µ —ñ—Å–Ω—É—î');
      console.log(`–û—Ü—ñ–Ω–∫–∞: ${existingRating.rating}/5, –ö–æ–º–µ–Ω—Ç–∞—Ä: ${existingRating.comment || '–ù–µ–º–∞—î'}`);
      process.exit(0);
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –æ—Ü—ñ–Ω–∫—É
    const rating = new Rating({
      ticket: ticket._id,
      user: user._id,
      rating: 5,
      comment: '–í—ñ–¥–º—ñ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞! –ü—Ä–æ–±–ª–µ–º—É –≤–∏—Ä—ñ—à–µ–Ω–æ —à–≤–∏–¥–∫–æ —Ç–∞ —è–∫—ñ—Å–Ω–æ.',
      categories: {
        speed: 5,
        quality: 5,
        communication: 4,
        professionalism: 5
      },
      wouldRecommend: true
    });

    await rating.save();
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—É –æ—Ü—ñ–Ω–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    console.log(`‚≠ê –û—Ü—ñ–Ω–∫–∞: ${rating.rating}/5`);
    console.log(`üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: ${rating.comment}`);
    console.log(`üìä –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó: –®–≤–∏–¥–∫—ñ—Å—Ç—å: ${rating.categories.speed}, –Ø–∫—ñ—Å—Ç—å: ${rating.categories.quality}, –ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è: ${rating.categories.communication}, –ü—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–∑–º: ${rating.categories.professionalism}`);
    console.log(`üëç –†–µ–∫–æ–º–µ–Ω–¥—É—î: ${rating.wouldRecommend ? '–¢–∞–∫' : '–ù—ñ'}`);

    process.exit(0);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
    process.exit(1);
  }
}

testRating();