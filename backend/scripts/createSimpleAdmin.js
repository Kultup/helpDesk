const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
require('dotenv').config();

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB');
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:', error);
    process.exit(1);
  }
};

const createAdmin = async () => {
  try {
    await connectDB();
    
    // –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await mongoose.connection.db.collection('users').deleteMany({ email: 'admin@test.com' });
    console.log('–°—Ç–∞—Ä–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–∏–¥–∞–ª–µ–Ω–æ');
    
    // –•–µ—à—É—î–º–æ –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash('admin123', 12);
    console.log('–ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–æ–≤–∞–Ω–æ');
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const adminData = {
      email: 'admin@test.com',
      password: hashedPassword,
      firstName: '–ê–¥–º—ñ–Ω',
      lastName: '–°–∏—Å—Ç–µ–º–∏',
      role: 'admin',
      department: 'IT –≤—ñ–¥–¥—ñ–ª',
      city: new mongoose.Types.ObjectId(), // –¢–∏–º—á–∞—Å–æ–≤–∏–π ObjectId
      position: new mongoose.Types.ObjectId(), // –¢–∏–º—á–∞—Å–æ–≤–∏–π ObjectId
      registrationStatus: 'approved',
      isActive: true,
      isEmailVerified: true,
      permissions: ['view_analytics'],
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    const result = await mongoose.connection.db.collection('users').insertOne(adminData);
    console.log('‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ:', result.insertedId);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ
    const admin = await mongoose.connection.db.collection('users').findOne({ _id: result.insertedId });
    console.log('üìß Email:', admin.email);
    console.log('üîê –ü–∞—Ä–æ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', !!admin.password);
    
    // –¢–µ—Å—Ç—É—î–º–æ –ø–∞—Ä–æ–ª—å
    const isValid = await bcrypt.compare('admin123', admin.password);
    console.log('üîç –ü–∞—Ä–æ–ª—å –≤–∞–ª—ñ–¥–Ω–∏–π:', isValid ? '‚úÖ –¢–∞–∫' : '‚ùå –ù—ñ');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
  } finally {
    mongoose.connection.close();
  }
};

createAdmin();