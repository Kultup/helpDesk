const ngrok = require('ngrok');
require('dotenv').config();

async function startFrontendNgrok() {
  try {
    const authtoken = process.env.NGROK_AUTHTOKEN;
    const region = process.env.NGROK_REGION || 'us';
    const port = 3000;

    if (!authtoken || authtoken === 'your_ngrok_authtoken_here') {
      throw new Error('NGROK_AUTHTOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ');
    }

    console.log('üîë –ù–∞–ª–∞—à—Ç–æ–≤—É—é ngrok authtoken...');
    await ngrok.authtoken(authtoken);

    console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞—é ngrok —Ç—É–Ω–µ–ª—å –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É –Ω–∞ –ø–æ—Ä—Ç ${port}...`);
    const url = await ngrok.connect({ addr: port, region, authtoken });
    const publicUrl = url.startsWith('http') ? url : `https://${url}`;

    console.log(`üåê Ngrok FRONTEND tunnel –∑–∞–ø—É—â–µ–Ω–æ: ${publicUrl}`);
    console.log('üéØ –¢—É–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∏–π. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏.');

    const cleanup = async () => {
      console.log('\nüõë –ó—É–ø–∏–Ω—è—é ngrok (frontend)...');
      try {
        await ngrok.disconnect();
        await ngrok.kill();
        console.log('‚úÖ Ngrok (frontend) –∑—É–ø–∏–Ω–µ–Ω–æ');
      } catch (e) {
        console.error('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ ngrok (frontend):', e.message);
      }
      process.exit(0);
    };

    process.on('SIGINT', cleanup);
    process.on('SIGTERM', cleanup);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É ngrok –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É:', error.message);
    console.error('üîç –ü–æ–≤–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
    process.exit(1);
  }
}

startFrontendNgrok();