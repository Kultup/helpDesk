const City = require('../models/City');
const User = require('../models/User');
const Ticket = require('../models/Ticket');
const { validationResult } = require('express-validator');
const mongoose = require('mongoose');
const logger = require('../utils/logger');

// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –º—ñ—Å—Ç–∞ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
exports.getAllCities = async (req, res) => {
  try {
    const {
      page = 1,
      limit = 10,
      region,
      search,
      sortBy = 'name',
      sortOrder = 'asc',
      withStatistics = false
    } = req.query;

    // –ü–æ–±—É–¥–æ–≤–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    const filters = {};
    
    if (region) filters.region = region;
    
    // –ü–æ—à—É–∫ –ø–æ –Ω–∞–∑–≤—ñ –º—ñ—Å—Ç–∞
    if (search) {
      filters.name = { $regex: search, $options: 'i' };
    }

    const options = {
      page: parseInt(page),
      limit: parseInt(limit),
      sort: { [sortBy]: sortOrder === 'desc' ? -1 : 1 }
    };

    const cities = await City.paginate(filters, options);

    // –î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if (withStatistics === 'true') {
      for (let city of cities.docs) {
        const [userCount, ticketCount] = await Promise.all([
          User.countDocuments({ city: city._id, isActive: true }),
          Ticket.countDocuments({ city: city._id })
        ]);
        
        city._doc.statistics = {
          userCount,
          ticketCount
        };
      }
    }

    res.json({
      success: true,
      data: cities.docs,
      pagination: {
        currentPage: cities.page,
        totalPages: cities.totalPages,
        totalItems: cities.totalDocs,
        hasNext: cities.hasNextPage,
        hasPrev: cities.hasPrevPage
      }
    });
  } catch (error) {
    logger.error('Error fetching cities:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º—ñ—Å—Ç',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ –º—ñ—Å—Ç–æ –∑–∞ ID
exports.getCityById = async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤—ñ—Ä–Ω–∏–π ID –º—ñ—Å—Ç–∞'
      });
    }

    const city = await City.findById(id);

    if (!city) {
      return res.status(404).json({
        success: false,
        message: '–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º—ñ—Å—Ç–∞
    const [userCount, ticketCount, recentTickets] = await Promise.all([
      User.countDocuments({ city: id, isActive: true }),
      Ticket.countDocuments({ city: id }),
      Ticket.find({ city: id })
        .sort({ createdAt: -1 })
        .limit(5)
        .populate('createdBy', 'firstName lastName')
        .populate('assignedTo', 'firstName lastName')
        .select('title status priority createdAt')
    ]);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö —Ç–∏–∫–µ—Ç—ñ–≤
    const ticketStatusStats = await Ticket.aggregate([
      { $match: { city: new mongoose.Types.ObjectId(id) } },
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 }
        }
      }
    ]);

    res.json({
      success: true,
      data: {
        ...city.toObject(),
        statistics: {
          userCount,
          ticketCount,
          ticketStatusStats: ticketStatusStats.reduce((acc, stat) => {
            acc[stat._id] = stat.count;
            return acc;
          }, {}),
          recentTickets
        }
      }
    });
  } catch (error) {
    logger.error('Error fetching city:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º—ñ—Å—Ç–∞',
      error: error.message
    });
  }
};

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –º—ñ—Å—Ç–æ
exports.createCity = async (req, res) => {
  try {
    logger.info('üèôÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ—Å—Ç–∞ - –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑–∞–ø–∏—Ç—É:', JSON.stringify(req.body, null, 2));
    
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      logger.info('‚ùå –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:', errors.array());
      return res.status(400).json({
        success: false,
        message: '–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó',
        errors: errors.array()
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ—Å—Ç'
      });
    }

    const {
      name,
      nameEn,
      region,
      coordinates,
      population,
      timezone,
      postalCodes,
      description
    } = req.body;

    logger.info('üèôÔ∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ—Å—Ç–∞:', coordinates);
    logger.info('üèôÔ∏è –¢–∏–ø –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', typeof coordinates);
    if (coordinates) {
      logger.info('üèôÔ∏è –®–∏—Ä–æ—Ç–∞:', coordinates.lat, '–¢–∏–ø:', typeof coordinates.lat);
      logger.info('üèôÔ∏è –î–æ–≤–≥–æ—Ç–∞:', coordinates.lng, '–¢–∏–ø:', typeof coordinates.lng);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞
    const existingCity = await City.findOne({ 
      name: { $regex: new RegExp(`^${name}$`, 'i') } 
    });
    
    if (existingCity) {
      return res.status(400).json({
        success: false,
        message: '–ú—ñ—Å—Ç–æ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î'
      });
    }

    const cityData = {
      name,
      nameEn,
      region,
      coordinates,
      population,
      timezone,
      postalCodes,
      description,
      createdBy: req.user._id
    };

    logger.info('üèôÔ∏è –î–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ—Å—Ç–∞:', JSON.stringify(cityData, null, 2));

    const city = new City(cityData);

    logger.info('üèôÔ∏è –û–±\'—î–∫—Ç –º—ñ—Å—Ç–∞ –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º:', JSON.stringify(city.toObject(), null, 2));

    await city.save();

    logger.info('‚úÖ –ú—ñ—Å—Ç–æ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', city._id);

    res.status(201).json({
      success: true,
      message: '–ú—ñ—Å—Ç–æ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ',
      data: city
    });
  } catch (error) {
    logger.error('Error creating city:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –º—ñ—Å—Ç–∞',
      error: error.message
    });
  }
};

// –û–Ω–æ–≤–∏—Ç–∏ –º—ñ—Å—Ç–æ
exports.updateCity = async (req, res) => {
  try {
    const { id } = req.params;
    const errors = validationResult(req);
    
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: '–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó',
        errors: errors.array()
      });
    }

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤—ñ—Ä–Ω–∏–π ID –º—ñ—Å—Ç–∞'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –º—ñ—Å—Ç'
      });
    }

    const city = await City.findById(id);
    if (!city) {
      return res.status(404).json({
        success: false,
        message: '–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    const {
      name,
      nameEn,
      region,
      coordinates,
      population,
      timezone,
      postalCodes,
      description,
      isActive
    } = req.body;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞ (—è–∫—â–æ –∑–º—ñ–Ω—é—î—Ç—å—Å—è)
    if (name && name !== city.name) {
      const existingCity = await City.findOne({ 
        name: { $regex: new RegExp(`^${name}$`, 'i') },
        _id: { $ne: id }
      });
      
      if (existingCity) {
        return res.status(400).json({
          success: false,
          message: '–ú—ñ—Å—Ç–æ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î'
        });
      }
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—ñ–≤
    if (name !== undefined) city.name = name;
    if (nameEn !== undefined) city.nameEn = nameEn;
    if (region !== undefined) city.region = region;
    if (coordinates !== undefined) city.coordinates = coordinates;
    if (population !== undefined) city.population = population;
    if (timezone !== undefined) city.timezone = timezone;
    if (postalCodes !== undefined) city.postalCodes = postalCodes;
    if (description !== undefined) city.description = description;
    if (isActive !== undefined) city.isActive = isActive;

    city.lastModifiedBy = req.user._id;
    await city.save();

    res.json({
      success: true,
      message: '–ú—ñ—Å—Ç–æ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ',
      data: city
    });
  } catch (error) {
    logger.error('Error updating city:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º—ñ—Å—Ç–∞',
      error: error.message
    });
  }
};

// –í–∏–¥–∞–ª–∏—Ç–∏ –º—ñ—Å—Ç–æ
exports.deleteCity = async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤—ñ—Ä–Ω–∏–π ID –º—ñ—Å—Ç–∞'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º—ñ—Å—Ç'
      });
    }

    const city = await City.findById(id);
    if (!city) {
      return res.status(404).json({
        success: false,
        message: '–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∞–±–æ —Ç–∏–∫–µ—Ç–∏ –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ —Ü–∏–º –º—ñ—Å—Ç–æ–º
    const [userCount, ticketCount] = await Promise.all([
      User.countDocuments({ city: id }),
      Ticket.countDocuments({ city: id })
    ]);

    if (userCount > 0 || ticketCount > 0) {
      return res.status(400).json({
        success: false,
        message: `–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –º—ñ—Å—Ç–æ. –ó –Ω–∏–º –ø–æ–≤'—è–∑–∞–Ω–æ ${userCount} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ ${ticketCount} —Ç–∏–∫–µ—Ç—ñ–≤. –°–ø–æ—á–∞—Ç–∫—É –¥–µ–∞–∫—Ç–∏–≤—É–π—Ç–µ –º—ñ—Å—Ç–æ.`
      });
    }

    await City.findByIdAndDelete(id);

    res.json({
      success: true,
      message: '–ú—ñ—Å—Ç–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ'
    });
  } catch (error) {
    logger.error('Error deleting city:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –º—ñ—Å—Ç–∞',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä–µ–≥—ñ–æ–Ω—ñ–≤
exports.getRegions = async (req, res) => {
  try {
    const regions = await City.distinct('region', { isActive: true });
    
    // –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö
    const regionStats = await City.aggregate([
      { $match: { isActive: true } },
      {
        $group: {
          _id: '$region',
          cityCount: { $sum: 1 }
        }
      },
      { $sort: { _id: 1 } }
    ]);

    const regionsWithStats = regionStats.map(stat => ({
      name: stat._id,
      cityCount: stat.cityCount
    }));

    res.json({
      success: true,
      data: regionsWithStats
    });
  } catch (error) {
    logger.error('Error fetching regions:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ–≥—ñ–æ–Ω—ñ–≤',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º—ñ—Å—Ç
exports.getCityStatistics = async (req, res) => {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º—ñ—Å—Ç'
      });
    }

    const { region, limit = 10 } = req.query;

    // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const generalStats = await City.aggregate([
      {
        $group: {
          _id: null,
          totalCities: { $sum: 1 },
          activeCities: { $sum: { $cond: ['$isActive', 1, 0] } },
          totalPopulation: { $sum: '$population' }
        }
      }
    ]);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö
    const regionStats = await City.aggregate([
      { $match: { isActive: true } },
      {
        $group: {
          _id: '$region',
          cityCount: { $sum: 1 },
          totalPopulation: { $sum: '$population' }
        }
      },
      { $sort: { cityCount: -1 } }
    ]);

    // –¢–æ–ø –º—ñ—Å—Ç –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    const cityUserStats = await User.aggregate([
      { $match: { isActive: true, city: { $ne: null } } },
      {
        $lookup: {
          from: 'cities',
          localField: 'city',
          foreignField: '_id',
          as: 'cityInfo'
        }
      },
      { $unwind: '$cityInfo' },
      ...(region ? [{ $match: { 'cityInfo.region': region } }] : []),
      {
        $group: {
          _id: '$city',
          cityName: { $first: '$cityInfo.name' },
          region: { $first: '$cityInfo.region' },
          userCount: { $sum: 1 }
        }
      },
      { $sort: { userCount: -1 } },
      { $limit: parseInt(limit) }
    ]);

    // –¢–æ–ø –º—ñ—Å—Ç –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ç–∏–∫–µ—Ç—ñ–≤
    const cityTicketStats = await Ticket.aggregate([
      { $match: { city: { $ne: null } } },
      {
        $lookup: {
          from: 'cities',
          localField: 'city',
          foreignField: '_id',
          as: 'cityInfo'
        }
      },
      { $unwind: '$cityInfo' },
      ...(region ? [{ $match: { 'cityInfo.region': region } }] : []),
      {
        $group: {
          _id: '$city',
          cityName: { $first: '$cityInfo.name' },
          region: { $first: '$cityInfo.region' },
          ticketCount: { $sum: 1 },
          openTickets: { $sum: { $cond: [{ $eq: ['$status', 'open'] }, 1, 0] } },
          resolvedTickets: { $sum: { $cond: [{ $eq: ['$status', 'resolved'] }, 1, 0] } }
        }
      },
      { $sort: { ticketCount: -1 } },
      { $limit: parseInt(limit) }
    ]);

    const stats = generalStats[0] || {
      totalCities: 0,
      activeCities: 0,
      totalPopulation: 0
    };

    res.json({
      success: true,
      data: {
        general: stats,
        byRegion: regionStats,
        topCitiesByUsers: cityUserStats,
        topCitiesByTickets: cityTicketStats,
        generatedAt: new Date()
      }
    });
  } catch (error) {
    logger.error('Error fetching city statistics:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º—ñ—Å—Ç',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ—ó –∫–∞—Ä—Ç–∏
exports.getHeatMapData = async (req, res) => {
  try {
    const { 
      startDate, 
      endDate, 
      status, 
      priority,
      region 
    } = req.query;

    // –ü–æ–±—É–¥–æ–≤–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–ª—è —Ç–∏–∫–µ—Ç—ñ–≤
    const ticketFilters = {};
    
    if (startDate || endDate) {
      ticketFilters.createdAt = {};
      if (startDate) ticketFilters.createdAt.$gte = new Date(startDate);
      if (endDate) ticketFilters.createdAt.$lte = new Date(endDate);
    }
    
    if (status) ticketFilters.status = status;
    if (priority) ticketFilters.priority = priority;

    // –ê–≥—Ä–µ–≥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ—ó –∫–∞—Ä—Ç–∏
    const heatMapData = await Ticket.aggregate([
      { $match: ticketFilters },
      {
        $lookup: {
          from: 'cities',
          localField: 'city',
          foreignField: '_id',
          as: 'cityInfo'
        }
      },
      { $unwind: '$cityInfo' },
      ...(region ? [{ $match: { 'cityInfo.region': region } }] : []),
      {
        $group: {
          _id: '$city',
          cityName: { $first: '$cityInfo.name' },
          region: { $first: '$cityInfo.region' },
          coordinates: { $first: '$cityInfo.coordinates' },
          ticketCount: { $sum: 1 },
          openTickets: { $sum: { $cond: [{ $eq: ['$status', 'open'] }, 1, 0] } },
          inProgressTickets: { $sum: { $cond: [{ $eq: ['$status', 'in_progress'] }, 1, 0] } },
          resolvedTickets: { $sum: { $cond: [{ $eq: ['$status', 'resolved'] }, 1, 0] } },
          closedTickets: { $sum: { $cond: [{ $eq: ['$status', 'closed'] }, 1, 0] } },
          highPriorityTickets: { $sum: { $cond: [{ $eq: ['$priority', 'high'] }, 1, 0] } },
          mediumPriorityTickets: { $sum: { $cond: [{ $eq: ['$priority', 'medium'] }, 1, 0] } },
          lowPriorityTickets: { $sum: { $cond: [{ $eq: ['$priority', 'low'] }, 1, 0] } }
        }
      },
      { $sort: { ticketCount: -1 } }
    ]);

    // –î–æ–¥–∞—Ç–∏ –º—ñ—Å—Ç–∞ –±–µ–∑ —Ç–∏–∫–µ—Ç—ñ–≤ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
    const citiesWithoutTickets = await City.find({
      isActive: true,
      ...(region ? { region } : {}),
      _id: { $nin: heatMapData.map(item => item._id) }
    }).select('name region coordinates');

    const citiesWithZeroTickets = citiesWithoutTickets.map(city => ({
      _id: city._id,
      cityName: city.name,
      region: city.region,
      coordinates: city.coordinates,
      ticketCount: 0,
      openTickets: 0,
      inProgressTickets: 0,
      resolvedTickets: 0,
      closedTickets: 0,
      highPriorityTickets: 0,
      mediumPriorityTickets: 0,
      lowPriorityTickets: 0
    }));

    const allData = [...heatMapData, ...citiesWithZeroTickets];

    res.json({
      success: true,
      data: allData,
      filters: {
        startDate,
        endDate,
        status,
        priority,
        region
      },
      generatedAt: new Date()
    });
  } catch (error) {
    logger.error('Error fetching heat map data:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ—ó –∫–∞—Ä—Ç–∏',
      error: error.message
    });
  }
};

// –ü–æ—à—É–∫ –º—ñ—Å—Ç
exports.searchCities = async (req, res) => {
  try {
    const { q } = req.query;
    const cities = await City.find({
      $or: [
        { name: { $regex: q, $options: 'i' } },
        { region: { $regex: q, $options: 'i' } }
      ]
    }).limit(20);

    res.json({
      success: true,
      data: cities
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –º—ñ—Å—Ç',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ –º—ñ—Å—Ç–∞ –∑–∞ —Ä–µ–≥—ñ–æ–Ω–æ–º
exports.getCitiesByRegion = async (req, res) => {
  try {
    const { region } = req.params;
    const cities = await City.find({ region });

    res.json({
      success: true,
      data: cities
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º—ñ—Å—Ç —Ä–µ–≥—ñ–æ–Ω—É',
      error: error.message
    });
  }
};

// –ï–∫—Å–ø–æ—Ä—Ç –º—ñ—Å—Ç
exports.exportCities = async (req, res) => {
  try {
    const cities = await City.find({});
    res.json({
      success: true,
      data: cities,
      message: '–î–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –¥–∞–Ω–∏—Ö',
      error: error.message
    });
  }
};

// –ú–∞—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º—ñ—Å—Ç
exports.bulkUpdateCities = async (req, res) => {
  try {
    const { cityIds, updates } = req.body;
    await City.updateMany(
      { _id: { $in: cityIds } },
      { $set: updates }
    );

    res.json({
      success: true,
      message: '–ú—ñ—Å—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–∞—Å–æ–≤–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ',
      error: error.message
    });
  }
};

// –ú–∞—Å–æ–≤–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º—ñ—Å—Ç
exports.bulkDeleteCities = async (req, res) => {
  try {
    const { cityIds } = req.body;
    await City.deleteMany({ _id: { $in: cityIds } });

    res.json({
      success: true,
      message: '–ú—ñ—Å—Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–∞—Å–æ–≤–æ–º—É –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ',
      error: error.message
    });
  }
};

// –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –º—ñ—Å—Ç–∞
exports.toggleCityStatus = async (req, res) => {
  try {
    const city = await City.findById(req.params.id);
    if (!city) {
      return res.status(404).json({
        success: false,
        message: '–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    city.isActive = !city.isActive;
    await city.save();

    res.json({
      success: true,
      data: city,
      message: '–°—Ç–∞—Ç—É—Å –º—ñ—Å—Ç–∞ –∑–º—ñ–Ω–µ–Ω–æ'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –º—ñ—Å—Ç–∞
exports.getCityUsers = async (req, res) => {
  try {
    const users = await User.find({ city: req.params.id });
    res.json({
      success: true,
      data: users
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∏–∫–µ—Ç–∏ –º—ñ—Å—Ç–∞
exports.getCityTickets = async (req, res) => {
  try {
    const tickets = await Ticket.find({ city: req.params.id });
    res.json({
      success: true,
      data: tickets
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–∏–∫–µ—Ç—ñ–≤',
      error: error.message
    });
  }
};

// –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º—ñ—Å—Ç–∞
exports.getCityDetailedStatistics = async (req, res) => {
  try {
    const cityId = req.params.id;
    const ticketCount = await Ticket.countDocuments({ city: cityId });
    const userCount = await User.countDocuments({ city: cityId });

    res.json({
      success: true,
      data: {
        ticketCount,
        userCount
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      error: error.message
    });
  }
};

// –Ü–º–ø–æ—Ä—Ç –º—ñ—Å—Ç
exports.importCities = async (req, res) => {
  try {
    const { data } = req.body;
    await City.insertMany(data);

    res.json({
      success: true,
      message: '–î–∞–Ω—ñ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ –¥–∞–Ω–∏—Ö',
      error: error.message
    });
  }
};

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –º—ñ—Å—Ç
exports.validateCityData = async (req, res) => {
  try {
    res.json({
      success: true,
      message: '–î–∞–Ω—ñ –≤–∞–ª—ñ–¥–Ω—ñ'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—É—Å—ñ–¥–Ω—ñ –º—ñ—Å—Ç–∞
exports.getNearbyCities = async (req, res) => {
  try {
    const cities = await City.find({}).limit(10);
    res.json({
      success: true,
      data: cities
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—É—Å—ñ–¥–Ω—ñ—Ö –º—ñ—Å—Ç',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ –º—ñ—Å—Ç–∞ –¥–ª—è –∫–∞—Ä—Ç–∏
exports.getCitiesForMap = async (req, res) => {
  try {
    const cities = await City.find({});
    res.json({
      success: true,
      data: cities
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º—ñ—Å—Ç –¥–ª—è –∫–∞—Ä—Ç–∏',
      error: error.message
    });
  }
};

// –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ–º –¥–∂–µ—Ä–µ–ª–æ–º
exports.syncWithExternalSource = async (req, res) => {
  try {
    res.json({
      success: true,
      message: '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó',
      error: error.message
    });
  }
};

// –Ü—Å—Ç–æ—Ä—ñ—è –∑–º—ñ–Ω –º—ñ—Å—Ç–∞
exports.getCityHistory = async (req, res) => {
  try {
    res.json({
      success: true,
      data: [],
      message: '–Ü—Å—Ç–æ—Ä—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∞'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó',
      error: error.message
    });
  }
};

// –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∞
exports.restoreCity = async (req, res) => {
  try {
    const city = await City.findById(req.params.id);
    if (!city) {
      return res.status(404).json({
        success: false,
        message: '–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    res.json({
      success: true,
      data: city,
      message: '–ú—ñ—Å—Ç–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ',
      error: error.message
    });
  }
};
