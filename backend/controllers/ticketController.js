const Ticket = require('../models/Ticket');
const User = require('../models/User');
const City = require('../models/City');
const Comment = require('../models/Comment');
const Attachment = require('../models/Attachment');
const { validationResult } = require('express-validator');
const mongoose = require('mongoose');
const { Parser } = require('json2csv');
const ExcelJS = require('exceljs');
const telegramService = require('../services/telegramServiceInstance');
const logger = require('../utils/logger');
logger.info('üì± telegramService —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ:', typeof telegramService);

// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ç–∏–∫–µ—Ç–∏ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
exports.getTickets = async (req, res) => {
  try {
    const {
      page = 1,
      limit = 10,
      status,
      priority,
      city,
      assignedTo,
      createdBy,
      search,
      sortBy = 'createdAt',
      sortOrder = 'desc',
      dateFrom,
      dateTo
    } = req.query;

    // –ü–æ–±—É–¥–æ–≤–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    const filters = {};
    
    if (status) filters.status = status;
    if (priority) filters.priority = priority;
    if (city) filters.city = city;
    if (assignedTo) filters.assignedTo = assignedTo;
    if (createdBy) filters.createdBy = createdBy;
    
    // –ü–æ—à—É–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    if (search) {
      filters.$or = [
        { title: { $regex: search, $options: 'i' } },
        { description: { $regex: search, $options: 'i' } },
        { ticketNumber: { $regex: search, $options: 'i' } }
      ];
    }
    
    // –§—ñ–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞—Ö
    if (dateFrom || dateTo) {
      filters.createdAt = {};
      if (dateFrom) filters.createdAt.$gte = new Date(dateFrom);
      if (dateTo) filters.createdAt.$lte = new Date(dateTo);
    }

    logger.info('Filters before access check:', JSON.stringify(filters));
    logger.info('User:', { role: req.user.role, id: req.user._id.toString() });

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin') {
      // –ó–≤–∏—á–∞–π–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –±–∞—á–∞—Ç—å —Ç—ñ–ª—å–∫–∏ —Å–≤–æ—ó —Ç–∏–∫–µ—Ç–∏ –∞–±–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ —ó–º
      filters.$or = [
        { createdBy: req.user._id },
        { assignedTo: req.user._id }
      ];
    }

    const options = {
      page: parseInt(page),
      limit: parseInt(limit),
      sort: { [sortBy]: sortOrder === 'desc' ? -1 : 1 },
      populate: [
        { path: 'createdBy', select: 'firstName lastName email position' },
        { path: 'assignedTo', select: 'firstName lastName email position' },
        { path: 'city', select: 'name region' }
      ]
    };

    const tickets = await Ticket.paginate(filters, options);

    logger.info('Tickets fetched:', { total: tickets.totalDocs, page: tickets.page, filters: JSON.stringify(filters) });

    // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ Mongoose –¥–æ–∫—É–º–µ–Ω—Ç–∏ –≤ –ø—Ä–æ—Å—Ç—ñ –æ–±'—î–∫—Ç–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó JSON —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    const ticketsData = tickets.docs.map(ticket => ticket.toObject());

    res.json({
      success: true,
      data: ticketsData,
      pagination: {
        totalItems: tickets.totalDocs,
        currentPage: tickets.page,
        totalPages: tickets.totalPages,
        itemsPerPage: tickets.limit,
        hasNext: tickets.hasNextPage,
        hasPrev: tickets.hasPrevPage
      }
    });
  } catch (error) {
    logger.error('Error fetching tickets:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–∏–∫–µ—Ç—ñ–≤',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∏–∫–µ—Ç –∑–∞ ID
exports.getTicketById = async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤—ñ—Ä–Ω–∏–π ID —Ç–∏–∫–µ—Ç—É'
      });
    }

    const ticket = await Ticket.findById(id)
      .populate('createdBy', 'firstName lastName email position avatar')
      .populate('assignedTo', 'firstName lastName email position avatar')
      .populate('city', 'name region coordinates')
      .populate('watchers', 'firstName lastName email');

    if (!ticket) {
      return res.status(404).json({
        success: false,
        message: '–¢–∏–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin' && 
        !ticket.createdBy.equals(req.user._id) && 
        !ticket.assignedTo?.equals(req.user._id) &&
        !ticket.watchers.some(watcher => watcher._id.equals(req.user._id))) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ —Ç–∏–∫–µ—Ç—É'
      });
    }

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ —Ç–∞ –≤–∫–ª–∞–¥–µ–Ω–Ω—è
    const [comments, attachments] = await Promise.all([
      Comment.findByTicket(id),
      Attachment.findByTicket(id)
    ]);

    res.json({
      success: true,
      data: {
        ...ticket.toObject(),
        comments,
        attachments
      }
    });
  } catch (error) {
    logger.error('Error fetching ticket:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–∏–∫–µ—Ç—É',
      error: error.message
    });
  }
};

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ç–∏–∫–µ—Ç
exports.createTicket = async (req, res) => {
  try {
    logger.info('üé´ –ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É, –¥–∞–Ω—ñ:', req.body);
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: '–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó',
        errors: errors.array()
      });
    }

    const {
      title,
      description,
      priority = 'medium',
      category,
      subcategory,
      city,
      assignedTo,
      dueDate,
      estimatedHours,
      tags
    } = req.body;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –º—ñ—Å—Ç–∞
    if (city) {
      const cityExists = await City.findById(city);
      if (!cityExists) {
        return res.status(400).json({
          success: false,
          message: '–í–∫–∞–∑–∞–Ω–µ –º—ñ—Å—Ç–æ –Ω–µ —ñ—Å–Ω—É—î'
        });
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if (assignedTo) {
      const userExists = await User.findById(assignedTo);
      if (!userExists) {
        return res.status(400).json({
          success: false,
          message: '–í–∫–∞–∑–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —ñ—Å–Ω—É—î'
        });
      }
    }

    const ticket = new Ticket({
      title,
      description,
      priority,
      category,
      subcategory,
      city,
      assignedTo,
      createdBy: req.user._id,
      dueDate: dueDate ? new Date(dueDate) : null,
      estimatedHours,
      tags: tags || []
    });

    await ticket.save();
    logger.info('‚úÖ –¢—ñ–∫–µ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:', ticket._id);

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ Telegram –≥—Ä—É–ø—É –ø—Ä–æ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç
    logger.info('üéØ –í–∏–∫–ª–∏–∫–∞—é —Ñ—É–Ω–∫—Ü—ñ—é –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è —Ç—ñ–∫–µ—Ç—É:', ticket._id);
    logger.info('üì± telegramService —Ç–∏–ø:', typeof telegramService);
    logger.info('üì± telegramService –º–µ—Ç–æ–¥–∏:', Object.getOwnPropertyNames(Object.getPrototypeOf(telegramService)));
    
    try {
      logger.info('üöÄ –ü–æ—á–∏–Ω–∞—é –≤—ñ–¥–ø—Ä–∞–≤–∫—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è...');
      await telegramService.sendNewTicketNotificationToGroup(ticket, req.user);
      logger.info('‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç:', error);
      // –ù–µ –∑—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏
    }

    // –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    await ticket.populate([
      { path: 'createdBy', select: 'firstName lastName email' },
      { path: 'assignedTo', select: 'firstName lastName email' },
      { path: 'city', select: 'name region' }
    ]);

    res.status(201).json({
      success: true,
      message: '–¢–∏–∫–µ—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ',
      data: ticket
    });
  } catch (error) {
    logger.error('Error creating ticket:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–∏–∫–µ—Ç—É',
      error: error.message
    });
  }
};

// –û–Ω–æ–≤–∏—Ç–∏ —Ç–∏–∫–µ—Ç
exports.updateTicket = async (req, res) => {
  try {
    const { id } = req.params;
    logger.info(`üöÄ updateTicket –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è —Ç—ñ–∫–µ—Ç—É ${id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ${req.user.email}`);
    const errors = validationResult(req);
    
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: '–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó',
        errors: errors.array()
      });
    }

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤—ñ—Ä–Ω–∏–π ID —Ç–∏–∫–µ—Ç—É'
      });
    }

    const ticket = await Ticket.findById(id);
    if (!ticket) {
      return res.status(404).json({
        success: false,
        message: '–¢–∏–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin' && 
        !ticket.createdBy.equals(req.user._id) && 
        !ticket.assignedTo?.equals(req.user._id)) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ —Ç–∏–∫–µ—Ç—É'
      });
    }

    const {
      title,
      description,
      status,
      priority,
      category,
      subcategory,
      city,
      assignedTo,
      dueDate,
      estimatedHours,
      actualHours,
      tags
    } = req.body;

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω
    const previousState = {
      status: ticket.status,
      priority: ticket.priority,
      assignedTo: ticket.assignedTo
    };

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—ñ–≤
    if (title !== undefined) ticket.title = title;
    if (description !== undefined) ticket.description = description;
    if (priority !== undefined) ticket.priority = priority;
    if (category !== undefined) ticket.category = category;
    if (subcategory !== undefined) ticket.subcategory = subcategory;
    if (city !== undefined) ticket.city = city;
    if (dueDate !== undefined) ticket.dueDate = dueDate ? new Date(dueDate) : null;
    if (estimatedHours !== undefined) ticket.estimatedHours = estimatedHours;
    if (actualHours !== undefined) ticket.actualHours = actualHours;
    if (tags !== undefined) ticket.tags = tags;

    // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É
    if (status !== undefined && status !== ticket.status) {
      ticket.status = status;
      if (status === 'resolved') {
        ticket.resolvedAt = new Date();
      } else if (status === 'closed') {
        ticket.closedAt = new Date();
      }
    }

    // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
    if (assignedTo !== undefined && assignedTo !== ticket.assignedTo?.toString()) {
      if (assignedTo) {
        const userExists = await User.findById(assignedTo);
        if (!userExists) {
          return res.status(400).json({
            success: false,
            message: '–í–∫–∞–∑–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —ñ—Å–Ω—É—î'
          });
        }
        ticket.assignedTo = assignedTo;
        ticket.assignedAt = new Date();
      } else {
        ticket.assignedTo = null;
        ticket.assignedAt = null;
      }
    }

    await ticket.save();

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è –≤–∞–∂–ª–∏–≤–∏—Ö –∑–º—ñ–Ω
    const systemComments = [];
    
    if (status && status !== previousState.status) {
      systemComments.push({
        content: `–°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ –∑ "${previousState.status}" –Ω–∞ "${status}"`,
        ticket: ticket._id,
        author: req.user._id,
        type: 'status_change'
      });
    }

    if (assignedTo && assignedTo !== previousState.assignedTo?.toString()) {
      const newAssignee = await User.findById(assignedTo);
      systemComments.push({
        content: `–¢–∏–∫–µ—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${newAssignee.firstName} ${newAssignee.lastName}`,
        ticket: ticket._id,
        author: req.user._id,
        type: 'assignment'
      });
      
      // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –ø—Ä–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç–∞
      try {
        await telegramService.sendTicketNotification(ticket, 'assigned');
      } catch (error) {
        logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:', error);
      }
    }

    if (priority && priority !== previousState.priority) {
      systemComments.push({
        content: `–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –∑–º—ñ–Ω–µ–Ω–æ –∑ "${previousState.priority}" –Ω–∞ "${priority}"`,
        ticket: ticket._id,
        author: req.user._id,
        type: 'priority_change'
      });
    }

    if (systemComments.length > 0) {
      await Comment.insertMany(systemComments);
    }

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ Telegram –≥—Ä—É–ø—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É
    logger.info(`üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É: –ø–æ—Ç–æ—á–Ω–∏–π="${status}", –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π="${previousState.status}"`);
    
    if (status && status !== previousState.status) {
      logger.info(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–∏–≤—Å—è! –í—ñ–¥–ø—Ä–∞–≤–ª—è—é —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è...`);
      try {
        await telegramService.sendTicketStatusNotificationToGroup(
          ticket,
          previousState.status,
          status,
          req.user
        );
        
        // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É
        await telegramService.sendTicketNotification(ticket, 'updated');
      } catch (error) {
        logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', error);
        // –ù–µ –∑—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏
      }
    } else {
      logger.info(`‚ùå –°—Ç–∞—Ç—É—Å –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è, —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è`);
    }

    // –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    await ticket.populate([
      { path: 'createdBy', select: 'firstName lastName email' },
      { path: 'assignedTo', select: 'firstName lastName email' },
      { path: 'city', select: 'name region' }
    ]);

    res.json({
      success: true,
      message: '–¢–∏–∫–µ—Ç —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ',
      data: ticket
    });
  } catch (error) {
    logger.error('Error updating ticket:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç–∏–∫–µ—Ç—É',
      error: error.message
    });
  }
};

// –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–∫–µ—Ç
exports.deleteTicket = async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤—ñ—Ä–Ω–∏–π ID —Ç–∏–∫–µ—Ç—É'
      });
    }

    const ticket = await Ticket.findById(id);
    if (!ticket) {
      return res.status(404).json({
        success: false,
        message: '–¢–∏–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏ –∞–±–æ –∞–≤—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –≤–∏–¥–∞–ª—è—Ç–∏)
    if (req.user.role !== 'admin' && !ticket.createdBy.equals(req.user._id)) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ü—å–æ–≥–æ —Ç–∏–∫–µ—Ç—É'
      });
    }

    await ticket.deleteOne();

    res.json({
      success: true,
      message: '–¢–∏–∫–µ—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ'
    });
  } catch (error) {
    logger.error('Error deleting ticket:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–∏–∫–µ—Ç—É',
      error: error.message
    });
  }
};

// –î–æ–¥–∞—Ç–∏ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á–∞ –¥–æ —Ç–∏–∫–µ—Ç—É
exports.addWatcher = async (req, res) => {
  try {
    const { id } = req.params;
    const { userId } = req.body;

    const ticket = await Ticket.findById(id);
    if (!ticket) {
      return res.status(404).json({
        success: false,
        message: '–¢–∏–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(400).json({
        success: false,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    await ticket.addWatcher(userId);

    res.json({
      success: true,
      message: '–°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á–∞ –¥–æ–¥–∞–Ω–æ –¥–æ —Ç–∏–∫–µ—Ç—É'
    });
  } catch (error) {
    logger.error('Error adding watcher:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á–∞',
      error: error.message
    });
  }
};

// –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á–∞ –∑ —Ç–∏–∫–µ—Ç—É
exports.removeWatcher = async (req, res) => {
  try {
    const { id, userId } = req.params;

    const ticket = await Ticket.findById(id);
    if (!ticket) {
      return res.status(404).json({
        success: false,
        message: '–¢–∏–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    await ticket.removeWatcher(userId);

    res.json({
      success: true,
      message: '–°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Ç–∏–∫–µ—Ç—É'
    });
  } catch (error) {
    logger.error('Error removing watcher:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á–∞',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∏–∫–µ—Ç—ñ–≤
exports.getTicketStatistics = async (req, res) => {
  try {
    const { period = '30d', city, assignedTo } = req.query;
    
    // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É
    const now = new Date();
    let startDate;
    
    switch (period) {
      case '7d':
        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        break;
      case '30d':
        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
        break;
      case '90d':
        startDate = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);
        break;
      case '1y':
        startDate = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000);
        break;
      default:
        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
    }

    const matchStage = {
      createdAt: { $gte: startDate }
    };

    if (city) matchStage.city = new mongoose.Types.ObjectId(city);
    if (assignedTo) matchStage.assignedTo = new mongoose.Types.ObjectId(assignedTo);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin') {
      matchStage.$or = [
        { createdBy: req.user._id },
        { assignedTo: req.user._id }
      ];
    }

    const statistics = await Ticket.aggregate([
      { $match: matchStage },
      {
        $group: {
          _id: null,
          total: { $sum: 1 },
          open: { $sum: { $cond: [{ $eq: ['$status', 'open'] }, 1, 0] } },
          inProgress: { $sum: { $cond: [{ $eq: ['$status', 'in_progress'] }, 1, 0] } },
          resolved: { $sum: { $cond: [{ $eq: ['$status', 'resolved'] }, 1, 0] } },
          closed: { $sum: { $cond: [{ $eq: ['$status', 'closed'] }, 1, 0] } },
          high: { $sum: { $cond: [{ $eq: ['$priority', 'high'] }, 1, 0] } },
          medium: { $sum: { $cond: [{ $eq: ['$priority', 'medium'] }, 1, 0] } },
          low: { $sum: { $cond: [{ $eq: ['$priority', 'low'] }, 1, 0] } },
          avgResolutionTime: {
            $avg: {
              $cond: [
                { $and: [{ $ne: ['$resolvedAt', null] }, { $ne: ['$createdAt', null] }] },
                { $divide: [{ $subtract: ['$resolvedAt', '$createdAt'] }, 1000 * 60 * 60] },
                null
              ]
            }
          }
        }
      }
    ]);

    const stats = statistics[0] || {
      total: 0,
      open: 0,
      inProgress: 0,
      resolved: 0,
      closed: 0,
      high: 0,
      medium: 0,
      low: 0,
      avgResolutionTime: 0
    };

    res.json({
      success: true,
      data: {
        period,
        statistics: stats,
        generatedAt: new Date()
      }
    });
  } catch (error) {
    logger.error('Error fetching ticket statistics:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      error: error.message
    });
  }
};





// –ï–∫—Å–ø–æ—Ä—Ç —Ç—ñ–∫–µ—Ç—ñ–≤
exports.exportTickets = async (req, res) => {
  try {
    const {
      format = 'csv', // csv –∞–±–æ excel
      status,
      priority,
      city,
      assignedTo,
      createdBy,
      dateFrom,
      dateTo,
      includeComments = false,
      includeAttachments = false
    } = req.query;

    // –ü–æ–±—É–¥–æ–≤–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ getTickets)
    const filters = {};
    
    if (status) filters.status = status;
    if (priority) filters.priority = priority;
    if (city) filters.city = city;
    if (assignedTo) filters.assignedTo = assignedTo;
    if (createdBy) filters.createdBy = createdBy;
    
    // –§—ñ–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞—Ö
    if (dateFrom || dateTo) {
      filters.createdAt = {};
      if (dateFrom) filters.createdAt.$gte = new Date(dateFrom);
      if (dateTo) filters.createdAt.$lte = new Date(dateTo);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin') {
      filters.$or = [
        { createdBy: req.user._id },
        { assignedTo: req.user._id }
      ];
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—ñ–∫–µ—Ç—ñ–≤ –∑ –ø–æ–≤–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
    const tickets = await Ticket.find(filters)
      .populate({
        path: 'createdBy',
        select: 'firstName lastName email position city',
        populate: [
          {
            path: 'city',
            select: 'name region'
          },
          {
            path: 'position',
            select: 'title'
          }
        ]
      })
      .populate({
        path: 'assignedTo',
        select: 'firstName lastName email position city',
        populate: [
          {
            path: 'city',
            select: 'name region'
          },
          {
            path: 'position',
            select: 'title'
          }
        ]
      })
      .populate('assignedBy', 'firstName lastName email')
      .populate('city', 'name region')
      .populate('tags', 'name color')
      .sort({ createdAt: -1 })
      .lean();

    if (tickets.length === 0) {
      return res.status(404).json({
        success: false,
        message: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç—ñ–∫–µ—Ç—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É'
      });
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ —Ç—ñ–∫–µ—Ç—É
    const calculateTicketMetrics = (ticket) => {
      const metrics = {
        responseTime: 0,
        resolutionTime: 0,
        isOverdue: false,
        slaStatus: '–í –º–µ–∂–∞—Ö SLA',
        daysOpen: 0,
        statusChanges: 0,
        lastActivity: null,
        escalationLevel: 0,
        reopenCount: 0
      };

      const now = new Date();
      const createdAt = new Date(ticket.createdAt);
      
      // –û–±—á–∏—Å–ª–µ–Ω–Ω—è –¥–Ω—ñ–≤ –∑ –º–æ–º–µ–Ω—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
      metrics.daysOpen = Math.ceil((now - createdAt) / (1000 * 60 * 60 * 24));
      
      // –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–¥–æ –ø–µ—Ä—à–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ)
      if (ticket.firstResponseAt) {
        const responseTime = (new Date(ticket.firstResponseAt) - createdAt) / (1000 * 60 * 60);
        metrics.responseTime = Math.round(responseTime * 100) / 100;
      }
      
      // –ß–∞—Å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è
      if (ticket.resolvedAt) {
        const resolutionTime = (new Date(ticket.resolvedAt) - createdAt) / (1000 * 60 * 60);
        metrics.resolutionTime = Math.round(resolutionTime * 100) / 100;
      } else if (['resolved', 'closed'].includes(ticket.status)) {
        const resolutionTime = (now - createdAt) / (1000 * 60 * 60);
        metrics.resolutionTime = Math.round(resolutionTime * 100) / 100;
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SLA
      const slaResponseTime = ticket.sla?.responseTime || 24;
      const slaResolutionTime = ticket.sla?.resolutionTime || 72;
      
      if (!ticket.firstResponseAt && metrics.responseTime === 0 && metrics.daysOpen * 24 > slaResponseTime) {
        metrics.isOverdue = true;
        metrics.slaStatus = '–ü–æ—Ä—É—à–µ–Ω–Ω—è SLA (–≤—ñ–¥–ø–æ–≤—ñ–¥—å)';
      } else if (!ticket.resolvedAt && !['resolved', 'closed'].includes(ticket.status) && metrics.daysOpen * 24 > slaResolutionTime) {
        metrics.isOverdue = true;
        metrics.slaStatus = '–ü–æ—Ä—É—à–µ–Ω–Ω—è SLA (–≤–∏—Ä—ñ—à–µ–Ω–Ω—è)';
      }
      
      // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º—ñ–Ω —Å—Ç–∞—Ç—É—Å—É
      if (ticket.statusHistory && ticket.statusHistory.length > 0) {
        metrics.statusChanges = ticket.statusHistory.length;
        metrics.lastActivity = ticket.statusHistory[ticket.statusHistory.length - 1].changedAt;
      }
      
      // –†—ñ–≤–µ–Ω—å –µ—Å–∫–∞–ª–∞—Ü—ñ—ó
      if (ticket.escalation) {
        metrics.escalationLevel = ticket.escalation.level || 0;
      }
      
      // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ–≤
      if (ticket.statusHistory) {
        metrics.reopenCount = ticket.statusHistory.filter(h => 
          h.status === 'open' && ticket.statusHistory.indexOf(h) > 0
        ).length;
      }
      
      return metrics;
    };

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
    const exportData = tickets.map(ticket => {
      const calculatedMetrics = calculateTicketMetrics(ticket);
      
      const baseData = {
        // –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç—ñ–∫–µ—Ç
        '–ù–æ–º–µ—Ä —Ç—ñ–∫–µ—Ç—É': ticket.ticketNumber || '–ù–µ –ø—Ä–∏—Å–≤–æ—î–Ω–æ',
        '–ù–∞–∑–≤–∞ —Ç—ñ–∫–µ—Ç—É': ticket.title,
        '–ê–≤—Ç–æ—Ä': ticket.createdBy ? `${ticket.createdBy.firstName} ${ticket.createdBy.lastName}` : '–ù–µ–≤—ñ–¥–æ–º–æ',
        'Email –∞–≤—Ç–æ—Ä–∞': ticket.createdBy ? ticket.createdBy.email : '–ù–µ–≤—ñ–¥–æ–º–æ',
        '–ü–æ—Å–∞–¥–∞ –∞–≤—Ç–æ—Ä–∞': ticket.createdBy && ticket.createdBy.position ? ticket.createdBy.position.title : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
        '–ú—ñ—Å—Ç–æ –∞–≤—Ç–æ—Ä–∞': ticket.createdBy && ticket.createdBy.city ? ticket.createdBy.city.name : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
        '–î–∞—Ç–∞ —Ç–∞ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è': formatDateTime(ticket.createdAt),
        
        // –°—Ç–∞—Ç—É—Å —Ç–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
        '–°—Ç–∞—Ç—É—Å': getStatusLabel(ticket.status),
        '–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç': getPriorityLabel(ticket.priority),
        
        // –û–ø–∏—Å —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è
        '–û–ø–∏—Å': ticket.description,
        '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': getCategoryLabel(ticket.category),
        '–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è': ticket.subcategory || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
        '–¢–∏–ø': getTypeLabel(ticket.type),
        
        // –ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è
        '–ú—ñ—Å—Ç–æ': ticket.city ? ticket.city.name : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
        '–†–µ–≥—ñ–æ–Ω': ticket.city ? ticket.city.region : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
        '–í—ñ–¥–¥—ñ–ª': ticket.department || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
        
        // –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
        '–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å': ticket.assignedTo ? `${ticket.assignedTo.firstName} ${ticket.assignedTo.lastName}` : '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ',
        'Email –≤–∏–∫–æ–Ω–∞–≤—Ü—è': ticket.assignedTo ? ticket.assignedTo.email : '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ',
        '–ü–æ—Å–∞–¥–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—è': ticket.assignedTo && ticket.assignedTo.position ? ticket.assignedTo.position.title : '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ',
        '–ú—ñ—Å—Ç–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è': ticket.assignedTo && ticket.assignedTo.city ? ticket.assignedTo.city.name : '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ',
        '–ü—Ä–∏–∑–Ω–∞—á–∏–≤': ticket.assignedBy ? `${ticket.assignedBy.firstName} ${ticket.assignedBy.lastName}` : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
        '–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è': ticket.assignedAt ? formatDateTime(ticket.assignedAt) : '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ',
        
        // –ß–∞—Å–æ–≤—ñ –º—ñ—Ç–∫–∏
        '–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –ø–µ—Ä—à–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ': ticket.firstResponseAt ? formatDateTime(ticket.firstResponseAt) : '–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
        '–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è': ticket.resolvedAt ? formatDateTime(ticket.resolvedAt) : '–ù–µ –≤–∏—Ä—ñ—à–µ–Ω–æ',
        '–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è': ticket.closedAt ? formatDateTime(ticket.closedAt) : '–ù–µ –∑–∞–∫—Ä–∏—Ç–æ',
        '–¢–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è': ticket.dueDate ? formatDateTime(ticket.dueDate) : '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
        
        // –ë–∞–∑–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
        '–ü–ª–∞–Ω–æ–≤—ñ –≥–æ–¥–∏–Ω–∏': ticket.estimatedHours || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
        '–§–∞–∫—Ç–∏—á–Ω—ñ –≥–æ–¥–∏–Ω–∏': ticket.actualHours || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
        
        // –û–±—á–∏—Å–ª–µ–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏
        '–ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–≥–æ–¥)': calculatedMetrics.responseTime,
        '–ß–∞—Å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è (–≥–æ–¥)': calculatedMetrics.resolutionTime,
        '–î–Ω—ñ–≤ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π': calculatedMetrics.daysOpen,
        '–°—Ç–∞—Ç—É—Å SLA': calculatedMetrics.slaStatus,
        '–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π': calculatedMetrics.isOverdue ? '–¢–∞–∫' : '–ù—ñ',
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º—ñ–Ω —Å—Ç–∞—Ç—É—Å—É': calculatedMetrics.statusChanges,
        '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ–≤': calculatedMetrics.reopenCount,
        '–†—ñ–≤–µ–Ω—å –µ—Å–∫–∞–ª–∞—Ü—ñ—ó': calculatedMetrics.escalationLevel,
        '–û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å': calculatedMetrics.lastActivity ? formatDateTime(calculatedMetrics.lastActivity) : '–ù–µ–º–∞—î',
        
        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        '–¢–µ–≥–∏': ticket.tags ? ticket.tags.map(tag => tag.name).join(', ') : '–ù–µ–º–∞—î',
        '–î–∂–µ—Ä–µ–ª–æ': ticket.metadata?.source || 'web',
        '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤': ticket.comments ? ticket.comments.length : 0,
        '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∫–ª–∞–¥–µ–Ω—å': ticket.attachments ? ticket.attachments.length : 0,
        '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á—ñ–≤': ticket.watchers ? ticket.watchers.length : 0
      };

      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
      if (includeComments === 'true' && ticket.comments && ticket.comments.length > 0) {
        baseData['–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ'] = ticket.comments.map(comment => 
          `[${formatDateTime(comment.createdAt)}] ${comment.author?.firstName || '–ù–µ–≤—ñ–¥–æ–º–æ'}: ${comment.content}`
        ).join(' | ');
      }

      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∫–ª–∞–¥–µ–Ω—å —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
      if (includeAttachments === 'true' && ticket.attachments && ticket.attachments.length > 0) {
        baseData['–í–∫–ª–∞–¥–µ–Ω–Ω—è'] = ticket.attachments.map(att => att.originalName).join(', ');
      }

      return baseData;
    });

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ñ–∞–π–ª—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ñ–æ—Ä–º–∞—Ç—É
    if (format === 'excel') {
      const workbook = new ExcelJS.Workbook();
      const worksheet = workbook.addWorksheet('–¢—ñ–∫–µ—Ç–∏');

      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
      const headers = Object.keys(exportData[0]);
      worksheet.addRow(headers);

      // –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
      const headerRow = worksheet.getRow(1);
      headerRow.font = { bold: true };
      headerRow.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FF2C3E50' }
      };
      headerRow.font = { color: { argb: 'FFFFFFFF' }, bold: true };

      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
      exportData.forEach(row => {
        worksheet.addRow(Object.values(row));
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–∏—Ä–∏–Ω–∏ –∫–æ–ª–æ–Ω–æ–∫
      worksheet.columns.forEach(column => {
        let maxLength = 0;
        column.eachCell({ includeEmpty: true }, (cell) => {
          const columnLength = cell.value ? cell.value.toString().length : 10;
          if (columnLength > maxLength) {
            maxLength = columnLength;
          }
        });
        column.width = Math.min(maxLength + 2, 50);
      });

      // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      const filename = `tickets_export_${new Date().toISOString().split('T')[0]}.xlsx`;
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);

      // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª—É
      await workbook.xlsx.write(res);
      res.end();

    } else {
      // CSV –µ–∫—Å–ø–æ—Ä—Ç
      const fields = Object.keys(exportData[0]);
      const json2csvParser = new Parser({ fields, delimiter: ';' });
      const csv = json2csvParser.parse(exportData);

      const filename = `tickets_export_${new Date().toISOString().split('T')[0]}.csv`;
      res.setHeader('Content-Type', 'text/csv; charset=utf-8');
      res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
      
      // –î–æ–¥–∞–≤–∞–Ω–Ω—è BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
      res.write('\uFEFF');
      res.end(csv);
    }

  } catch (error) {
    logger.error('Error exporting tickets:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ —Ç—ñ–∫–µ—Ç—ñ–≤',
      error: error.message
    });
  }
};

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
function getStatusLabel(status) {
  const statusLabels = {
    'open': '–í—ñ–¥–∫—Ä–∏—Ç–∏–π',
    'in_progress': '–í —Ä–æ–±–æ—Ç—ñ',
    'resolved': '–í–∏—Ä—ñ—à–µ–Ω–∏–π',
    'closed': '–ó–∞–∫—Ä–∏—Ç–∏–π',
    'cancelled': '–°–∫–∞—Å–æ–≤–∞–Ω–∏–π'
  };
  return statusLabels[status] || status;
}

function getPriorityLabel(priority) {
  const priorityLabels = {
    'low': '–ù–∏–∑—å–∫–∏–π',
    'medium': '–°–µ—Ä–µ–¥–Ω—ñ–π',
    'high': '–í–∏—Å–æ–∫–∏–π',
    'urgent': '–¢–µ—Ä–º—ñ–Ω–æ–≤–∏–π'
  };
  return priorityLabels[priority] || priority;
}

function getCategoryLabel(category) {
  const categoryLabels = {
    'technical': '–¢–µ—Ö–Ω—ñ—á–Ω–∞',
    'account': '–û–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å',
    'billing': '–ë—ñ–ª–ª—ñ–Ω–≥',
    'general': '–ó–∞–≥–∞–ª—å–Ω–∞'
  };
  return categoryLabels[category] || category;
}

function getTypeLabel(type) {
  const typeLabels = {
    'incident': '–Ü–Ω—Ü–∏–¥–µ–Ω—Ç',
    'request': '–ó–∞–ø–∏—Ç',
    'problem': '–ü—Ä–æ–±–ª–µ–º–∞',
    'change': '–ó–º—ñ–Ω–∞'
  };
  return typeLabels[type] || type;
}

function formatDate(date) {
  if (!date) return '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
  return new Date(date).toLocaleDateString('uk-UA', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit'
  });
}

function formatTime(date) {
  if (!date) return '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
  return new Date(date).toLocaleTimeString('uk-UA', {
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
}

function formatDateTime(date) {
  if (!date) return '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
  return new Date(date).toLocaleString('uk-UA', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
}
