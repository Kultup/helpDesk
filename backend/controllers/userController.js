const User = require('../models/User');
const Position = require('../models/Position');
const City = require('../models/City');
const Ticket = require('../models/Ticket');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { validationResult } = require('express-validator');
const mongoose = require('mongoose');
const telegramService = require('../services/telegramServiceInstance');
const registrationWebSocketService = require('../services/registrationWebSocketService');
const logger = require('../utils/logger');

// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
exports.getUsers = async (req, res) => {
  try {
    const {
      page = 1,
      limit = 10,
      role,
      position,
      city,
      isActive,
      search,
      sortBy = 'createdAt',
      sortOrder = 'desc'
    } = req.query;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'
      });
    }

    // –ü–æ–±—É–¥–æ–≤–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    const filters = {};
    
    if (role) filters.role = role;
    if (position) filters.position = position;
    if (city) filters.city = city;
    // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if (isActive !== undefined) {
      filters.isActive = isActive === 'true';
    } else {
      filters.isActive = true; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ
    }
    
    // –ü–æ—à—É–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    if (search) {
      filters.$or = [
        { firstName: { $regex: search, $options: 'i' } },
        { lastName: { $regex: search, $options: 'i' } },
        { email: { $regex: search, $options: 'i' } },
        { telegramUsername: { $regex: search, $options: 'i' } }
      ];
    }

    const options = {
      page: parseInt(page),
      limit: parseInt(limit),
      sort: { [sortBy]: sortOrder === 'desc' ? -1 : 1 },
      populate: [
        { path: 'position', select: 'title department level' },
        { path: 'city', select: 'name region' }
      ],
      select: '-password -emailVerificationToken -passwordResetToken'
    };

    const users = await User.paginate(filters, options);

    res.json({
      success: true,
      data: users.docs,
      pagination: {
        currentPage: users.page,
        totalPages: users.totalPages,
        totalItems: users.totalDocs,
        hasNext: users.hasNextPage,
        hasPrev: users.hasPrevPage
      }
    });
  } catch (error) {
    logger.error('Error fetching users:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
exports.getUserPreferences = async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Å–≤–æ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    if (req.user.role !== 'admin' && req.user.id !== id) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
      });
    }

    const user = await User.findById(id).select('preferences');
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
    const defaultPreferences = {
      theme: 'light',
      language: 'uk',
      timezone: 'Europe/Kiev',
      dateFormat: 'DD/MM/YYYY',
      timeFormat: '24h',
      itemsPerPage: 10,
      emailNotifications: {
        newTickets: true,
        ticketUpdates: true,
        comments: true,
        mentions: true,
        systemUpdates: false
      },
      telegramNotifications: {
        newTickets: true,
        ticketUpdates: true,
        comments: true,
        mentions: true,
        systemUpdates: false
      }
    };

    const preferences = { ...defaultPreferences, ...user.preferences };

    res.json({
      success: true,
      data: preferences
    });
  } catch (error) {
    logger.error('Error getting user preferences:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
      error: error.message
    });
  }
};

// –û–Ω–æ–≤–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
exports.updateUserPreferences = async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –æ–Ω–æ–≤–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Å–≤–æ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    if (req.user.role !== 'admin' && req.user.id !== id) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
      });
    }

    const user = await User.findById(id);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    const updatedPreferences = {
      ...user.preferences,
      ...req.body
    };

    await User.findByIdAndUpdate(id, { 
      preferences: updatedPreferences 
    }, { new: true });

    logger.info(`üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ:`, {
      userId: id,
      email: user.email,
      updatedFields: Object.keys(req.body),
      updatedBy: req.user.email
    });

    res.json({
      success: true,
      message: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ',
      data: updatedPreferences
    });
  } catch (error) {
    logger.error('Error updating user preferences:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID
exports.getUserById = async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin' && req.user._id.toString() !== id) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
      });
    }

    const user = await User.findById(id)
      .populate('position', 'title department level permissions')
      .populate('city', 'name region coordinates')
      .select('-password -emailVerificationToken -passwordResetToken');

    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const [createdTickets, assignedTickets] = await Promise.all([
      Ticket.countDocuments({ createdBy: id }),
      Ticket.countDocuments({ assignedTo: id })
    ]);

    res.json({
      success: true,
      data: {
        ...user.toObject(),
        statistics: {
          createdTickets,
          assignedTickets
        }
      }
    });
  } catch (error) {
    logger.error('Error fetching user:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
      error: error.message
    });
  }
};

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
exports.createUser = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: '–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó',
        errors: errors.array()
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'
      });
    }

    logger.info('üìù –î–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', req.body);
    
    const {
      firstName,
      lastName,
      email,
      password,
      role = 'user',
      department,
      position,
      city,
      telegramUsername,
      phone
    } = req.body;
    
    logger.info('üè¢ Department value:', department);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ email
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({
        success: false,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø–æ—Å–∞–¥–∏
    if (position) {
      const positionExists = await Position.findById(position);
      if (!positionExists) {
        return res.status(400).json({
          success: false,
          message: '–í–∫–∞–∑–∞–Ω–∞ –ø–æ—Å–∞–¥–∞ –Ω–µ —ñ—Å–Ω—É—î'
        });
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –º—ñ—Å—Ç–∞
    if (city) {
      const cityExists = await City.findById(city);
      if (!cityExists) {
        return res.status(400).json({
          success: false,
          message: '–í–∫–∞–∑–∞–Ω–µ –º—ñ—Å—Ç–æ –Ω–µ —ñ—Å–Ω—É—î'
        });
      }
    }

    const user = new User({
      firstName,
      lastName,
      email,
      password, // –ü–∞—Ä–æ–ª—å –±—É–¥–µ –∑–∞—Ö–µ—à–æ–≤–∞–Ω–∏–π –≤ middleware –º–æ–¥–µ–ª—ñ
      role,
      department,
      position,
      city,
      telegramUsername,
      phone,
      emailVerified: true, // –ê–¥–º—ñ–Ω —Å—Ç–≤–æ—Ä—é—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
      createdBy: req.user._id
    });

    await user.save();

    // –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    await user.populate([
      { path: 'position', select: 'title department' },
      { path: 'city', select: 'name region' }
    ]);

    // –í–∏–¥–∞–ª–∏—Ç–∏ –ø–∞—Ä–æ–ª—å –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    const userResponse = user.toObject();
    delete userResponse.password;

    res.status(201).json({
      success: true,
      message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ',
      data: userResponse
    });
  } catch (error) {
    logger.error('Error creating user:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
      error: error.message
    });
  }
};

// –û–Ω–æ–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
exports.updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const errors = validationResult(req);
    
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: '–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó',
        errors: errors.array()
      });
    }

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin' && req.user._id.toString() !== id) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
      });
    }

    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    const {
      firstName,
      lastName,
      email,
      role,
      position,
      city,
      telegramUsername,
      phone,
      isActive,
      avatar
    } = req.body;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ email (—è–∫—â–æ –∑–º—ñ–Ω—é—î—Ç—å—Å—è)
    if (email && email !== user.email) {
      const existingUser = await User.findOne({ email });
      if (existingUser) {
        return res.status(400).json({
          success: false,
          message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î'
        });
      }
    }

    // –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏ –º–æ–∂—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ä–æ–ª—å —Ç–∞ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    if (req.user.role !== 'admin') {
      if (role !== undefined || isActive !== undefined) {
        return res.status(403).json({
          success: false,
          message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–º—ñ–Ω–∏ —Ä–æ–ª—ñ –∞–±–æ —Å—Ç–∞—Ç—É—Å—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ'
        });
      }
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—ñ–≤
    if (firstName !== undefined) user.firstName = firstName;
    if (lastName !== undefined) user.lastName = lastName;
    if (email !== undefined) user.email = email;
    if (telegramUsername !== undefined) user.telegramUsername = telegramUsername;
    if (phone !== undefined) user.phone = phone;
    if (avatar !== undefined) user.avatar = avatar;
    
    // –ü–æ–ª—è, —è–∫—ñ –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω
    if (req.user.role === 'admin') {
      if (role !== undefined) user.role = role;
      if (isActive !== undefined) user.isActive = isActive;
      if (position !== undefined) {
        if (position) {
          const positionExists = await Position.findById(position);
          if (!positionExists) {
            return res.status(400).json({
              success: false,
              message: '–í–∫–∞–∑–∞–Ω–∞ –ø–æ—Å–∞–¥–∞ –Ω–µ —ñ—Å–Ω—É—î'
            });
          }
        }
        user.position = position;
      }
      if (city !== undefined) {
        if (city) {
          const cityExists = await City.findById(city);
          if (!cityExists) {
            return res.status(400).json({
              success: false,
              message: '–í–∫–∞–∑–∞–Ω–µ –º—ñ—Å—Ç–æ –Ω–µ —ñ—Å–Ω—É—î'
            });
          }
        }
        user.city = city;
      }
    }

    user.lastModifiedBy = req.user._id;
    await user.save();

    // –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    await user.populate([
      { path: 'position', select: 'title department' },
      { path: 'city', select: 'name region' }
    ]);

    // –í–∏–¥–∞–ª–∏—Ç–∏ –ø–∞—Ä–æ–ª—å –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    const userResponse = user.toObject();
    delete userResponse.password;
    delete userResponse.emailVerificationToken;
    delete userResponse.passwordResetToken;

    res.json({
      success: true,
      message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ',
      data: userResponse
    });
  } catch (error) {
    logger.error('Error updating user:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
      error: error.message
    });
  }
};

// –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–º'—è–∫–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è)
exports.deleteUser = async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'
      });
    }

    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–∞–º–æ–≥–æ —Å–µ–±–µ
    if (user._id.equals(req.user._id)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–∞–º–æ–≥–æ —Å–µ–±–µ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–∫—Ç–∏–≤–Ω—ñ —Ç—ñ–∫–µ—Ç–∏
    const Ticket = require('../models/Ticket');
    const activeTicketsCount = await Ticket.countDocuments({
      $or: [
        { createdBy: id },
        { assignedTo: id }
      ],
      status: { $in: ['open', 'in_progress'] }
    });

    if (activeTicketsCount > 0) {
      // –ú'—è–∫–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —è–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω—ñ —Ç—ñ–∫–µ—Ç–∏
      user.isActive = false;
      user.deletedAt = new Date();
      user.deletedBy = req.user._id;
      await user.save();

      res.json({
        success: true,
        message: `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ (–º–∞—î ${activeTicketsCount} –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—ñ–∫–µ—Ç—ñ–≤)`
      });
    } else {
      // –ü–æ–≤–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —è–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—ñ–∫–µ—Ç—ñ–≤
      await User.findByIdAndDelete(id);
      
      res.json({
        success: true,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Å–∏—Å—Ç–µ–º–∏'
      });
    }
  } catch (error) {
    logger.error('Error deleting user:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
      error: error.message
    });
  }
};

// –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏/–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
exports.toggleUserActive = async (req, res) => {
  try {
    logger.info('üîÑ toggleUserActive –≤–∏–∫–ª–∏–∫–∞–Ω–æ:', {
      userId: req.params.id,
      currentUser: req.user ? { id: req.user._id, role: req.user.role, email: req.user.email } : '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
      headers: req.headers.authorization ? '—Ç–æ–∫–µ–Ω –ø—Ä–∏—Å—É—Ç–Ω—ñ–π' : '—Ç–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π'
    });

    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      logger.info('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', id);
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin') {
      logger.info('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤:', { userRole: req.user.role, required: 'admin' });
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'
      });
    }

    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ù–µ –º–æ–∂–Ω–∞ –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Å–∞–º–æ–≥–æ —Å–µ–±–µ
    if (user._id.equals(req.user._id)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–∞–º–æ–≥–æ —Å–µ–±–µ'
      });
    }

    // –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    const newActiveStatus = !user.isActive;
    user.isActive = newActiveStatus;
    
    if (newActiveStatus) {
      // –ê–∫—Ç–∏–≤—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      user.deletedAt = null;
      user.deletedBy = null;
    } else {
      // –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      user.deletedAt = new Date();
      user.deletedBy = req.user._id;
    }
    
    await user.save();

    res.json({
      success: true,
      message: newActiveStatus ? '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ' : '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ',
      data: {
        userId: user._id,
        isActive: user.isActive
      }
    });
  } catch (error) {
    logger.error('Error toggling user active status:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
      error: error.message
    });
  }
};

// –ú–∞—Å–æ–≤–∞ –∑–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
exports.bulkToggleUsers = async (req, res) => {
  try {
    logger.info('üîÑ bulkToggleUsers –≤–∏–∫–ª–∏–∫–∞–Ω–æ:', {
      userIds: req.body.userIds,
      action: req.body.action,
      currentUser: req.user ? { id: req.user._id, role: req.user.role, email: req.user.email } : '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
    });

    const { userIds, action } = req.body;

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    if (!Array.isArray(userIds) || userIds.length === 0) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'
      });
    }

    if (!['activate', 'deactivate'].includes(action)) {
      return res.status(400).json({
        success: false,
        message: '–î—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ "activate" –∞–±–æ "deactivate"'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin') {
      logger.info('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤:', { userRole: req.user.role, required: 'admin' });
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –º–∞—Å–æ–≤–æ—ó –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'
      });
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Å—ñ—Ö ID
    const invalidIds = userIds.filter(id => !mongoose.Types.ObjectId.isValid(id));
    if (invalidIds.length > 0) {
      return res.status(400).json({
        success: false,
        message: `–ù–µ–≤—ñ—Ä–Ω—ñ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${invalidIds.join(', ')}`
      });
    }

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    const users = await User.find({ _id: { $in: userIds } });
    
    if (users.length === 0) {
      return res.status(404).json({
        success: false,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–º—ñ–Ω–∏—Ç–∏ —Å–≤—ñ–π –≤–ª–∞—Å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    const currentUserId = req.user._id.toString();
    const selfModification = userIds.includes(currentUserId);
    
    if (selfModification) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –≤ –º–∞—Å–æ–≤—ñ–π –æ–ø–µ—Ä–∞—Ü—ñ—ó'
      });
    }

    const isActivating = action === 'activate';
    const updateData = {
      isActive: isActivating,
      ...(isActivating 
        ? { deletedAt: null, deletedBy: null }
        : { deletedAt: new Date(), deletedBy: req.user._id }
      )
    };

    // –í–∏–∫–æ–Ω—É—î–º–æ –º–∞—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    const result = await User.updateMany(
      { _id: { $in: userIds } },
      updateData
    );

    // –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    const updatedUsers = await User.find({ _id: { $in: userIds } })
      .select('_id firstName lastName email isActive')
      .lean();

    res.json({
      success: true,
      message: `–£—Å–ø—ñ—à–Ω–æ ${isActivating ? '–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ' : '–¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ'} ${result.modifiedCount} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`,
      data: {
        action,
        modifiedCount: result.modifiedCount,
        users: updatedUsers
      }
    });

  } catch (error) {
    logger.error('Error in bulk toggle users:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–∞—Å–æ–≤—ñ–π –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤',
      error: error.message
    });
  }
};

// –ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å
exports.changePassword = async (req, res) => {
  try {
    const { id } = req.params;
    const { currentPassword, newPassword } = req.body;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin' && req.user._id.toString() !== id) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
      });
    }

    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–ª–∞—Å–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É)
    if (req.user._id.toString() === id) {
      const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password);
      if (!isCurrentPasswordValid) {
        return res.status(400).json({
          success: false,
          message: '–ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π'
        });
      }
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    if (!newPassword || newPassword.length < 6) {
      return res.status(400).json({
        success: false,
        message: '–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤'
      });
    }

    // –•–µ—à—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash(newPassword, saltRounds);

    user.password = hashedPassword;
    user.passwordChangedAt = new Date();
    await user.save();

    res.json({
      success: true,
      message: '–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ'
    });
  } catch (error) {
    logger.error('Error changing password:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä–æ–ª—è',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
exports.getProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user._id)
      .populate('position', 'title department level permissions')
      .populate('city', 'name region coordinates')
      .select('-password -emailVerificationToken -passwordResetToken');

    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const [createdTickets, assignedTickets, recentActivity] = await Promise.all([
      Ticket.countDocuments({ createdBy: user._id }),
      Ticket.countDocuments({ assignedTo: user._id }),
      Ticket.find({
        $or: [
          { createdBy: user._id },
          { assignedTo: user._id }
        ]
      })
        .sort({ updatedAt: -1 })
        .limit(5)
        .populate('city', 'name')
        .select('title status priority updatedAt')
    ]);

    res.json({
      success: true,
      data: {
        ...user.toObject(),
        statistics: {
          createdTickets,
          assignedTickets
        },
        recentActivity
      }
    });
  } catch (error) {
    logger.error('Error fetching profile:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é',
      error: error.message
    });
  }
};

// –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
exports.updateProfile = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: '–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó',
        errors: errors.array()
      });
    }

    const {
      firstName,
      lastName,
      telegramUsername,
      phone,
      avatar
    } = req.body;

    const user = await User.findById(req.user._id);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –ø–æ–ª—ñ–≤
    if (firstName !== undefined) user.firstName = firstName;
    if (lastName !== undefined) user.lastName = lastName;
    if (telegramUsername !== undefined) user.telegramUsername = telegramUsername;
    if (phone !== undefined) user.phone = phone;
    if (avatar !== undefined) user.avatar = avatar;

    await user.save();

    // –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    await user.populate([
      { path: 'position', select: 'title department' },
      { path: 'city', select: 'name region' }
    ]);

    // –í–∏–¥–∞–ª–∏—Ç–∏ –ø–∞—Ä–æ–ª—å –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    const userResponse = user.toObject();
    delete userResponse.password;
    delete userResponse.emailVerificationToken;
    delete userResponse.passwordResetToken;

    res.json({
      success: true,
      message: '–ü—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ',
      data: userResponse
    });
  } catch (error) {
    logger.error('Error updating profile:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
exports.getUserStatistics = async (req, res) => {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'
      });
    }

    const statistics = await User.aggregate([
      {
        $group: {
          _id: null,
          totalUsers: { $sum: 1 },
          activeUsers: { $sum: { $cond: ['$isActive', 1, 0] } },
          adminUsers: { $sum: { $cond: [{ $eq: ['$role', 'admin'] }, 1, 0] } },
          regularUsers: { $sum: { $cond: [{ $eq: ['$role', 'user'] }, 1, 0] } },
          verifiedUsers: { $sum: { $cond: ['$emailVerified', 1, 0] } },
          usersWithTelegram: { 
            $sum: { 
              $cond: [
                { $and: [{ $ne: ['$telegramId', null] }, { $ne: ['$telegramId', ''] }] }, 
                1, 
                0
              ] 
            } 
          }
        }
      }
    ]);

    const stats = statistics[0] || {
      totalUsers: 0,
      activeUsers: 0,
      adminUsers: 0,
      regularUsers: 0,
      verifiedUsers: 0,
      usersWithTelegram: 0
    };

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º—ñ—Å—Ç–∞—Ö
    const cityStats = await User.aggregate([
      { $match: { isActive: true, city: { $ne: null } } },
      {
        $lookup: {
          from: 'cities',
          localField: 'city',
          foreignField: '_id',
          as: 'cityInfo'
        }
      },
      { $unwind: '$cityInfo' },
      {
        $group: {
          _id: '$city',
          cityName: { $first: '$cityInfo.name' },
          userCount: { $sum: 1 }
        }
      },
      { $sort: { userCount: -1 } },
      { $limit: 10 }
    ]);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å–∞–¥–∞—Ö
    const positionStats = await User.aggregate([
      { $match: { isActive: true, position: { $ne: null } } },
      {
        $lookup: {
          from: 'positions',
          localField: 'position',
          foreignField: '_id',
          as: 'positionInfo'
        }
      },
      { $unwind: '$positionInfo' },
      {
        $group: {
          _id: '$position',
          positionTitle: { $first: '$positionInfo.title' },
          userCount: { $sum: 1 }
        }
      },
      { $sort: { userCount: -1 } },
      { $limit: 10 }
    ]);

    res.json({
      success: true,
      data: {
        general: stats,
        byCity: cityStats,
        byPosition: positionStats,
        generatedAt: new Date()
      }
    });
  } catch (error) {
    logger.error('Error fetching user statistics:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è –ø—Ä–∏—Å–≤–æ—î–Ω–Ω—è —Ç—ñ–∫–µ—Ç—ñ–≤
exports.getAdmins = async (req, res) => {
  try {
    const admins = await User.find({
      role: 'admin',
      isActive: true
    })
    .select('_id firstName lastName email position')
    .populate('position', 'title department')
    .sort({ firstName: 1, lastName: 1 });

    res.json({
      success: true,
      data: admins
    });
  } catch (error) {
    logger.error('Error fetching admins:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ pending —Å—Ç–∞—Ç—É—Å–æ–º
exports.getPendingRegistrations = async (req, res) => {
  try {
    logger.info('üîç getPendingRegistrations called');
    logger.info('üë§ User:', req.user?.email, req.user?.role);
    logger.info('üìã Query params:', req.query);
    
    const {
      page = 1,
      limit = 10,
      sortBy = 'createdAt',
      sortOrder = 'desc'
    } = req.query;

    const options = {
      page: parseInt(page),
      limit: parseInt(limit),
      sort: { [sortBy]: sortOrder === 'desc' ? -1 : 1 },
      populate: [
        { path: 'position', select: 'title department' },
        { path: 'city', select: 'name region' }
      ],
      select: '-password'
    };

    const pendingUsers = await User.paginate(
      { registrationStatus: 'pending' },
      options
    );

    res.json({
      success: true,
      data: pendingUsers.docs,
      pagination: {
        currentPage: pendingUsers.page,
        totalPages: pendingUsers.totalPages,
        totalItems: pendingUsers.totalDocs,
        hasNextPage: pendingUsers.hasNextPage,
        hasPrevPage: pendingUsers.hasPrevPage
      }
    });
  } catch (error) {
    logger.error('Error fetching pending registrations:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é',
      error: error.message
    });
  }
};

// –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
exports.approveRegistration = async (req, res) => {
  try {
    const { id } = req.params;

    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    if (user.registrationStatus !== 'pending') {
      return res.status(400).json({
        success: false,
        message: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤–∂–µ –±—É–ª–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞'
      });
    }

    user.registrationStatus = 'approved';
    user.isActive = true;
    await user.save();

    // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ Telegram
    try {
      await telegramService.sendRegistrationApprovedNotification(user);
    } catch (telegramError) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', telegramError);
      // –ù–µ –∑—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è
    }

    // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
     try {
       registrationWebSocketService.notifyRegistrationStatusChange({
         _id: user._id,
         firstName: user.firstName,
         lastName: user.lastName,
         email: user.email
       }, 'pending', 'approved');
     } catch (wsError) {
       logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', wsError);
     }

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–º–∏ –ø–æ–ª—è–º–∏
    const updatedUser = await User.findById(id)
      .populate('position', 'title department')
      .populate('city', 'name region')
      .select('-password');

    res.json({
      success: true,
      message: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ',
      data: updatedUser
    });
  } catch (error) {
    logger.error('Error approving registration:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó',
      error: error.message
    });
  }
};

// –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
exports.rejectRegistration = async (req, res) => {
  try {
    const { id } = req.params;
    const { reason } = req.body;

    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    if (user.registrationStatus !== 'pending') {
      return res.status(400).json({
        success: false,
        message: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤–∂–µ –±—É–ª–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞'
      });
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
    const userDataForNotification = {
      _id: user._id,
      firstName: user.firstName,
      lastName: user.lastName,
      email: user.email,
      telegramId: user.telegramId
    };

    // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ Telegram –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
    try {
      await telegramService.sendRegistrationRejectedNotification(user, reason);
    } catch (telegramError) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', telegramError);
      // –ù–µ –∑—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è
    }

    // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
     try {
       registrationWebSocketService.notifyRegistrationStatusChange(userDataForNotification, 'pending', 'rejected');
     } catch (wsError) {
       logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ WebSocket —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', wsError);
     }

    // –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞–º—ñ—Å—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º rejected
    await User.findByIdAndDelete(id);

    res.json({
      success: true,
      message: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Å–∏—Å—Ç–µ–º–∏',
      data: { deletedUserId: id }
    });
  } catch (error) {
    logger.error('Error rejecting registration:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó',
      error: error.message
    });
  }
};

// –û—á–∏—Å—Ç–∏—Ç–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
exports.cleanupRegistrations = async (req, res) => {
  try {
    const { runCleanupNow } = require('../jobs/cleanupJob');
    
    const result = await runCleanupNow();
    
    res.json({
      success: true,
      message: `–û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏–¥–∞–ª–µ–Ω–æ ${result.total} –∑–∞–ø–∏—Å—ñ–≤`,
      data: {
        pending: {
          cleaned: result.pending.cleaned,
          details: result.pending.details
        },
        rejected: {
          cleaned: result.rejected.cleaned,
          details: result.rejected.details
        },
        total: result.total
      }
    });
  } catch (error) {
    logger.error('Error cleaning up registrations:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π',
      error: error.message
    });
  }
};

// –ü–æ–≤–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (force delete)
exports.forceDeleteUser = async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if (req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'
      });
    }

    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–∞–º–æ–≥–æ —Å–µ–±–µ
    if (user._id.equals(req.user._id)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–∞–º–æ–≥–æ —Å–µ–±–µ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–∫—Ç–∏–≤–Ω—ñ —Ç—ñ–∫–µ—Ç–∏
    const Ticket = require('../models/Ticket');
    const activeTicketsCount = await Ticket.countDocuments({
      $or: [
        { createdBy: id },
        { assignedTo: id }
      ],
      status: { $in: ['open', 'in_progress'] }
    });

    const allTicketsCount = await Ticket.countDocuments({
      $or: [
        { createdBy: id },
        { assignedTo: id }
      ]
    });

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    const userInfo = {
      id: user._id,
      email: user.email,
      firstName: user.firstName,
      lastName: user.lastName,
      role: user.role
    };

    // –ü–æ–≤–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    await User.findByIdAndDelete(id);
    
    logger.info(`üóëÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª–µ–Ω–æ:`, {
      ...userInfo,
      activeTickets: activeTicketsCount,
      totalTickets: allTicketsCount,
      deletedBy: req.user.email
    });

    res.json({
      success: true,
      message: activeTicketsCount > 0 
        ? `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Å–∏—Å—Ç–µ–º–∏ (–±—É–ª–æ ${activeTicketsCount} –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—ñ–∫–µ—Ç—ñ–≤ —Ç–∞ ${allTicketsCount} –∑–∞–≥–∞–ª–æ–º)`
        : '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Å–∏—Å—Ç–µ–º–∏',
      data: {
        deletedUser: userInfo,
        activeTicketsCount,
        totalTicketsCount: allTicketsCount
      }
    });
  } catch (error) {
    logger.error('Error force deleting user:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤–Ω–æ–º—É –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
      error: error.message
    });
  }
};
