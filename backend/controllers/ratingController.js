const Rating = require('../models/Rating');
const Ticket = require('../models/Ticket');
const logger = require('../utils/logger');

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥
const createRating = async (req, res) => {
  try {
    const { ticketId } = req.params;
    const { rating, categories, wouldRecommend } = req.body;
    const userId = req.user.id;

    logger.info(`üåü –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –¥–ª—è —Ç—ñ–∫–µ—Ç–∞ ${ticketId} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}`);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ç—ñ–∫–µ—Ç
    const ticket = await Ticket.findById(ticketId);
    if (!ticket) {
      return res.status(404).json({
        success: false,
        message: '–¢—ñ–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–≤—Ç–æ—Ä–æ–º —Ç—ñ–∫–µ—Ç–∞
    if (ticket.user.toString() !== userId) {
      return res.status(403).json({
        success: false,
        message: '–í–∏ –º–æ–∂–µ—Ç–µ –æ—Ü—ñ–Ω–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Å–≤–æ—ó —Ç—ñ–∫–µ—Ç–∏'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç—ñ–∫–µ—Ç –∑–∞–∫—Ä–∏—Ç–∏–π
    if (ticket.status !== '–í–∏—Ä—ñ—à–µ–Ω–∏–π' && ticket.status !== '–ó–∞–∫—Ä–∏—Ç–∏–π') {
      return res.status(400).json({
        success: false,
        message: '–ú–æ–∂–Ω–∞ –æ—Ü—ñ–Ω–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑–∞–∫—Ä–∏—Ç—ñ –∞–±–æ –≤–∏—Ä—ñ—à–µ–Ω—ñ —Ç—ñ–∫–µ—Ç–∏'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Ü—å–æ–≥–æ —Ç—ñ–∫–µ—Ç–∞
    const existingRating = await Rating.findOne({ ticket: ticketId });
    if (existingRating) {
      return res.status(400).json({
        success: false,
        message: '–†–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Ü—å–æ–≥–æ —Ç—ñ–∫–µ—Ç–∞ –≤–∂–µ —ñ—Å–Ω—É—î'
      });
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    const newRating = new Rating({
      ticket: ticketId,
      user: userId,
      rating,
      categories,
      wouldRecommend
    });

    await newRating.save();

    // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    await newRating.populate(['ticket', 'user']);

    logger.info(`‚úÖ –†–µ–π—Ç–∏–Ω–≥ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ –¥–ª—è —Ç—ñ–∫–µ—Ç–∞ ${ticketId}`);

    res.status(201).json({
      success: true,
      message: '–†–µ–π—Ç–∏–Ω–≥ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ',
      data: newRating
    });

  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–µ–π—Ç–∏–Ω–≥—É:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ —Ç—ñ–∫–µ—Ç–∞
const getRatingByTicket = async (req, res) => {
  try {
    const { ticketId } = req.params;

    const rating = await Rating.findOne({ ticket: ticketId })
      .populate('user', 'firstName lastName email')
      .populate('ticket', 'title status');

    if (!rating) {
      return res.status(404).json({
        success: false,
        message: '–†–µ–π—Ç–∏–Ω–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    res.json({
      success: true,
      data: rating
    });

  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ–π—Ç–∏–Ω–≥—É:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ä–µ–π—Ç–∏–Ω–≥–∏ (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
const getAllRatings = async (req, res) => {
  try {
    const { page = 1, limit = 10, rating: ratingFilter, startDate, endDate, source } = req.query;

    const query = {};

    // –§—ñ–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    if (ratingFilter) {
      query.rating = parseInt(ratingFilter);
    }

    // –§—ñ–ª—å—Ç—Ä –ø–æ –¥–∂–µ—Ä–µ–ª—É
    if (source) {
      query.source = source;
    }

    // –§—ñ–ª—å—Ç—Ä –ø–æ –¥–∞—Ç—ñ
    if (startDate || endDate) {
      query.createdAt = {};
      if (startDate) query.createdAt.$gte = new Date(startDate);
      if (endDate) query.createdAt.$lte = new Date(endDate);
    }

    const ratings = await Rating.find(query)
      .populate('user', 'firstName lastName email')
      .populate('ticket', 'title status category')
      .sort({ createdAt: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit);

    const total = await Rating.countDocuments(query);

    res.json({
      success: true,
      data: {
        ratings,
        pagination: {
          current: parseInt(page),
          pages: Math.ceil(total / limit),
          total
        }
      }
    });

  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤
const getRatingStats = async (req, res) => {
  try {
    const { period = '30', source } = req.query; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 30 –¥–Ω—ñ–≤

    const startDate = new Date();
    startDate.setDate(startDate.getDate() - parseInt(period));

    // –ë–∞–∑–æ–≤–∏–π —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è –¥–∂–µ—Ä–µ–ª–∞ —Ç–∞ –ø–µ—Ä—ñ–æ–¥—É
    const periodFilter = {
      createdAt: { $gte: startDate, $lte: new Date() }
    };
    const sourceFilter = source ? { source } : {};
    const combinedFilter = { ...periodFilter, ...sourceFilter };

    // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º –ø–æ –¥–∂–µ—Ä–µ–ª—É —Ç–∞ –ø–µ—Ä—ñ–æ–¥—É
    const generalStats = await Rating.aggregate([
      { $match: combinedFilter },
      {
        $group: {
          _id: null,
          averageRating: { $avg: '$rating' },
          totalRatings: { $sum: 1 },
          averageSpeed: { $avg: '$categories.speed' },
          averageQuality: { $avg: '$categories.quality' },
          averageCommunication: { $avg: '$categories.communication' },
          averageProfessionalism: { $avg: '$categories.professionalism' }
        }
      }
    ]);
    
    const generalStatsResult = generalStats.length > 0 ? generalStats[0] : {
      _id: null,
      averageRating: 0,
      totalRatings: 0,
      averageSpeed: null,
      averageQuality: null,
      averageCommunication: null,
      averageProfessionalism: null
    };

    // –†–æ–∑–ø–æ–¥—ñ–ª —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤ –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º –ø–æ –¥–∂–µ—Ä–µ–ª—É —Ç–∞ –ø–µ—Ä—ñ–æ–¥—É
    const distributionStats = await Rating.aggregate([
      { $match: combinedFilter },
      {
        $group: {
          _id: '$rating',
          count: { $sum: 1 }
        }
      },
      {
        $sort: { _id: 1 }
      }
    ]);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥ –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º –ø–æ –¥–∂–µ—Ä–µ–ª—É —Ç–∞ –ø–µ—Ä—ñ–æ–¥—É
    const periodQuery = combinedFilter;
    const periodRatings = await Rating.find(periodQuery);


    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º –ø–æ –¥–∂–µ—Ä–µ–ª—É —Ç–∞ –ø–µ—Ä—ñ–æ–¥—É
    const categoryStats = await Rating.aggregate([
      { $match: combinedFilter },
      {
        $group: {
          _id: null,
          avgSpeed: { $avg: '$categories.speed' },
          avgQuality: { $avg: '$categories.quality' },
          avgCommunication: { $avg: '$categories.communication' },
          avgProfessionalism: { $avg: '$categories.professionalism' }
        }
      }
    ]);

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º –ø–æ –¥–∂–µ—Ä–µ–ª—É —Ç–∞ –ø–µ—Ä—ñ–æ–¥—É (—Ç—ñ–ª—å–∫–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ)
    const recommendationStats = await Rating.aggregate([
      { 
        $match: { 
          ...combinedFilter,
          wouldRecommend: true 
        } 
      },
      {
        $group: {
          _id: null,
          count: { $sum: 1 }
        }
      }
    ]);

    res.json({
      success: true,
      data: {
        general: {
          distribution: distributionStats,
          total: generalStatsResult.totalRatings,
          average: generalStatsResult
        },
        period: {
          days: parseInt(period),
          ratings: periodRatings.length,
          average: periodRatings.length > 0 
            ? periodRatings.reduce((sum, r) => sum + r.rating, 0) / periodRatings.length 
            : 0
        },
        detailed: distributionStats.map(item => ({
          _id: item._id,
          count: item.count,
          percentage: generalStatsResult.totalRatings > 0 
            ? (item.count / generalStatsResult.totalRatings) * 100 
            : 0
        })),
        categories: categoryStats[0] || {},
        recommendations: recommendationStats
      }
    });

  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

// –û–Ω–æ–≤–∏—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥
const updateRating = async (req, res) => {
  try {
    const { ratingId } = req.params;
    const { rating, categories, wouldRecommend } = req.body;
    const userId = req.user.id;

    const existingRating = await Rating.findById(ratingId);
    if (!existingRating) {
      return res.status(404).json({
        success: false,
        message: '–†–µ–π—Ç–∏–Ω–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–≤—Ç–æ—Ä–æ–º —Ä–µ–π—Ç–∏–Ω–≥—É
    if (existingRating.user.toString() !== userId) {
      return res.status(403).json({
        success: false,
        message: '–í–∏ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Å–≤–æ—ó —Ä–µ–π—Ç–∏–Ω–≥–∏'
      });
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
    existingRating.rating = rating || existingRating.rating;
    existingRating.categories = categories || existingRating.categories;
    existingRating.wouldRecommend = wouldRecommend !== undefined ? wouldRecommend : existingRating.wouldRecommend;

    await existingRating.save();
    await existingRating.populate(['ticket', 'user']);

    logger.info(`‚úÖ –†–µ–π—Ç–∏–Ω–≥ ${ratingId} –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);

    res.json({
      success: true,
      message: '–†–µ–π—Ç–∏–Ω–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ',
      data: existingRating
    });

  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ä–µ–π—Ç–∏–Ω–≥—É:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

// –í–∏–¥–∞–ª–∏—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥
const deleteRating = async (req, res) => {
  try {
    const { ratingId } = req.params;
    const userId = req.user.id;
    const userRole = req.user.role;

    const rating = await Rating.findById(ratingId);
    if (!rating) {
      return res.status(404).json({
        success: false,
        message: '–†–µ–π—Ç–∏–Ω–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
    if (rating.user.toString() !== userId && userRole !== 'admin') {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ü—å–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥—É'
      });
    }

    await Rating.findByIdAndDelete(ratingId);

    logger.info(`‚úÖ –†–µ–π—Ç–∏–Ω–≥ ${ratingId} –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);

    res.json({
      success: true,
      message: '–†–µ–π—Ç–∏–Ω–≥ –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
    });

  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ä–µ–π—Ç–∏–Ω–≥—É:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

module.exports = {
  createRating,
  getRatingByTicket,
  getAllRatings,
  getRatingStats,
  updateRating,
  deleteRating
};