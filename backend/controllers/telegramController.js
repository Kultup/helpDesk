const User = require('../models/User');
const Position = require('../models/Position');
const City = require('../models/City');
const telegramService = require('../services/telegramServiceInstance');
const { validationResult } = require('express-validator');
const logger = require('../utils/logger');

// –û–±—Ä–æ–±–∫–∞ –≤–µ–±—Ö—É–∫–∞ –≤—ñ–¥ Telegram
exports.handleWebhook = async (req, res) => {
  try {
    const update = req.body;
    
    if (update.message) {
      await handleMessage(update.message);
    } else if (update.callback_query) {
      await handleCallbackQuery(update.callback_query);
    }

    res.status(200).json({ success: true });
  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Telegram –≤–µ–±—Ö—É–∫–∞:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–µ–±—Ö—É–∫–∞'
    });
  }
};

// –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async function handleMessage(message) {
  const chatId = message.chat.id;
  const text = message.text;
  const userId = message.from.id;

  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
    const user = await User.findOne({ telegramId: userId });

    if (!user && !text?.startsWith('/start')) {
      await telegramService.sendMessage(chatId, 
        '–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏.'
      );
      return;
    }

    // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
    if (text?.startsWith('/')) {
      await handleCommand(chatId, text, userId, user);
    } else {
      // –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
      await handleTextMessage(chatId, text, user);
    }
  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
    await telegramService.sendMessage(chatId, 
      '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'
    );
  }
}

// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
async function handleCommand(chatId, command, telegramId, user) {
  const [cmd, ...args] = command.split(' ');

  switch (cmd) {
    case '/start':
      await handleStartCommand(chatId, telegramId, args);
      break;
    
    case '/help':
      await handleHelpCommand(chatId, user);
      break;
    
    case '/profile':
      await handleProfileCommand(chatId, user);
      break;
    
    case '/tickets':
      await handleTicketsCommand(chatId, user);
      break;
    
    case '/create':
      await handleCreateTicketCommand(chatId, user, args.join(' '));
      break;
    
    case '/status':
      await handleStatusCommand(chatId, user, args[0]);
      break;
    
    case '/cities':
      await handleCitiesCommand(chatId, user);
      break;
    
    default:
      await telegramService.sendMessage(chatId, 
        '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.'
      );
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
async function handleStartCommand(chatId, telegramId, args) {
  const authToken = args[0];
  
  if (authToken) {
    // –°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ —Ç–æ–∫–µ–Ω–æ–º
    try {
      const user = await User.findOne({ authToken });
      if (user && !user.telegramId) {
        user.telegramId = telegramId;
        user.authToken = undefined; // –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–∫–µ–Ω –ø—ñ—Å–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        await user.save();
        
        await telegramService.sendMessage(chatId, 
          `–í—ñ—Ç–∞—î–º–æ, ${user.email}! –í–∞—à –∞–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Telegram.`
        );
        await handleHelpCommand(chatId, user);
      } else {
        await telegramService.sendMessage(chatId, 
          '–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.'
        );
      }
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Telegram:', error);
      await telegramService.sendMessage(chatId, 
        '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω.'
      );
    }
  } else {
    await telegramService.sendMessage(chatId, 
      '–í—ñ—Ç–∞—î–º–æ –≤ —Å–∏—Å—Ç–µ–º—ñ Help Desk!\n\n' +
      '–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –æ—Ç—Ä–∏–º–∞–π—Ç–µ —Ç–æ–∫–µ–Ω —É –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n' +
      '/start YOUR_TOKEN'
    );
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /help
async function handleHelpCommand(chatId, user) {
  const helpText = user ? 
    '–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n\n' +
    '/profile - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å\n' +
    '/tickets - –ú–æ—ó —Ç–∏–∫–µ—Ç–∏\n' +
    '/create <–æ–ø–∏—Å> - –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–∫–µ—Ç\n' +
    '/status <ID> - –°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç—É\n' +
    '/cities - –°–ø–∏—Å–æ–∫ –º—ñ—Å—Ç\n' +
    '/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞'
    :
    '–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ —Å–ø–æ—á–∞—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:\n' +
    '/start YOUR_TOKEN\n\n' +
    '–¢–æ–∫–µ–Ω –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —É –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ —Å–∏—Å—Ç–µ–º–∏.';

  await telegramService.sendMessage(chatId, helpText);
}

// –ö–æ–º–∞–Ω–¥–∞ /profile
async function handleProfileCommand(chatId, user) {
  if (!user) {
    await telegramService.sendMessage(chatId, '–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.');
    return;
  }

  const profileText = 
    `üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\n\n` +
    `üìß Email: ${user.email}\n` +
    `üíº –ü–æ—Å–∞–¥–∞: ${user.position || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n` +
    `üèôÔ∏è –ú—ñ—Å—Ç–æ: ${user.city || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n` +
    `üëë –†–æ–ª—å: ${user.role === 'admin' ? '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}`;

  await telegramService.sendMessage(chatId, profileText);
}

// –ö–æ–º–∞–Ω–¥–∞ /tickets
async function handleTicketsCommand(chatId, user) {
  if (!user) {
    await telegramService.sendMessage(chatId, '–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.');
    return;
  }

  try {
    const tickets = await Ticket.find({
      $or: [
        { createdBy: user._id },
        { assignedTo: user._id }
      ]
    })
    .populate('city', 'name')
    .sort({ createdAt: -1 })
    .limit(10);

    if (tickets.length === 0) {
      await telegramService.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ–º–∞—î —Ç–∏–∫–µ—Ç—ñ–≤.');
      return;
    }

    let ticketsText = 'üé´ –í–∞—à—ñ —Ç–∏–∫–µ—Ç–∏:\n\n';
    
    tickets.forEach((ticket, index) => {
      const statusEmoji = getStatusEmoji(ticket.status);
      const priorityEmoji = getPriorityEmoji(ticket.priority);
      
      ticketsText += 
        `${index + 1}. ${statusEmoji} ${ticket.title}\n` +
        `   ID: ${ticket._id}\n` +
        `   ${priorityEmoji} –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${ticket.priority}\n` +
        `   üèôÔ∏è –ú—ñ—Å—Ç–æ: ${ticket.city?.name || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n` +
        `   üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: ${ticket.createdAt.toLocaleDateString('uk-UA')}\n\n`;
    });

    await telegramService.sendMessage(chatId, ticketsText);
  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∏–∫–µ—Ç—ñ–≤:', error);
    await telegramService.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∏–∫–µ—Ç—ñ–≤.');
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /create
async function handleCreateTicketCommand(chatId, user, description) {
  if (!user) {
    await telegramService.sendMessage(chatId, '–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.');
    return;
  }

  if (!description || description.trim().length < 10) {
    await telegramService.sendMessage(chatId, 
      '–û–ø–∏—Å —Ç–∏–∫–µ—Ç—É –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –ú—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤.\n' +
      '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /create –û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏'
    );
    return;
  }

  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –º—ñ—Å—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    let userCity = null;
    if (user.city) {
      userCity = await City.findOne({ name: user.city });
    }

    const ticket = new Ticket({
      title: description.substring(0, 100), // –ü–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤ —è–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
      description: description,
      status: 'open',
      priority: 'medium',
      city: userCity?._id,
      createdBy: user._id,
      source: 'telegram'
    });

    await ticket.save();
    await ticket.populate('city', 'name');

    const successText = 
      `‚úÖ –¢–∏–∫–µ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!\n\n` +
      `üÜî ID: ${ticket._id}\n` +
      `üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${ticket.title}\n` +
      `üìä –°—Ç–∞—Ç—É—Å: –í—ñ–¥–∫—Ä–∏—Ç–∏–π\n` +
      `‚ö° –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: –°–µ—Ä–µ–¥–Ω—ñ–π\n` +
      `üèôÔ∏è –ú—ñ—Å—Ç–æ: ${ticket.city?.name || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}`;

    await telegramService.sendMessage(chatId, successText);
  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–∫–µ—Ç—É:', error);
    await telegramService.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–∫–µ—Ç—É.');
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /status
async function handleStatusCommand(chatId, user, ticketId) {
  if (!user) {
    await telegramService.sendMessage(chatId, '–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.');
    return;
  }

  if (!ticketId) {
    await telegramService.sendMessage(chatId, 
      '–í–∫–∞–∂—ñ—Ç—å ID —Ç–∏–∫–µ—Ç—É.\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /status TICKET_ID'
    );
    return;
  }

  try {
    const ticket = await Ticket.findOne({
      _id: ticketId,
      $or: [
        { createdBy: user._id },
        { assignedTo: user._id }
      ]
    })
    .populate('city', 'name')
    .populate('assignedTo', 'email')
    .populate('createdBy', 'email');

    if (!ticket) {
      await telegramService.sendMessage(chatId, '–¢–∏–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.');
      return;
    }

    const statusEmoji = getStatusEmoji(ticket.status);
    const priorityEmoji = getPriorityEmoji(ticket.priority);
    
    const statusText = 
      `üé´ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–∏–∫–µ—Ç:\n\n` +
      `üÜî ID: ${ticket._id}\n` +
      `üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${ticket.title}\n` +
      `üìÑ –û–ø–∏—Å: ${ticket.description}\n` +
      `${statusEmoji} –°—Ç–∞—Ç—É—Å: ${getStatusText(ticket.status)}\n` +
      `${priorityEmoji} –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${getPriorityText(ticket.priority)}\n` +
      `üèôÔ∏è –ú—ñ—Å—Ç–æ: ${ticket.city?.name || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n` +
      `üë§ –°—Ç–≤–æ—Ä–∏–≤: ${ticket.createdBy?.email}\n` +
      `üë®‚Äçüíº –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ: ${ticket.assignedTo?.email || '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ'}\n` +
      `üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: ${ticket.createdAt.toLocaleString('uk-UA')}\n` +
      `${ticket.resolvedAt ? `‚úÖ –í–∏—Ä—ñ—à–µ–Ω–æ: ${ticket.resolvedAt.toLocaleString('uk-UA')}` : ''}`;

    await telegramService.sendMessage(chatId, statusText);
  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ç–∏–∫–µ—Ç—É:', error);
    await telegramService.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–∏–∫–µ—Ç.');
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /cities
async function handleCitiesCommand(chatId, user) {
  if (!user) {
    await telegramService.sendMessage(chatId, '–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.');
    return;
  }

  try {
    const cities = await City.find().sort({ name: 1 }).limit(20);
    
    if (cities.length === 0) {
      await telegramService.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ –º—ñ—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π.');
      return;
    }

    let citiesText = 'üèôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ –º—ñ—Å—Ç–∞:\n\n';
    cities.forEach((city, index) => {
      citiesText += `${index + 1}. ${city.name}${city.region ? ` (${city.region})` : ''}\n`;
    });

    await telegramService.sendMessage(chatId, citiesText);
  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º—ñ—Å—Ç:', error);
    await telegramService.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º—ñ—Å—Ç.');
  }
}

// –û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—ñ–≤
async function handleCallbackQuery(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  const userId = callbackQuery.from.id;

  try {
    const user = await User.findOne({ telegramId: userId });
    
    if (!user) {
      await telegramService.answerCallbackQuery(callbackQuery.id, '–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ');
      return;
    }

    // –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ callback
    if (data.startsWith('ticket_')) {
      await handleTicketCallback(chatId, data, user, callbackQuery.id);
    } else if (data === 'back') {
      telegramService.popState(chatId);
      const currentState = telegramService.getCurrentState(chatId) || 'main';
      await telegramService.showMenuForState(chatId, currentState);
      await telegramService.answerCallbackQuery(callbackQuery.id, '–ü–æ–≤–µ—Ä–Ω–µ–Ω–æ –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é');
    } else {
      await telegramService.answerCallbackQuery(callbackQuery.id);
    }
  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback –∑–∞–ø–∏—Ç—É:', error);
    await telegramService.answerCallbackQuery(callbackQuery.id, '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É');
  }
}

// –û–±—Ä–æ–±–∫–∞ callback –¥–ª—è —Ç–∏–∫–µ—Ç—ñ–≤
async function handleTicketCallback(chatId, data, user, callbackQueryId) {
  const [action, ticketId] = data.split('_').slice(1);

  try {
    const ticket = await Ticket.findById(ticketId);
    
    if (!ticket) {
      await telegramService.answerCallbackQuery(callbackQueryId, '–¢–∏–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    switch (action) {
      case 'details':
        await handleStatusCommand(chatId, user, ticketId);
        break;
      
      case 'take':
        if (user.role === 'admin' || ticket.assignedTo?.toString() === user._id.toString()) {
          ticket.assignedTo = user._id;
          ticket.status = 'in_progress';
          await ticket.save();
          
          await telegramService.sendMessage(chatId, 
            `‚úÖ –í–∏ –≤–∑—è–ª–∏ —Ç–∏–∫–µ—Ç "${ticket.title}" –≤ —Ä–æ–±–æ—Ç—É.`
          );
        } else {
          await telegramService.answerCallbackQuery(callbackQueryId, '–ù–µ–º–∞—î –ø—Ä–∞–≤');
        }
        break;
    }
  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback —Ç–∏–∫–µ—Ç—É:', error);
    await telegramService.answerCallbackQuery(callbackQueryId, '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏');
  }
}

// –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async function handleTextMessage(chatId, text, user) {
  if (!user) {
    await telegramService.sendMessage(chatId, '–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.');
    return;
  }

  // –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ö–æ–∂–µ –Ω–∞ –æ–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏, –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–∫–µ—Ç
  if (text && text.length > 20) {
    const keyboard = {
      inline_keyboard: [[
        {
          text: 'üé´ –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–∫–µ—Ç',
          callback_data: `create_ticket_${text.substring(0, 50)}`
        }
      ]]
    };

    await telegramService.sendMessage(chatId, 
      '–°—Ö–æ–∂–µ, –≤–∏ –æ–ø–∏—Å—É—î—Ç–µ –ø—Ä–æ–±–ª–µ–º—É. –•–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–∫–µ—Ç?',
      { reply_markup: keyboard }
    );
  } else {
    await telegramService.sendMessage(chatId, 
      '–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–º–∞–Ω–¥.'
    );
  }
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –µ–º–æ–¥–∑—ñ —Ç–∞ —Ç–µ–∫—Å—Ç—ñ–≤
function getStatusEmoji(status) {
  const emojis = {
    open: 'üî¥',
    in_progress: 'üü°',
    resolved: 'üü¢',
    closed: '‚ö´'
  };
  return emojis[status] || '‚ùì';
}

function getPriorityEmoji(priority) {
  const emojis = {
    low: 'üîµ',
    medium: 'üü°',
    high: 'üî¥'
  };
  return emojis[priority] || '‚ùì';
}

function getStatusText(status) {
  const texts = {
    open: '–í—ñ–¥–∫—Ä–∏—Ç–∏–π',
    in_progress: '–í —Ä–æ–±–æ—Ç—ñ',
    resolved: '–í–∏—Ä—ñ—à–µ–Ω–∏–π',
    closed: '–ó–∞–∫—Ä–∏—Ç–∏–π'
  };
  return texts[status] || '–ù–µ–≤—ñ–¥–æ–º–∏–π';
}

function getPriorityText(priority) {
  const texts = {
    low: '–ù–∏–∑—å–∫–∏–π',
    medium: '–°–µ—Ä–µ–¥–Ω—ñ–π',
    high: '–í–∏—Å–æ–∫–∏–π'
  };
  return texts[priority] || '–ù–µ–≤—ñ–¥–æ–º–∏–π';
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
exports.generateAuthToken = async (req, res) => {
  try {
    const userId = req.user.id;
    const authToken = require('crypto').randomBytes(32).toString('hex');
    
    await User.findByIdAndUpdate(userId, { 
      authToken,
      authTokenExpires: new Date(Date.now() + 10 * 60 * 1000) // 10 —Ö–≤–∏–ª–∏–Ω
    });

    res.json({
      success: true,
      data: {
        token: authToken,
        expiresIn: '10 —Ö–≤–∏–ª–∏–Ω',
        instructions: `–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ Telegram: /start ${authToken}`
      }
    });
  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω—É'
    });
  }
};

// –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Telegram
exports.disconnectTelegram = async (req, res) => {
  try {
    const userId = req.user.id;
    
    await User.findByIdAndUpdate(userId, { 
      telegramId: undefined,
      authToken: undefined,
      authTokenExpires: undefined
    });

    res.json({
      success: true,
      message: 'Telegram –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ –∞–∫–∞—É–Ω—Ç—É'
    });
  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Telegram:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Telegram'
    });
  }
};

// –°—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Telegram
exports.getTelegramStatus = async (req, res) => {
  try {
    const userId = req.user.id;
    const user = await User.findById(userId).select('telegramId');
    
    res.json({
      success: true,
      data: {
        connected: !!user.telegramId,
        telegramId: user.telegramId
      }
    });
  } catch (error) {
    logger.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É Telegram:', error);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É'
    });
  }
};
