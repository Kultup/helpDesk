import { useState } from 'react';
import { toast } from 'react-hot-toast';

interface ExportFilters {
  format: 'csv' | 'excel';
  status?: string;
  priority?: string;
  city?: string;
  assignedTo?: string;
  createdBy?: string;
  dateFrom?: string;
  dateTo?: string;
  includeComments: boolean;
  includeAttachments: boolean;
}

export const useTicketExport = () => {
  const [isExporting, setIsExporting] = useState(false);

  const exportTickets = async (filters: ExportFilters) => {
    console.log('üöÄ Starting export with filters:', filters);
    setIsExporting(true);
    
    try {
      // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑–∞–ø–∏—Ç—É
      const params = new URLSearchParams();
      
      // –î–æ–¥–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç
      params.append('format', filters.format);
      
      // –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ —è–∫—â–æ –≤–æ–Ω–∏ —î
      if (filters.status) params.append('status', filters.status);
      if (filters.priority) params.append('priority', filters.priority);
      if (filters.city) params.append('city', filters.city);
      if (filters.assignedTo) params.append('assignedTo', filters.assignedTo);
      if (filters.createdBy) params.append('createdBy', filters.createdBy);
      if (filters.dateFrom) params.append('dateFrom', filters.dateFrom);
      if (filters.dateTo) params.append('dateTo', filters.dateTo);
      
      // –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó
      params.append('includeComments', filters.includeComments.toString());
      params.append('includeAttachments', filters.includeAttachments.toString());

      console.log('üìã Export URL params:', params.toString());

      // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ localStorage
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      }

      console.log('üîë Token found:', token ? 'Yes' : 'No');

      const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';
      const apiUrl = `${API_BASE_URL}/tickets/export?${params.toString()}`;
      console.log('üåê Making request to:', apiUrl);

      // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
      const response = await fetch(apiUrl, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      console.log('üì° Response status:', response.status);
      console.log('üì° Response headers:', Object.fromEntries(response.headers.entries()));

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error('‚ùå Response error:', errorData);
        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ blob –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      const blob = await response.blob();
      console.log('üì¶ Blob size:', blob.size, 'bytes');
      console.log('üì¶ Blob type:', blob.type);
      
      // –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É –∑ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –≤–ª–∞—Å–Ω–µ
      const contentDisposition = response.headers.get('Content-Disposition');
      let filename = `tickets_export_${new Date().toISOString().split('T')[0]}.${filters.format === 'excel' ? 'xlsx' : 'csv'}`;
      
      console.log('üìÑ Content-Disposition header:', contentDisposition);
      
      if (contentDisposition) {
        const filenameMatch = contentDisposition.match(/filename="(.+)"/);
        if (filenameMatch) {
          filename = filenameMatch[1];
        }
      }

      console.log('üìÑ Final filename:', filename);

      // –°—Ç–≤–æ—Ä—é—î–º–æ URL –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      const url = window.URL.createObjectURL(blob);
      console.log('üîó Created blob URL:', url);
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      const link = document.createElement('a');
      link.href = url;
      link.download = filename;
      document.body.appendChild(link);
      
      console.log('‚¨áÔ∏è Triggering download...');
      link.click();
      
      // –û—á–∏—â—É—î–º–æ —Ä–µ—Å—É—Ä—Å–∏
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);

      console.log('‚úÖ Export completed successfully');
      toast.success('–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!');
      
    } catch (error) {
      console.error('Export error:', error);
      toast.error(error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ —Ç—ñ–∫–µ—Ç—ñ–≤');
      throw error;
    } finally {
      setIsExporting(false);
    }
  };

  return {
    exportTickets,
    isExporting
  };
};